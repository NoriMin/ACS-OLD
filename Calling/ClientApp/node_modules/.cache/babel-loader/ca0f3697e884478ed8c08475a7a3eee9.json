{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { splitButtonBehavior } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ALIGNMENTS, POSITIONS } from '../../utils/positioner';\nimport { isFromKeyboard as checkIsFromKeyboard, commonPropTypes, createShorthand, createShorthandFactory } from '../../utils';\nimport { SplitButtonToggle } from './SplitButtonToggle';\nimport { Button } from '../Button/Button';\nimport { MenuButton } from '../MenuButton/MenuButton';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { useTelemetry, useAutoControlled, useAccessibility, getElementType, useFluentContext, useUnhandledProps, useStyles } from '@fluentui/react-bindings';\nexport var splitButtonClassName = 'ui-splitbutton';\n/**\n * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.\n */\n\nexport var SplitButton = /*#__PURE__*/function () {\n  var SplitButton = function SplitButton(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(SplitButton.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var button = props.button,\n        disabled = props.disabled,\n        menu = props.menu,\n        primary = props.primary,\n        secondary = props.secondary,\n        toggleButton = props.toggleButton,\n        size = props.size,\n        position = props.position,\n        align = props.align,\n        flipBoundary = props.flipBoundary,\n        overflowBoundary = props.overflowBoundary,\n        popperRef = props.popperRef,\n        positionFixed = props.positionFixed,\n        offset = props.offset,\n        unstable_pinned = props.unstable_pinned,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        accessibility = props.accessibility,\n        variables = props.variables;\n    var targetRef = React.useRef();\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(SplitButton.handledProps, props);\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultOpen,\n      value: props.open,\n      initialValue: false\n    }),\n        open = _useAutoControlled[0],\n        setOpen = _useAutoControlled[1];\n\n    var _React$useState = React.useState(false),\n        isFromKeyboard = _React$useState[0],\n        setIsFromKeyboard = _React$useState[1];\n\n    var getA11yProps = useAccessibility(accessibility, {\n      debugName: SplitButton.displayName,\n      mapPropsToBehavior: function mapPropsToBehavior() {\n        return {\n          open: open\n        };\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(SplitButton.displayName, {\n      className: splitButtonClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          isFromKeyboard: isFromKeyboard,\n          size: size\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var handleMenuButtonOverrides = function handleMenuButtonOverrides(predefinedProps) {\n      return {\n        onMenuItemClick: function onMenuItemClick(e, menuItemProps) {\n          setOpen(false);\n\n          _invoke(props, 'onOpenChange', e, Object.assign({}, props, {\n            open: false\n          }));\n\n          _invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);\n\n          _invoke(props, 'onMenuItemClick', e, menuItemProps);\n        },\n        onOpenChange: function onOpenChange(e, popupProps) {\n          e.stopPropagation();\n          setOpen(popupProps.open);\n\n          _invoke(props, 'onOpenChange', e, Object.assign({}, props, {\n            open: popupProps.open\n          }));\n        }\n      };\n    };\n\n    var handleMenuButtonTriggerOverrides = function handleMenuButtonTriggerOverrides(predefinedProps) {\n      return {\n        onClick: function onClick(e, buttonProps) {\n          _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n          _invoke(props, 'onMainButtonClick', e, buttonProps);\n        },\n        onFocus: function onFocus(e, buttonProps) {\n          _invoke(predefinedProps, 'onFocus', e, buttonProps);\n\n          setIsFromKeyboard(checkIsFromKeyboard());\n        }\n      };\n    };\n\n    var element = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: targetRef\n    }, /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), MenuButton.create({}, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('menuButton', {\n          menu: menu,\n          on: [],\n          open: open,\n          trigger: createShorthand(Button, button, {\n            defaultProps: function defaultProps() {\n              return {\n                styles: resolvedStyles.menuButton,\n                primary: primary,\n                secondary: secondary,\n                disabled: disabled\n              };\n            },\n            overrideProps: handleMenuButtonTriggerOverrides\n          }),\n          target: targetRef.current,\n          position: position,\n          align: align,\n          flipBoundary: flipBoundary,\n          overflowBoundary: overflowBoundary,\n          popperRef: popperRef,\n          positionFixed: positionFixed,\n          offset: offset,\n          unstable_pinned: unstable_pinned\n        });\n      },\n      overrideProps: handleMenuButtonOverrides\n    }), SplitButtonToggle.create(toggleButton, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('toggleButton', {\n          disabled: disabled,\n          primary: primary,\n          secondary: secondary,\n          size: size\n        });\n      },\n      overrideProps: function overrideProps(predefinedProps) {\n        return {\n          onClick: function onClick(e, buttonProps) {\n            _invoke(predefinedProps, 'onClick', e, buttonProps);\n\n            setOpen(function (isOpen) {\n              var open = !isOpen;\n\n              _invoke(props, 'onOpenChange', e, Object.assign({}, props, {\n                open: open\n              }));\n\n              return open;\n            });\n          }\n        };\n      }\n    })));\n    setEnd();\n    return element;\n  };\n\n  SplitButton.displayName = 'SplitButton';\n  SplitButton.Toggle = SplitButtonToggle;\n  SplitButton.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    button: customPropTypes.itemShorthand,\n    defaultOpen: PropTypes.bool,\n    menu: PropTypes.oneOfType([customPropTypes.itemShorthand, PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX)]),\n    onMainButtonClick: PropTypes.func,\n    onMenuItemClick: PropTypes.func,\n    onOpenChange: PropTypes.func,\n    open: PropTypes.bool,\n    size: customPropTypes.size,\n    popperRef: customPropTypes.ref,\n    primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n    secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n    toggleButton: customPropTypes.itemShorthand,\n    position: PropTypes.oneOf(POSITIONS),\n    align: PropTypes.oneOf(ALIGNMENTS),\n    flipBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),\n    overflowBoundary: PropTypes.oneOfType([PropTypes.object, PropTypes.arrayOf(PropTypes.object), PropTypes.oneOf(['clippingParents', 'window', 'scrollParent'])]),\n    positionFixed: PropTypes.bool,\n    offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),\n    unstable_pinned: PropTypes.bool\n  });\n  SplitButton.defaultProps = {\n    accessibility: splitButtonBehavior,\n    toggleButton: {},\n    position: 'below',\n    align: 'start'\n  };\n  SplitButton.handledProps = Object.keys(SplitButton.propTypes);\n  SplitButton.create = createShorthandFactory({\n    Component: SplitButton\n  });\n  return SplitButton;\n}();","map":{"version":3,"sources":["components/SplitButton/SplitButton.tsx"],"names":["isFromKeyboard","splitButtonClassName","SplitButton","context","useFluentContext","setStart","setEnd","useTelemetry","button","disabled","menu","primary","secondary","toggleButton","size","position","align","flipBoundary","overflowBoundary","popperRef","positionFixed","offset","unstable_pinned","className","design","styles","accessibility","variables","props","targetRef","React","ElementType","getElementType","unhandledProps","useUnhandledProps","open","setOpen","useAutoControlled","defaultValue","value","initialValue","setIsFromKeyboard","getA11yProps","useAccessibility","debugName","mapPropsToBehavior","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","handleMenuButtonOverrides","onMenuItemClick","onOpenChange","e","popupProps","handleMenuButtonTriggerOverrides","onClick","onFocus","checkIsFromKeyboard","element","root","defaultProps","on","trigger","createShorthand","overrideProps","target","content","customPropTypes","defaultOpen","PropTypes","onMainButtonClick","bool","Object","createShorthandFactory","Component"],"mappings":";AAAA,SAAA,mBAAA,QAAA,yBAAA;AACA,OAAO,KAAP,eAAA,MAAA,2BAAA;AACA,OAAO,KAAP,SAAA,MAAA,YAAA;AACA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,SAAA,UAAA,EAAA,SAAA,QAAA,wBAAA;AAEA,SAIEA,cAAc,IAJhB,mBAAA,EAAA,eAAA,EAAA,eAAA,EAAA,sBAAA,QAAA,aAAA;AAUA,SAAA,iBAAA,QAAA,qBAAA;AACA,SAAA,MAAA,QAAA,kBAAA;AACA,SAAA,UAAA,QAAA,0BAAA;AAIA,SAAA,GAAA,QAAA,+BAAA;AAGA,SAAA,YAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,SAAA,QAAA,0BAAA;AAwEA,OAAO,IAAMC,oBAAoB,GAA1B,gBAAA;AAIP;;;;AAGA,OAAO,IAAMC,WAAN,GAAA,aAAA,YAAA;AAAA,MAAMA,WAGV,GAAG,SAHOA,WAGP,CAAA,KAAA,EAAS;AACb,QAAMC,OAAO,GAAGC,gBAAhB,EAAA;;AADa,QAAA,aAAA,GAEgBG,YAAY,CAACL,WAAW,CAAZ,WAAA,EAA0BC,OAAO,CAF7D,SAE4B,CAF5B;AAAA,QAELE,QAFK,GAAA,aAAA,CAAA,QAAA;AAAA,QAEKC,MAFL,GAAA,aAAA,CAAA,MAAA;;AAGbD,IAAAA,QAAQ;AAHK,QAMXG,MANW,GA0BToB,KA1BS,CAAA,MAAA;AAAA,QAOXnB,QAPW,GA0BTmB,KA1BS,CAAA,QAAA;AAAA,QAQXlB,IARW,GA0BTkB,KA1BS,CAAA,IAAA;AAAA,QASXjB,OATW,GA0BTiB,KA1BS,CAAA,OAAA;AAAA,QAUXhB,SAVW,GA0BTgB,KA1BS,CAAA,SAAA;AAAA,QAWXf,YAXW,GA0BTe,KA1BS,CAAA,YAAA;AAAA,QAYXd,IAZW,GA0BTc,KA1BS,CAAA,IAAA;AAAA,QAaXb,QAbW,GA0BTa,KA1BS,CAAA,QAAA;AAAA,QAcXZ,KAdW,GA0BTY,KA1BS,CAAA,KAAA;AAAA,QAeXX,YAfW,GA0BTW,KA1BS,CAAA,YAAA;AAAA,QAgBXV,gBAhBW,GA0BTU,KA1BS,CAAA,gBAAA;AAAA,QAiBXT,SAjBW,GA0BTS,KA1BS,CAAA,SAAA;AAAA,QAkBXR,aAlBW,GA0BTQ,KA1BS,CAAA,aAAA;AAAA,QAmBXP,MAnBW,GA0BTO,KA1BS,CAAA,MAAA;AAAA,QAoBXN,eApBW,GA0BTM,KA1BS,CAAA,eAAA;AAAA,QAqBXL,SArBW,GA0BTK,KA1BS,CAAA,SAAA;AAAA,QAsBXJ,MAtBW,GA0BTI,KA1BS,CAAA,MAAA;AAAA,QAuBXH,MAvBW,GA0BTG,KA1BS,CAAA,MAAA;AAAA,QAwBXF,aAxBW,GA0BTE,KA1BS,CAAA,aAAA;AAAA,QAyBXD,SAzBW,GA0BTC,KA1BS,CAAA,SAAA;AA4Bb,QAAMC,SAAS,GAAGC,KAAK,CAAvB,MAAkBA,EAAlB;AACA,QAAMC,WAAW,GAAGC,cAAc,CAAlC,KAAkC,CAAlC;AACA,QAAMC,cAAc,GAAGC,iBAAiB,CAAChC,WAAW,CAAZ,YAAA,EAAxC,KAAwC,CAAxC;;AA9Ba,QAAA,kBAAA,GA+BWmC,iBAAiB,CAAC;AACxCC,MAAAA,YAAY,EAAEV,KAAK,CADqB,WAAA;AAExCW,MAAAA,KAAK,EAAEX,KAAK,CAF4B,IAAA;AAGxCY,MAAAA,YAAY,EAAE;AAH0B,KAAD,CA/B5B;AAAA,QA+BNL,IA/BM,GAAA,kBAAA,CAAA,CAAA,CAAA;AAAA,QA+BAC,OA/BA,GAAA,kBAAA,CAAA,CAAA,CAAA;;AAAA,QAAA,eAAA,GAqC+BN,KAAK,CAALA,QAAAA,CArC/B,KAqC+BA,CArC/B;AAAA,QAqCN9B,cArCM,GAAA,eAAA,CAAA,CAAA,CAAA;AAAA,QAqCUyC,iBArCV,GAAA,eAAA,CAAA,CAAA,CAAA;;AAuCb,QAAMC,YAAY,GAAGC,gBAAgB,CAAA,aAAA,EAA0C;AAC7EC,MAAAA,SAAS,EAAE1C,WAAW,CADuD,WAAA;AAE7E2C,MAAAA,kBAAkB,EAAE,SAAA,kBAAA,GAAA;AAAA,eAAO;AACzBV,UAAAA,IAAI,EAAJA;AADyB,SAAP;AAFyD,OAAA;AAK7EW,MAAAA,GAAG,EAAE3C,OAAO,CAAC2C;AALgE,KAA1C,CAArC;;AAvCa,QAAA,UAAA,GA+C+BG,SAAS,CAAyB/C,WAAW,CAApC,WAAA,EAAkD;AACrGqB,MAAAA,SAAS,EAD4F,oBAAA;AAErG2B,MAAAA,gBAAgB,EAAE,SAAA,gBAAA,GAAA;AAAA,eAAO;AACvBlD,UAAAA,cAAc,EADS,cAAA;AAEvBc,UAAAA,IAAI,EAAJA;AAFuB,SAAP;AAFmF,OAAA;AAMrGqC,MAAAA,sBAAsB,EAAE,SAAA,sBAAA,GAAA;AAAA,eAAO;AAC7B5B,UAAAA,SAAS,EADoB,SAAA;AAE7BC,UAAAA,MAAM,EAFuB,MAAA;AAG7BC,UAAAA,MAAM,EAHuB,MAAA;AAI7BE,UAAAA,SAAS,EAATA;AAJ6B,SAAP;AAN6E,OAAA;AAYrGmB,MAAAA,GAAG,EAAE3C,OAAO,CAAC2C;AAZwF,KAAlD,CA/CxC;AAAA,QA+CLC,OA/CK,GAAA,UAAA,CAAA,OAAA;AAAA,QA+CYC,cA/CZ,GAAA,UAAA,CAAA,MAAA;;AA8Db,QAAMI,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAA,eAAA,EAAA;AAAA,aAAuC;AACvEC,QAAAA,eAAe,EAAE,SAAA,eAAA,CAAA,CAAA,EAAA,aAAA,EAA2D;AAC1EjB,UAAAA,OAAO,CAAPA,KAAO,CAAPA;;AACA,UAAA,OAAA,CAAA,KAAA,EAAA,cAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA+CD,YAAAA,IAAI,EAAE;AAArD,WAAA,CAAA,CAAA;;AAEA,UAAA,OAAA,CAAA,eAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,aAAA,CAAA;;AACA,UAAA,OAAA,CAAA,KAAA,EAAA,iBAAA,EAAA,CAAA,EAAA,aAAA,CAAA;AANqE,SAAA;AAQvEmB,QAAAA,YAAY,EAAE,SAAA,YAAA,CAAA,CAAA,EAAA,UAAA,EAAqD;AACjEC,UAAAA,CAAC,CAADA,eAAAA;AACAnB,UAAAA,OAAO,CAACoB,UAAU,CAAlBpB,IAAO,CAAPA;;AACA,UAAA,OAAA,CAAA,KAAA,EAAA,cAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA+CD,YAAAA,IAAI,EAAEqB,UAAU,CAACrB;AAAhE,WAAA,CAAA,CAAA;AACD;AAZsE,OAAvC;AAAlC,KAAA;;AAeA,QAAMsB,gCAAgC,GAAG,SAAnCA,gCAAmC,CAAA,eAAA,EAAA;AAAA,aAAmC;AAC1EC,QAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA,WAAA,EAAuD;AAC9D,UAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,WAAA,CAAA;;AACA,UAAA,OAAA,CAAA,KAAA,EAAA,mBAAA,EAAA,CAAA,EAAA,WAAA,CAAA;AAHwE,SAAA;AAK1EC,QAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA,WAAA,EAAuD;AAC9D,UAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,WAAA,CAAA;;AACAlB,UAAAA,iBAAiB,CAACmB,mBAAlBnB,EAAiB,CAAjBA;AACD;AARyE,OAAnC;AAAzC,KAAA;;AAWA,QAAMoB,OAAO,GAAA,aACX,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAK,MAAA,QAAQ,EAAEhC;AAAf,KAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,WAAA,EACMa,YAAY,CAAA,MAAA,EAAA,MAAA,CAAA,MAAA,CAAA;AACdnB,MAAAA,SAAS,EAAEwB,OAAO,CAACe;AADL,KAAA,EADlB,cACkB,CAAA,CADlB,EAMG,UAAU,CAAV,MAAA,CAAA,EAAA,EAEC;AACEC,MAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,eACZrB,YAAY,CAAA,YAAA,EAAe;AACzBhC,UAAAA,IAAI,EADqB,IAAA;AAEzBsD,UAAAA,EAAE,EAFuB,EAAA;AAGzB7B,UAAAA,IAAI,EAHqB,IAAA;AAIzB8B,UAAAA,OAAO,EAAEC,eAAe,CAAA,MAAA,EAAA,MAAA,EAAiB;AACvCH,YAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,qBAAO;AACnBtC,gBAAAA,MAAM,EAAEuB,cAAc,CADH,UAAA;AAEnBrC,gBAAAA,OAAO,EAFY,OAAA;AAGnBC,gBAAAA,SAAS,EAHU,SAAA;AAInBH,gBAAAA,QAAQ,EAARA;AAJmB,eAAP;AADyB,aAAA;AAOvC0D,YAAAA,aAAa,EAAEV;AAPwB,WAAjB,CAJC;AAazBW,UAAAA,MAAM,EAAEvC,SAAS,CAbQ,OAAA;AAczBd,UAAAA,QAAQ,EAdiB,QAAA;AAezBC,UAAAA,KAAK,EAfoB,KAAA;AAgBzBC,UAAAA,YAAY,EAhBa,YAAA;AAiBzBC,UAAAA,gBAAgB,EAjBS,gBAAA;AAkBzBC,UAAAA,SAAS,EAlBgB,SAAA;AAmBzBC,UAAAA,aAAa,EAnBY,aAAA;AAoBzBC,UAAAA,MAAM,EApBmB,MAAA;AAqBzBC,UAAAA,eAAe,EAAfA;AArByB,SAAf,CADA;AADhB,OAAA;AAyBE6C,MAAAA,aAAa,EAAEf;AAzBjB,KAFD,CANH,EAqCG,iBAAiB,CAAjB,MAAA,CAAA,YAAA,EAAuC;AACtCW,MAAAA,YAAY,EAAE,SAAA,YAAA,GAAA;AAAA,eACZrB,YAAY,CAAA,cAAA,EAAiB;AAC3BjC,UAAAA,QAAQ,EADmB,QAAA;AAE3BE,UAAAA,OAAO,EAFoB,OAAA;AAG3BC,UAAAA,SAAS,EAHkB,SAAA;AAI3BE,UAAAA,IAAI,EAAJA;AAJ2B,SAAjB,CADA;AADwB,OAAA;AAQtCqD,MAAAA,aAAa,EAAE,SAAA,aAAA,CAAA,eAAA,EAAA;AAAA,eAAmC;AAChDT,UAAAA,OAAO,EAAE,SAAA,OAAA,CAAA,CAAA,EAAA,WAAA,EAAuD;AAC9D,YAAA,OAAA,CAAA,eAAA,EAAA,SAAA,EAAA,CAAA,EAAA,WAAA,CAAA;;AAEAtB,YAAAA,OAAO,CAAC,UAAA,MAAA,EAAU;AAChB,kBAAMD,IAAI,GAAG,CAAb,MAAA;;AACA,cAAA,OAAA,CAAA,KAAA,EAAA,cAAA,EAAA,CAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,EAAA;AAA+CA,gBAAAA,IAAI,EAAJA;AAA/C,eAAA,CAAA,CAAA;;AACA,qBAAA,IAAA;AAHFC,aAAO,CAAPA;AAKD;AAT+C,SAAnC;AAAA;AARuB,KAAvC,CArCH,CADF,CADF;AA+DA9B,IAAAA,MAAM;AACN,WAAA,OAAA;AA3JK,GAAA;;AA8JPJ,EAAAA,WAAW,CAAXA,WAAAA,GAAAA,aAAAA;AAEAA,EAAAA,WAAW,CAAXA,MAAAA,GAAAA,iBAAAA;AAEAA,EAAAA,WAAW,CAAXA,SAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EACK,eAAe,CAAf,YAAA,CAA6B;AAC9BmE,IAAAA,OAAO,EAAE;AADqB,GAA7B,CADLnE,EAAAA;AAIEM,IAAAA,MAAM,EAAE8D,eAAe,CAJzBpE,aAAAA;AAKEqE,IAAAA,WAAW,EAAEC,SAAS,CALxBtE,IAAAA;AAMEQ,IAAAA,IAAI,EAAE8D,SAAS,CAATA,SAAAA,CAAoB,CACxBF,eAAe,CADS,aAAA,EAExBE,SAAS,CAATA,OAAAA,CAAkBF,eAAe,CARrCpE,uBAQIsE,CAFwB,CAApBA,CANRtE;AAUEuE,IAAAA,iBAAiB,EAAED,SAAS,CAV9BtE,IAAAA;AAWEmD,IAAAA,eAAe,EAAEmB,SAAS,CAX5BtE,IAAAA;AAYEoD,IAAAA,YAAY,EAAEkB,SAAS,CAZzBtE,IAAAA;AAaEiC,IAAAA,IAAI,EAAEqC,SAAS,CAbjBtE,IAAAA;AAcEY,IAAAA,IAAI,EAAEwD,eAAe,CAdvBpE,IAAAA;AAeEiB,IAAAA,SAAS,EAAEmD,eAAe,CAf5BpE,GAAAA;AAgBES,IAAAA,OAAO,EAAE2D,eAAe,CAAfA,KAAAA,CAAsB,CAACA,eAAe,CAAfA,QAAAA,CAAyB,CAA1B,WAA0B,CAAzBA,CAAD,EAA0CE,SAAS,CAhBpFtE,IAgBiC,CAAtBoE,CAhBXpE;AAiBEU,IAAAA,SAAS,EAAE0D,eAAe,CAAfA,KAAAA,CAAsB,CAACA,eAAe,CAAfA,QAAAA,CAAyB,CAA1B,SAA0B,CAAzBA,CAAD,EAAwCE,SAAS,CAjBpFtE,IAiBmC,CAAtBoE,CAjBbpE;AAkBEW,IAAAA,YAAY,EAAEyD,eAAe,CAlB/BpE,aAAAA;AAmBEa,IAAAA,QAAQ,EAAEyD,SAAS,CAATA,KAAAA,CAnBZtE,SAmBYsE,CAnBZtE;AAoBEc,IAAAA,KAAK,EAAEwD,SAAS,CAATA,KAAAA,CApBTtE,UAoBSsE,CApBTtE;AAqBEe,IAAAA,YAAY,EAAEuD,SAAS,CAATA,SAAAA,CAAoB,CAChCA,SAAS,CADuB,MAAA,EAEhCA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAFK,MAEhCA,CAFgC,EAGhCA,SAAS,CAATA,KAAAA,CAA+D,CAAA,iBAAA,EAAA,QAAA,EAxBnEtE,cAwBmE,CAA/DsE,CAHgC,CAApBA,CArBhBtE;AA0BEgB,IAAAA,gBAAgB,EAAEsD,SAAS,CAATA,SAAAA,CAAoB,CACpCA,SAAS,CAD2B,MAAA,EAEpCA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAFS,MAEpCA,CAFoC,EAGpCA,SAAS,CAATA,KAAAA,CAA+D,CAAA,iBAAA,EAAA,QAAA,EA7BnEtE,cA6BmE,CAA/DsE,CAHoC,CAApBA,CA1BpBtE;AA+BEkB,IAAAA,aAAa,EAAEoD,SAAS,CA/B1BtE,IAAAA;AAgCEmB,IAAAA,MAAM,EAAEmD,SAAS,CAATA,SAAAA,CAAoB,CAC1BA,SAAS,CADiB,IAAA,EAE1BA,SAAS,CAATA,OAAAA,CAAkBA,SAAS,CAlC/BtE,MAkCIsE,CAF0B,CAApBA,CAhCVtE;AAoCEoB,IAAAA,eAAe,EAAEkD,SAAS,CAACE;AApC7BxE,GAAAA,CAAAA;AAuCAA,EAAAA,WAAW,CAAXA,YAAAA,GAA2B;AACzBwB,IAAAA,aAAa,EADY,mBAAA;AAEzBb,IAAAA,YAAY,EAFa,EAAA;AAGzBE,IAAAA,QAAQ,EAHiB,OAAA;AAIzBC,IAAAA,KAAK,EAAE;AAJkB,GAA3Bd;AAOAA,EAAAA,WAAW,CAAXA,YAAAA,GAA2ByE,MAAM,CAANA,IAAAA,CAAYzE,WAAW,CAAlDA,SAA2ByE,CAA3BzE;AAEAA,EAAAA,WAAW,CAAXA,MAAAA,GAAqB0E,sBAAsB,CAAC;AAC1CC,IAAAA,SAAS,EAAE3E;AAD+B,GAAD,CAA3CA;AAlNO,SAAA,WAAA;AAAA,CAAA,EAAA","sourcesContent":["import { Accessibility, splitButtonBehavior, SplitButtonBehaviorProps } from '@fluentui/accessibility';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ALIGNMENTS, POSITIONS } from '../../utils/positioner';\nimport { ComponentEventHandler, ShorthandValue, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport {\n  UIComponentProps,\n  ChildrenComponentProps,\n  ContentComponentProps,\n  isFromKeyboard as checkIsFromKeyboard,\n  commonPropTypes,\n  SizeValue,\n  createShorthand,\n  createShorthandFactory,\n} from '../../utils';\nimport { SplitButtonToggle, SplitButtonToggleProps } from './SplitButtonToggle';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { MenuButton, MenuButtonProps } from '../MenuButton/MenuButton';\nimport { MenuProps } from '../Menu/Menu';\nimport { MenuItemProps } from '../Menu/MenuItem';\nimport { PopupProps } from '../Popup/Popup';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { PositioningProps } from '../../utils/positioner/types';\n\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  useAutoControlled,\n  useAccessibility,\n  getElementType,\n  useFluentContext,\n  useUnhandledProps,\n  useStyles,\n} from '@fluentui/react-bindings';\n\nexport interface SplitButtonProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps,\n    PositioningProps {\n  /**\n   * Accessibility behavior if overridden by the user.\n   */\n  accessibility?: Accessibility<SplitButtonBehaviorProps>;\n\n  /** Shorthand for the main button. */\n  button?: ShorthandValue<ButtonProps>;\n\n  /** Initial value for 'open'. */\n  defaultOpen?: boolean;\n\n  /** A split button can be disabled. */\n  disabled?: boolean;\n\n  /** Shorthand for the menu. */\n  menu?: ShorthandValue<MenuProps> | ShorthandCollection<MenuItemProps>;\n\n  /**\n   * Called after user's click on the main button.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMainButtonClick?: ComponentEventHandler<ButtonProps>;\n\n  /**\n   * Called after user's click on a menu item.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props.\n   */\n  onMenuItemClick?: ComponentEventHandler<MenuItemProps>;\n\n  /**\n   * Event for request to change 'open' value.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onOpenChange?: ComponentEventHandler<SplitButtonProps>;\n\n  /** Defines whether menu is displayed. */\n  open?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  primary?: boolean;\n\n  /** A split button can be formatted to show different levels of emphasis. */\n  secondary?: boolean;\n\n  /** A split button can be sized */\n  size?: SizeValue;\n\n  /** Shorthand for the toggle button. */\n  toggleButton?: ShorthandValue<SplitButtonToggleProps>;\n}\n\nexport const splitButtonClassName = 'ui-splitbutton';\n\nexport type SplitButtonStylesProps = Required<Pick<SplitButtonProps, 'size'>> & { isFromKeyboard: boolean };\n\n/**\n * A SplitButton enables users to take one of several related actions, one being dominant and rest being displayed in a menu.\n */\nexport const SplitButton: ComponentWithAs<'div', SplitButtonProps> &\n  FluentComponentStaticProps<SplitButtonProps> & {\n    Toggle: typeof SplitButtonToggle;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(SplitButton.displayName, context.telemetry);\n  setStart();\n\n  const {\n    button,\n    disabled,\n    menu,\n    primary,\n    secondary,\n    toggleButton,\n    size,\n    position,\n    align,\n    flipBoundary,\n    overflowBoundary,\n    popperRef,\n    positionFixed,\n    offset,\n    unstable_pinned,\n    className,\n    design,\n    styles,\n    accessibility,\n    variables,\n  } = props;\n\n  const targetRef = React.useRef<HTMLDivElement>();\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(SplitButton.handledProps, props);\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    value: props.open,\n    initialValue: false,\n  });\n\n  const [isFromKeyboard, setIsFromKeyboard] = React.useState<boolean>(false);\n\n  const getA11yProps = useAccessibility<SplitButtonBehaviorProps>(accessibility, {\n    debugName: SplitButton.displayName,\n    mapPropsToBehavior: () => ({\n      open,\n    }),\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<SplitButtonStylesProps>(SplitButton.displayName, {\n    className: splitButtonClassName,\n    mapPropsToStyles: () => ({\n      isFromKeyboard,\n      size,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleMenuButtonOverrides = (predefinedProps: MenuButtonProps) => ({\n    onMenuItemClick: (e: React.SyntheticEvent, menuItemProps: MenuItemProps) => {\n      setOpen(false);\n      _.invoke(props, 'onOpenChange', e, { ...props, open: false });\n\n      _.invoke(predefinedProps, 'onMenuItemClick', e, menuItemProps);\n      _.invoke(props, 'onMenuItemClick', e, menuItemProps);\n    },\n    onOpenChange: (e: React.SyntheticEvent, popupProps: PopupProps) => {\n      e.stopPropagation();\n      setOpen(popupProps.open);\n      _.invoke(props, 'onOpenChange', e, { ...props, open: popupProps.open });\n    },\n  });\n\n  const handleMenuButtonTriggerOverrides = (predefinedProps: ButtonProps) => ({\n    onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onClick', e, buttonProps);\n      _.invoke(props, 'onMainButtonClick', e, buttonProps);\n    },\n    onFocus: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n      _.invoke(predefinedProps, 'onFocus', e, buttonProps);\n      setIsFromKeyboard(checkIsFromKeyboard());\n    },\n  });\n\n  const element = (\n    <Ref innerRef={targetRef}>\n      <ElementType\n        {...getA11yProps('root', {\n          className: classes.root,\n          ...unhandledProps,\n        })}\n      >\n        {MenuButton.create(\n          {},\n          {\n            defaultProps: () =>\n              getA11yProps('menuButton', {\n                menu,\n                on: [],\n                open,\n                trigger: createShorthand(Button, button, {\n                  defaultProps: () => ({\n                    styles: resolvedStyles.menuButton,\n                    primary,\n                    secondary,\n                    disabled,\n                  }),\n                  overrideProps: handleMenuButtonTriggerOverrides,\n                }),\n                target: targetRef.current,\n                position,\n                align,\n                flipBoundary,\n                overflowBoundary,\n                popperRef,\n                positionFixed,\n                offset,\n                unstable_pinned,\n              }),\n            overrideProps: handleMenuButtonOverrides,\n          },\n        )}\n\n        {SplitButtonToggle.create(toggleButton, {\n          defaultProps: () =>\n            getA11yProps('toggleButton', {\n              disabled,\n              primary,\n              secondary,\n              size,\n            }),\n          overrideProps: (predefinedProps: ButtonProps) => ({\n            onClick: (e: React.SyntheticEvent, buttonProps: ButtonProps) => {\n              _.invoke(predefinedProps, 'onClick', e, buttonProps);\n\n              setOpen(isOpen => {\n                const open = !isOpen;\n                _.invoke(props, 'onOpenChange', e, { ...props, open });\n                return open;\n              });\n            },\n          }),\n        })}\n      </ElementType>\n    </Ref>\n  );\n\n  setEnd();\n  return element;\n};\n\nSplitButton.displayName = 'SplitButton';\n\nSplitButton.Toggle = SplitButtonToggle;\n\nSplitButton.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  button: customPropTypes.itemShorthand,\n  defaultOpen: PropTypes.bool,\n  menu: PropTypes.oneOfType([\n    customPropTypes.itemShorthand,\n    PropTypes.arrayOf(customPropTypes.itemShorthandWithoutJSX),\n  ]),\n  onMainButtonClick: PropTypes.func,\n  onMenuItemClick: PropTypes.func,\n  onOpenChange: PropTypes.func,\n  open: PropTypes.bool,\n  size: customPropTypes.size,\n  popperRef: customPropTypes.ref,\n  primary: customPropTypes.every([customPropTypes.disallow(['secondary']), PropTypes.bool]),\n  secondary: customPropTypes.every([customPropTypes.disallow(['primary']), PropTypes.bool]),\n  toggleButton: customPropTypes.itemShorthand,\n  position: PropTypes.oneOf(POSITIONS),\n  align: PropTypes.oneOf(ALIGNMENTS),\n  flipBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  overflowBoundary: PropTypes.oneOfType([\n    PropTypes.object as PropTypes.Requireable<HTMLElement>,\n    PropTypes.arrayOf(PropTypes.object) as PropTypes.Requireable<HTMLElement[]>,\n    PropTypes.oneOf<'clippingParents' | 'window' | 'scrollParent'>(['clippingParents', 'window', 'scrollParent']),\n  ]),\n  positionFixed: PropTypes.bool,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  unstable_pinned: PropTypes.bool,\n};\n\nSplitButton.defaultProps = {\n  accessibility: splitButtonBehavior,\n  toggleButton: {},\n  position: 'below',\n  align: 'start',\n};\n\nSplitButton.handledProps = Object.keys(SplitButton.propTypes) as any;\n\nSplitButton.create = createShorthandFactory({\n  Component: SplitButton,\n});\n"]},"metadata":{},"sourceType":"module"}