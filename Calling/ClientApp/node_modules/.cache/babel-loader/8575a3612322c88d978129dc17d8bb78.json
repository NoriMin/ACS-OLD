{"ast":null,"code":"import{connect}from'react-redux';import GroupCall from'../components/GroupCall';import{joinGroup as _joinGroup,setMicrophone}from'../core/sideEffects';import{setLocalVideoStream as _setLocalVideoStream}from'../core/actions/streams';import{setVideoDeviceInfo as _setVideoDeviceInfo,setAudioDeviceInfo as _setAudioDeviceInfo}from'../core/actions/devices';var mapStateToProps=function mapStateToProps(state,props){return{userId:state.sdk.userId||props.userId,callAgent:state.calls.callAgent,group:state.calls.group,screenWidth:props.screenWidth,call:state.calls.call,shareScreen:state.controls.shareScreen,mic:state.controls.mic,groupCallEndReason:state.calls.groupCallEndReason,isGroup:function isGroup(){return state.calls.call&&!state.calls.call.isIncoming&&!!state.calls.group;},joinGroup:function joinGroup(){state.calls.callAgent&&_joinGroup(state.calls.callAgent,{groupId:state.calls.group},{audioOptions:{muted:!state.controls.mic}});},remoteParticipants:state.calls.remoteParticipants,streams:state.streams.streams,callState:state.calls.callState,localVideo:state.controls.localVideo,localVideoStream:state.streams.localVideoStream,screenShareStreams:state.streams.screenShareStreams,videoDeviceInfo:state.devices.videoDeviceInfo,audioDeviceInfo:state.devices.audioDeviceInfo,videoDeviceList:state.devices.videoDeviceList,audioDeviceList:state.devices.audioDeviceList,cameraPermission:state.devices.cameraPermission,microphonePermission:state.devices.microphonePermission};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{mute:function mute(){return dispatch(setMicrophone(false));},setAudioDeviceInfo:function setAudioDeviceInfo(deviceInfo){return dispatch(_setAudioDeviceInfo(deviceInfo));},setVideoDeviceInfo:function setVideoDeviceInfo(deviceInfo){dispatch(_setVideoDeviceInfo(deviceInfo));},setLocalVideoStream:function setLocalVideoStream(localVideoStream){return dispatch(_setLocalVideoStream(localVideoStream));}};};var connector=connect(mapStateToProps,mapDispatchToProps);export default connector(GroupCall);","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/containers/GroupCall.ts"],"names":["connect","GroupCall","joinGroup","setMicrophone","setLocalVideoStream","setVideoDeviceInfo","setAudioDeviceInfo","mapStateToProps","state","props","userId","sdk","callAgent","calls","group","screenWidth","call","shareScreen","controls","mic","groupCallEndReason","isGroup","isIncoming","groupId","audioOptions","muted","remoteParticipants","streams","callState","localVideo","localVideoStream","screenShareStreams","videoDeviceInfo","devices","audioDeviceInfo","videoDeviceList","audioDeviceList","cameraPermission","microphonePermission","mapDispatchToProps","dispatch","mute","deviceInfo","connector"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\r\nimport GroupCall, { GroupCallProps } from '../components/GroupCall';\r\nimport { joinGroup, setMicrophone } from '../core/sideEffects';\r\nimport { setLocalVideoStream } from '../core/actions/streams';\r\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\r\nimport { AudioDeviceInfo, VideoDeviceInfo, LocalVideoStream } from '@azure/communication-calling';\r\nimport { State } from '../core/reducers';\r\n\r\nconst mapStateToProps = (state: State, props: GroupCallProps) => ({\r\n  userId: state.sdk.userId || props.userId,\r\n  callAgent: state.calls.callAgent,\r\n  group: state.calls.group,\r\n  screenWidth: props.screenWidth,\r\n  call: state.calls.call,\r\n  shareScreen: state.controls.shareScreen,\r\n  mic: state.controls.mic,\r\n  groupCallEndReason: state.calls.groupCallEndReason,\r\n  isGroup: () => state.calls.call && !state.calls.call.isIncoming && !!state.calls.group,\r\n  joinGroup: () => {\r\n    state.calls.callAgent &&\r\n      joinGroup(\r\n        state.calls.callAgent,\r\n        {\r\n          groupId: state.calls.group\r\n        },\r\n        {\r\n          audioOptions: { muted: !state.controls.mic }\r\n        }\r\n      );\r\n  },\r\n  remoteParticipants: state.calls.remoteParticipants,\r\n  streams: state.streams.streams,\r\n  callState: state.calls.callState,\r\n  localVideo: state.controls.localVideo,\r\n  localVideoStream: state.streams.localVideoStream,\r\n  screenShareStreams: state.streams.screenShareStreams,\r\n  videoDeviceInfo: state.devices.videoDeviceInfo,\r\n  audioDeviceInfo: state.devices.audioDeviceInfo,\r\n  videoDeviceList: state.devices.videoDeviceList,\r\n  audioDeviceList: state.devices.audioDeviceList,\r\n  cameraPermission: state.devices.cameraPermission,\r\n  microphonePermission: state.devices.microphonePermission\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  mute: () => dispatch(setMicrophone(false)),\r\n  setAudioDeviceInfo: (deviceInfo: AudioDeviceInfo) => dispatch(setAudioDeviceInfo(deviceInfo)),\r\n  setVideoDeviceInfo: (deviceInfo: VideoDeviceInfo) => {\r\n    dispatch(setVideoDeviceInfo(deviceInfo));\r\n  },\r\n  setLocalVideoStream: (localVideoStream: LocalVideoStream) => dispatch(setLocalVideoStream(localVideoStream))\r\n});\r\n\r\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\r\nexport default connector(GroupCall);\r\n"]},"metadata":{},"sourceType":"module"}