{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { URLBuilder } from \"@azure/core-http\";\nimport { parseConnectionString } from \"./connectionString\";\n\nvar isValidEndpoint = function isValidEndpoint(host) {\n  var _a;\n\n  var url = URLBuilder.parse(host);\n  return !!((_a = url.getScheme()) === null || _a === void 0 ? void 0 : _a.match(/^http[s]?/)) && url.getHost() !== undefined && url.getHost() !== \"\" && (url.getPath() === undefined || url.getPath() === \"\" || url.getPath() === \"/\");\n};\n\nvar assertValidEndpoint = function assertValidEndpoint(host) {\n  if (!isValidEndpoint(host)) {\n    throw new Error(\"Invalid endpoint url \".concat(host));\n  }\n};\n/**\n * Checks whether a value is a KeyCredential.\n *\n * @param {*} credential The credential being checked.\n */\n\n\nexport var isKeyCredential = function isKeyCredential(credential) {\n  return credential && typeof credential.key === \"string\" && credential.getToken === undefined;\n};\n/**\n * Parses arguments passed to a communication client.\n *\n * @param {string} connectionStringOrUrl\n * @param {*} [credentialOrOptions]\n */\n\nexport var parseClientArguments = function parseClientArguments(connectionStringOrUrl, credentialOrOptions) {\n  if (isKeyCredential(credentialOrOptions)) {\n    assertValidEndpoint(connectionStringOrUrl);\n    return {\n      url: connectionStringOrUrl,\n      credential: credentialOrOptions\n    };\n  } else {\n    var _parseConnectionStrin = parseConnectionString(connectionStringOrUrl),\n        host = _parseConnectionStrin.endpoint,\n        credential = _parseConnectionStrin.credential;\n\n    assertValidEndpoint(host);\n    return {\n      url: host,\n      credential: credential\n    };\n  }\n};","map":{"version":3,"sources":["../../../src/credential/clientArguments.ts"],"names":[],"mappings":"AAAA;AACA;AAGA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,qBAAT,QAAsC,oBAAtC;;AAEA,IAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,IAAD,EAA0B;;;AAChD,MAAM,GAAG,GAAG,UAAU,CAAC,KAAX,CAAiB,IAAjB,CAAZ;AAEA,SACE,CAAC,EAAA,CAAA,EAAA,GAAC,GAAG,CAAC,SAAJ,EAAD,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,KAAF,CAAQ,WAAR,CAAhB,CAAD,IACA,GAAG,CAAC,OAAJ,OAAkB,SADlB,IAEA,GAAG,CAAC,OAAJ,OAAkB,EAFlB,KAGC,GAAG,CAAC,OAAJ,OAAkB,SAAlB,IAA+B,GAAG,CAAC,OAAJ,OAAkB,EAAjD,IAAuD,GAAG,CAAC,OAAJ,OAAkB,GAH1E,CADF;AAMD,CATD;;AAWA,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,IAAD,EAAuB;AACjD,MAAI,CAAC,eAAe,CAAC,IAAD,CAApB,EAA4B;AAC1B,UAAM,IAAI,KAAJ,gCAAkC,IAAlC,EAAN;AACD;AACF,CAJD;AAMA;;;;;;;AAKA,OAAO,IAAM,eAAe,GAAG,SAAlB,eAAkB,CAAC,UAAD,EAAiD;AAC9E,SAAO,UAAU,IAAI,OAAO,UAAU,CAAC,GAAlB,KAA0B,QAAxC,IAAoD,UAAU,CAAC,QAAX,KAAwB,SAAnF;AACD,CAFM;AAYP;;;;;;;AAMA,OAAO,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CAClC,qBADkC,EAElC,mBAFkC,EAGb;AACrB,MAAI,eAAe,CAAC,mBAAD,CAAnB,EAA0C;AACxC,IAAA,mBAAmB,CAAC,qBAAD,CAAnB;AACA,WAAO;AAAE,MAAA,GAAG,EAAE,qBAAP;AAA8B,MAAA,UAAU,EAAE;AAA1C,KAAP;AACD,GAHD,MAGO;AAAA,gCACkC,qBAAqB,CAAC,qBAAD,CADvD;AAAA,QACa,IADb,yBACG,QADH;AAAA,QACmB,UADnB,yBACmB,UADnB;;AAEL,IAAA,mBAAmB,CAAC,IAAD,CAAnB;AACA,WAAO;AAAE,MAAA,GAAG,EAAE,IAAP;AAAa,MAAA,UAAU,EAAV;AAAb,KAAP;AACD;AACF,CAZM","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport { URLBuilder } from \"@azure/core-http\";\nimport { parseConnectionString } from \"./connectionString\";\n\nconst isValidEndpoint = (host: string): boolean => {\n  const url = URLBuilder.parse(host);\n\n  return (\n    !!url.getScheme()?.match(/^http[s]?/) &&\n    url.getHost() !== undefined &&\n    url.getHost() !== \"\" &&\n    (url.getPath() === undefined || url.getPath() === \"\" || url.getPath() === \"/\")\n  );\n};\n\nconst assertValidEndpoint = (host: string): void => {\n  if (!isValidEndpoint(host)) {\n    throw new Error(`Invalid endpoint url ${host}`);\n  }\n};\n\n/**\n * Checks whether a value is a KeyCredential.\n *\n * @param {*} credential The credential being checked.\n */\nexport const isKeyCredential = (credential: any): credential is KeyCredential => {\n  return credential && typeof credential.key === \"string\" && credential.getToken === undefined;\n};\n\n/**\n * The URL and credential from parsing the arguments of a communication client.\n */\nexport type UrlWithCredential = {\n  url: string;\n  credential: KeyCredential;\n};\n\n/**\n * Parses arguments passed to a communication client.\n *\n * @param {string} connectionStringOrUrl\n * @param {*} [credentialOrOptions]\n */\nexport const parseClientArguments = (\n  connectionStringOrUrl: string,\n  credentialOrOptions?: any\n): UrlWithCredential => {\n  if (isKeyCredential(credentialOrOptions)) {\n    assertValidEndpoint(connectionStringOrUrl);\n    return { url: connectionStringOrUrl, credential: credentialOrOptions };\n  } else {\n    const { endpoint: host, credential } = parseConnectionString(connectionStringOrUrl);\n    assertValidEndpoint(host);\n    return { url: host, credential };\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}