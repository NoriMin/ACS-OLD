{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { tableCellBehavior } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { childrenExist, commonPropTypes, createShorthandFactory } from '../../utils';\nimport { useTelemetry, useStyles, useFluentContext, getElementType, useUnhandledProps, useAccessibility } from '@fluentui/react-bindings';\nimport { Box } from '../Box/Box';\nexport var tableCellClassName = 'ui-table__cell';\nexport var tableCellSlotClassNames = {\n  content: tableCellClassName + \"__content\"\n};\n/**\n * Component represents a table cell.\n */\n\nexport var TableCell = /*#__PURE__*/function () {\n  var TableCell = function TableCell(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(TableCell.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var cellRef = React.useRef();\n    var children = props.children,\n        content = props.content,\n        truncateContent = props.truncateContent,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var hasChildren = childrenExist(children);\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(TableCell.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: TableCell.displayName,\n      actionHandlers: {\n        focusCell: function focusCell(e) {\n          e.preventDefault();\n          cellRef.current.focus();\n        },\n        performClick: function performClick(e) {\n          handleClick(e);\n        }\n      },\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(TableCell.displayName, {\n      className: tableCellClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          truncateContent: truncateContent\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var handleClick = function handleClick(e) {\n      if (e.currentTarget === e.target) {\n        _invoke(props, 'onClick', e, props);\n\n        e.preventDefault();\n      }\n    };\n\n    var element = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: cellRef\n    }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root,\n      onClick: handleClick\n    }, unhandledProps)), hasChildren ? children : Box.create(content, {\n      defaultProps: function defaultProps() {\n        return {\n          className: tableCellSlotClassNames.content,\n          styles: resolvedStyles.content\n        };\n      }\n    }))));\n    setEnd();\n    return element;\n  };\n\n  TableCell.displayName = 'TableCell';\n  TableCell.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    content: false\n  }), {\n    content: customPropTypes.every([customPropTypes.disallow(['children']), PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent])]),\n    truncateContent: PropTypes.bool\n  });\n  TableCell.handledProps = Object.keys(TableCell.propTypes);\n  TableCell.defaultProps = {\n    accessibility: tableCellBehavior\n  };\n  TableCell.create = createShorthandFactory({\n    Component: TableCell,\n    mappedProp: 'content'\n  });\n  return TableCell;\n}();","map":{"version":3,"sources":["components/Table/TableCell.tsx"],"names":["tableCellClassName","tableCellSlotClassNames","content","TableCell","context","useFluentContext","setStart","setEnd","useTelemetry","cellRef","React","children","truncateContent","className","design","styles","variables","props","hasChildren","childrenExist","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","focusCell","e","performClick","handleClick","rtl","classes","resolvedStyles","useStyles","mapPropsToStyles","mapPropsToInlineStyles","element","onClick","defaultProps","customPropTypes","PropTypes","bool","Object","accessibility","tableCellBehavior","createShorthandFactory","Component","mappedProp"],"mappings":"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","sourcesContent":["import * as customPropTypes from '@fluentui/react-proptypes';\nimport { Accessibility, tableCellBehavior, TableCellBehaviorProps } from '@fluentui/accessibility';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  childrenExist,\n  ChildrenComponentProps,\n  commonPropTypes,\n  ContentComponentProps,\n  createShorthandFactory,\n  UIComponentProps,\n} from '../../utils';\nimport {\n  ComponentWithAs,\n  useTelemetry,\n  useStyles,\n  useFluentContext,\n  getElementType,\n  useUnhandledProps,\n  useAccessibility,\n} from '@fluentui/react-bindings';\n\nimport { Box, BoxProps } from '../Box/Box';\nimport { ShorthandValue, FluentComponentStaticProps } from '../../types';\n\nexport interface TableCellProps\n  extends UIComponentProps,\n    ChildrenComponentProps,\n    ContentComponentProps<ShorthandValue<BoxProps>> {\n  /**\n   * Accessibility behavior if overridden by the user.\n   * @available TableCellBehavior\n   * */\n  accessibility?: Accessibility<TableCellBehaviorProps>;\n\n  /**\n   * Truncate cell's content\n   */\n  truncateContent?: boolean;\n}\n\nexport type TableCellStylesProps = Pick<TableCellProps, 'truncateContent'>;\n\nexport interface TableCellSlotClassNames {\n  content: string;\n}\n\nexport const tableCellClassName = 'ui-table__cell';\nexport const tableCellSlotClassNames: TableCellSlotClassNames = {\n  content: `${tableCellClassName}__content`,\n};\n\n/**\n * Component represents a table cell.\n */\nexport const TableCell: ComponentWithAs<'div', TableCellProps> & FluentComponentStaticProps<TableCellProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(TableCell.displayName, context.telemetry);\n  setStart();\n  const cellRef = React.useRef<HTMLElement>();\n\n  const { children, content, truncateContent, className, design, styles, variables } = props;\n  const hasChildren = childrenExist(children);\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(TableCell.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: TableCell.displayName,\n    actionHandlers: {\n      focusCell: e => {\n        e.preventDefault();\n        cellRef.current.focus();\n      },\n      performClick: e => {\n        handleClick(e);\n      },\n    },\n    rtl: context.rtl,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<TableCellStylesProps>(TableCell.displayName, {\n    className: tableCellClassName,\n    mapPropsToStyles: () => ({\n      truncateContent,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const handleClick = (e: React.MouseEvent | React.KeyboardEvent) => {\n    if (e.currentTarget === e.target) {\n      _.invoke(props, 'onClick', e, props);\n      e.preventDefault();\n    }\n  };\n\n  const element = (\n    <Ref innerRef={cellRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            onClick: handleClick,\n            ...unhandledProps,\n          })}\n        >\n          {hasChildren\n            ? children\n            : Box.create(content, {\n                defaultProps: () => ({ className: tableCellSlotClassNames.content, styles: resolvedStyles.content }),\n              })}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nTableCell.displayName = 'TableCell';\n\nTableCell.propTypes = {\n  ...commonPropTypes.createCommon({\n    content: false,\n  }),\n  content: customPropTypes.every([\n    customPropTypes.disallow(['children']),\n    PropTypes.oneOfType([PropTypes.arrayOf(customPropTypes.nodeContent), customPropTypes.nodeContent]),\n  ]),\n  truncateContent: PropTypes.bool,\n};\n\nTableCell.handledProps = Object.keys(TableCell.propTypes) as any;\n\nTableCell.defaultProps = {\n  accessibility: tableCellBehavior,\n};\n\nTableCell.create = createShorthandFactory({ Component: TableCell, mappedProp: 'content' });\n"]},"metadata":{},"sourceType":"module"}