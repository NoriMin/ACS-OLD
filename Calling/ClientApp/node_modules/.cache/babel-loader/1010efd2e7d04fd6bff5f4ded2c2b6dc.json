{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\Configuration.tsx\";\n// © Microsoft Corporation. All rights reserved.\nimport React, { useEffect, useState } from 'react';\nimport { Stack, Spinner, PrimaryButton } from '@fluentui/react';\nimport LocalPreview from './LocalPreview';\nimport LocalSettings from './LocalSettings';\nimport DisplayNameField from './DisplayNameField';\nimport { VideoCameraEmphasisIcon } from '@fluentui/react-icons-northstar';\nimport { videoCameraIconStyle, configurationStackTokens, buttonStyle, localSettingsContainerStyle, mainContainerStyle, fullScreenStyle, verticalStackStyle } from './styles/Configuration.styles';\nexport default (props => {\n  const spinnerLabel = 'Initializing call client...';\n  const buttonText = 'Start call';\n  const [name, setName] = useState(props.userId);\n  const [emptyWarning, setEmptyWarning] = useState(false);\n  const {\n    userId,\n    groupId,\n    setUserId,\n    initCallClient,\n    setGroup,\n    unsupportedStateHandler,\n    endCallHandler\n  } = props;\n  useEffect(() => {\n    setUserId(userId);\n    initCallClient(userId, unsupportedStateHandler, endCallHandler);\n    setGroup(groupId);\n  }, [userId, groupId, setUserId, initCallClient, setGroup, unsupportedStateHandler, endCallHandler]);\n  return /*#__PURE__*/React.createElement(Stack, {\n    className: mainContainerStyle,\n    horizontalAlign: \"center\",\n    verticalAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, props.deviceManager ? /*#__PURE__*/React.createElement(Stack, {\n    className: props.screenWidth > 750 ? fullScreenStyle : verticalStackStyle,\n    horizontal: props.screenWidth > 750,\n    horizontalAlign: \"center\",\n    verticalAlign: \"center\",\n    tokens: props.screenWidth > 750 ? configurationStackTokens : undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(LocalPreview, {\n    setMic: props.setMic,\n    setLocalVideoStream: props.setLocalVideoStream,\n    videoDeviceInfo: props.videoDeviceInfo,\n    audioDeviceInfo: props.audioDeviceInfo,\n    localVideoStream: props.localVideoStream,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Stack, {\n    className: localSettingsContainerStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(DisplayNameField, {\n    setName: setName,\n    name: name,\n    setEmptyWarning: setEmptyWarning,\n    isEmpty: emptyWarning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LocalSettings, {\n    videoDeviceList: props.videoDeviceList,\n    audioDeviceList: props.audioDeviceList,\n    audioDeviceInfo: props.audioDeviceInfo,\n    videoDeviceInfo: props.videoDeviceInfo,\n    setVideoDeviceInfo: props.setVideoDeviceInfo,\n    setAudioDeviceInfo: props.setAudioDeviceInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(PrimaryButton, {\n    className: buttonStyle,\n    onClick: () => {\n      if (!name) {\n        setEmptyWarning(true);\n      } else {\n        setEmptyWarning(false);\n        props.setUserId(name);\n        props.callAgent.updateDisplayName(name);\n        props.startCallHandler();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(VideoCameraEmphasisIcon, {\n    className: videoCameraIconStyle,\n    size: \"medium\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }), buttonText)))) : /*#__PURE__*/React.createElement(Spinner, {\n    label: spinnerLabel,\n    ariaLive: \"assertive\",\n    labelPosition: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }));\n});","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/components/Configuration.tsx"],"names":["React","useEffect","useState","Stack","Spinner","PrimaryButton","LocalPreview","LocalSettings","DisplayNameField","VideoCameraEmphasisIcon","videoCameraIconStyle","configurationStackTokens","buttonStyle","localSettingsContainerStyle","mainContainerStyle","fullScreenStyle","verticalStackStyle","props","spinnerLabel","buttonText","name","setName","userId","emptyWarning","setEmptyWarning","groupId","setUserId","initCallClient","setGroup","unsupportedStateHandler","endCallHandler","deviceManager","screenWidth","undefined","setMic","setLocalVideoStream","videoDeviceInfo","audioDeviceInfo","localVideoStream","videoDeviceList","audioDeviceList","setVideoDeviceInfo","setAudioDeviceInfo","callAgent","updateDisplayName","startCallHandler"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,OAAhB,EAAyBC,aAAzB,QAA8C,iBAA9C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAQA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SACEC,oBADF,EAEEC,wBAFF,EAGEC,WAHF,EAIEC,2BAJF,EAKEC,kBALF,EAMEC,eANF,EAOEC,kBAPF,QAQO,+BARP;AAkCA,gBAAgBC,KAAD,IAAkD;AAC/D,QAAMC,YAAY,GAAG,6BAArB;AACA,QAAMC,UAAU,GAAG,YAAnB;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAACe,KAAK,CAACK,MAAP,CAAhC;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCtB,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAM;AAAEoB,IAAAA,MAAF;AAAUG,IAAAA,OAAV;AAAmBC,IAAAA,SAAnB;AAA8BC,IAAAA,cAA9B;AAA8CC,IAAAA,QAA9C;AAAwDC,IAAAA,uBAAxD;AAAiFC,IAAAA;AAAjF,MAAoGb,KAA1G;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACdyB,IAAAA,SAAS,CAACJ,MAAD,CAAT;AACAK,IAAAA,cAAc,CAACL,MAAD,EAASO,uBAAT,EAAkCC,cAAlC,CAAd;AACAF,IAAAA,QAAQ,CAACH,OAAD,CAAR;AACD,GAJQ,EAIN,CAACH,MAAD,EAASG,OAAT,EAAkBC,SAAlB,EAA6BC,cAA7B,EAA6CC,QAA7C,EAAuDC,uBAAvD,EAAgFC,cAAhF,CAJM,CAAT;AAMA,sBACE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEhB,kBAAlB;AAAsC,IAAA,eAAe,EAAC,QAAtD;AAA+D,IAAA,aAAa,EAAC,QAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGG,KAAK,CAACc,aAAN,gBACC,oBAAC,KAAD;AACE,IAAA,SAAS,EAAEd,KAAK,CAACe,WAAN,GAAoB,GAApB,GAA0BjB,eAA1B,GAA4CC,kBADzD;AAEE,IAAA,UAAU,EAAEC,KAAK,CAACe,WAAN,GAAoB,GAFlC;AAGE,IAAA,eAAe,EAAC,QAHlB;AAIE,IAAA,aAAa,EAAC,QAJhB;AAKE,IAAA,MAAM,EAAEf,KAAK,CAACe,WAAN,GAAoB,GAApB,GAA0BrB,wBAA1B,GAAqDsB,SAL/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOE,oBAAC,YAAD;AACE,IAAA,MAAM,EAAEhB,KAAK,CAACiB,MADhB;AAEE,IAAA,mBAAmB,EAAEjB,KAAK,CAACkB,mBAF7B;AAGE,IAAA,eAAe,EAAElB,KAAK,CAACmB,eAHzB;AAIE,IAAA,eAAe,EAAEnB,KAAK,CAACoB,eAJzB;AAKE,IAAA,gBAAgB,EAAEpB,KAAK,CAACqB,gBAL1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,eAcE,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEzB,2BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,gBAAD;AAAkB,IAAA,OAAO,EAAEQ,OAA3B;AAAoC,IAAA,IAAI,EAAED,IAA1C;AAAgD,IAAA,eAAe,EAAEI,eAAjE;AAAkF,IAAA,OAAO,EAAED,YAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,eAAe,EAAEN,KAAK,CAACsB,eADzB;AAEE,IAAA,eAAe,EAAEtB,KAAK,CAACuB,eAFzB;AAGE,IAAA,eAAe,EAAEvB,KAAK,CAACoB,eAHzB;AAIE,IAAA,eAAe,EAAEpB,KAAK,CAACmB,eAJzB;AAKE,IAAA,kBAAkB,EAAEnB,KAAK,CAACwB,kBAL5B;AAME,IAAA,kBAAkB,EAAExB,KAAK,CAACyB,kBAN5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,eAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AACE,IAAA,SAAS,EAAE9B,WADb;AAEE,IAAA,OAAO,EAAE,MAAM;AACb,UAAI,CAACQ,IAAL,EAAW;AACTI,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD,OAFD,MAEO;AACLA,QAAAA,eAAe,CAAC,KAAD,CAAf;AACAP,QAAAA,KAAK,CAACS,SAAN,CAAgBN,IAAhB;AACAH,QAAAA,KAAK,CAAC0B,SAAN,CAAgBC,iBAAhB,CAAkCxB,IAAlC;AACAH,QAAAA,KAAK,CAAC4B,gBAAN;AACD;AACF,KAXH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAaE,oBAAC,uBAAD;AAAyB,IAAA,SAAS,EAAEnC,oBAApC;AAA0D,IAAA,IAAI,EAAC,QAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAcGS,UAdH,CADF,CAZF,CAdF,CADD,gBAgDC,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAED,YAAhB;AAA8B,IAAA,QAAQ,EAAC,WAAvC;AAAmD,IAAA,aAAa,EAAC,KAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAjDJ,CADF;AAsDD,CArED","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stack, Spinner, PrimaryButton } from '@fluentui/react';\r\nimport LocalPreview from './LocalPreview';\r\nimport LocalSettings from './LocalSettings';\r\nimport DisplayNameField from './DisplayNameField';\r\nimport {\r\n  VideoDeviceInfo,\r\n  AudioDeviceInfo,\r\n  LocalVideoStream,\r\n  DeviceManager,\r\n  CallAgent\r\n} from '@azure/communication-calling';\r\nimport { VideoCameraEmphasisIcon } from '@fluentui/react-icons-northstar';\r\nimport {\r\n  videoCameraIconStyle,\r\n  configurationStackTokens,\r\n  buttonStyle,\r\n  localSettingsContainerStyle,\r\n  mainContainerStyle,\r\n  fullScreenStyle,\r\n  verticalStackStyle\r\n} from './styles/Configuration.styles';\r\n\r\nexport interface ConfigurationScreenProps {\r\n  userId: string;\r\n  groupId: string;\r\n  callAgent: CallAgent;\r\n  deviceManager: DeviceManager;\r\n  setUserId(userId: string): void;\r\n  initCallClient(userId: string, unsupportedStateHandler: () => void, endCallhandler: () => void): void;\r\n  setGroup(groupId: string): void;\r\n  startCallHandler(): void;\r\n  unsupportedStateHandler: () => void;\r\n  endCallHandler: () => void;\r\n  videoDeviceList: VideoDeviceInfo[];\r\n  audioDeviceList: AudioDeviceInfo[];\r\n  setVideoDeviceInfo(device: VideoDeviceInfo): void;\r\n  setAudioDeviceInfo(device: AudioDeviceInfo): void;\r\n  setMic(mic: boolean): void;\r\n  setLocalVideoStream(stream: LocalVideoStream | undefined): void;\r\n  localVideoRendererIsBusy: boolean;\r\n  videoDeviceInfo: VideoDeviceInfo;\r\n  audioDeviceInfo: AudioDeviceInfo;\r\n  localVideoStream: LocalVideoStream;\r\n  screenWidth: number;\r\n}\r\n\r\nexport default (props: ConfigurationScreenProps): JSX.Element => {\r\n  const spinnerLabel = 'Initializing call client...';\r\n  const buttonText = 'Start call';\r\n\r\n  const [name, setName] = useState(props.userId);\r\n  const [emptyWarning, setEmptyWarning] = useState(false);\r\n\r\n  const { userId, groupId, setUserId, initCallClient, setGroup, unsupportedStateHandler, endCallHandler } = props;\r\n\r\n  useEffect(() => {\r\n    setUserId(userId);\r\n    initCallClient(userId, unsupportedStateHandler, endCallHandler);\r\n    setGroup(groupId);\r\n  }, [userId, groupId, setUserId, initCallClient, setGroup, unsupportedStateHandler, endCallHandler]);\r\n\r\n  return (\r\n    <Stack className={mainContainerStyle} horizontalAlign=\"center\" verticalAlign=\"center\">\r\n      {props.deviceManager ? (\r\n        <Stack\r\n          className={props.screenWidth > 750 ? fullScreenStyle : verticalStackStyle}\r\n          horizontal={props.screenWidth > 750}\r\n          horizontalAlign=\"center\"\r\n          verticalAlign=\"center\"\r\n          tokens={props.screenWidth > 750 ? configurationStackTokens : undefined}\r\n        >\r\n          <LocalPreview\r\n            setMic={props.setMic}\r\n            setLocalVideoStream={props.setLocalVideoStream}\r\n            videoDeviceInfo={props.videoDeviceInfo}\r\n            audioDeviceInfo={props.audioDeviceInfo}\r\n            localVideoStream={props.localVideoStream}\r\n          />\r\n          <Stack className={localSettingsContainerStyle}>\r\n            <DisplayNameField setName={setName} name={name} setEmptyWarning={setEmptyWarning} isEmpty={emptyWarning} />\r\n            <div>\r\n              <LocalSettings\r\n                videoDeviceList={props.videoDeviceList}\r\n                audioDeviceList={props.audioDeviceList}\r\n                audioDeviceInfo={props.audioDeviceInfo}\r\n                videoDeviceInfo={props.videoDeviceInfo}\r\n                setVideoDeviceInfo={props.setVideoDeviceInfo}\r\n                setAudioDeviceInfo={props.setAudioDeviceInfo}\r\n              />\r\n            </div>\r\n            <div>\r\n              <PrimaryButton\r\n                className={buttonStyle}\r\n                onClick={() => {\r\n                  if (!name) {\r\n                    setEmptyWarning(true);\r\n                  } else {\r\n                    setEmptyWarning(false);\r\n                    props.setUserId(name);\r\n                    props.callAgent.updateDisplayName(name);\r\n                    props.startCallHandler();\r\n                  }\r\n                }}\r\n              >\r\n                <VideoCameraEmphasisIcon className={videoCameraIconStyle} size=\"medium\" />\r\n                {buttonText}\r\n              </PrimaryButton>\r\n            </div>\r\n          </Stack>\r\n        </Stack>\r\n      ) : (\r\n        <Spinner label={spinnerLabel} ariaLive=\"assertive\" labelPosition=\"top\" />\r\n      )}\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}