{"ast":null,"code":"import { LocalVideoStream } from '@azure/communication-calling';\nimport { SET_LOCAL_VIDEO_STREAM, ADD_SCREENSHARE_STREAM, RESET_STREAMS, REMOVE_SCREENSHARE_STREAM } from '../actions/streams';\nimport { SET_VIDEO_DEVICE_INFO } from '../actions/devices';\nconst initialState = {\n  localVideoRendererIsBusy: false,\n  localVideoStream: undefined,\n  streams: [],\n  screenShareStreams: []\n};\nexport const streamsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_VIDEO_DEVICE_INFO:\n      if (state.localVideoStream && action.videoDeviceInfo) {\n        return { ...state,\n          localVideoStream: new LocalVideoStream(action.videoDeviceInfo)\n        };\n      }\n\n      return state;\n\n    case SET_LOCAL_VIDEO_STREAM:\n      return { ...state,\n        localVideoStream: action.localVideoStream\n      };\n\n    case ADD_SCREENSHARE_STREAM:\n      const newScreenShareStream = {\n        stream: action.stream,\n        user: action.user\n      };\n      return { ...state,\n        screenShareStreams: [...state.screenShareStreams, newScreenShareStream]\n      };\n\n    case REMOVE_SCREENSHARE_STREAM:\n      const screenShareStreams = state.screenShareStreams.filter(stream => stream.stream !== action.stream && stream.user !== action.user);\n      return { ...state,\n        screenShareStreams\n      };\n\n    case RESET_STREAMS:\n      return initialState;\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/core/reducers/streams.ts"],"names":["LocalVideoStream","SET_LOCAL_VIDEO_STREAM","ADD_SCREENSHARE_STREAM","RESET_STREAMS","REMOVE_SCREENSHARE_STREAM","SET_VIDEO_DEVICE_INFO","initialState","localVideoRendererIsBusy","localVideoStream","undefined","streams","screenShareStreams","streamsReducer","state","action","type","videoDeviceInfo","newScreenShareStream","stream","user","filter"],"mappings":"AACA,SAASA,gBAAT,QAAiC,8BAAjC;AAEA,SACEC,sBADF,EAEEC,sBAFF,EAGEC,aAHF,EAKEC,yBALF,QAMO,oBANP;AAOA,SAAsBC,qBAAtB,QAAmD,oBAAnD;AASA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,wBAAwB,EAAE,KADO;AAEjCC,EAAAA,gBAAgB,EAAEC,SAFe;AAGjCC,EAAAA,OAAO,EAAE,EAHwB;AAIjCC,EAAAA,kBAAkB,EAAE;AAJa,CAAnC;AAOA,OAAO,MAAMC,cAAgE,GAAG,CAC9EC,KAAK,GAAGP,YADsE,EAE9EQ,MAF8E,KAG7D;AACjB,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,qBAAL;AACE,UAAIQ,KAAK,CAACL,gBAAN,IAA0BM,MAAM,CAACE,eAArC,EAAsD;AACpD,eAAO,EAAE,GAAGH,KAAL;AAAYL,UAAAA,gBAAgB,EAAE,IAAIR,gBAAJ,CAAqBc,MAAM,CAACE,eAA5B;AAA9B,SAAP;AACD;;AACD,aAAOH,KAAP;;AACF,SAAKZ,sBAAL;AACE,aAAO,EAAE,GAAGY,KAAL;AAAYL,QAAAA,gBAAgB,EAAEM,MAAM,CAACN;AAArC,OAAP;;AACF,SAAKN,sBAAL;AACE,YAAMe,oBAAuC,GAAG;AAAEC,QAAAA,MAAM,EAAEJ,MAAM,CAACI,MAAjB;AAAyBC,QAAAA,IAAI,EAAEL,MAAM,CAACK;AAAtC,OAAhD;AACA,aAAO,EAAE,GAAGN,KAAL;AAAYF,QAAAA,kBAAkB,EAAE,CAAC,GAAGE,KAAK,CAACF,kBAAV,EAA8BM,oBAA9B;AAAhC,OAAP;;AACF,SAAKb,yBAAL;AACE,YAAMO,kBAAkB,GAAGE,KAAK,CAACF,kBAAN,CAAyBS,MAAzB,CACxBF,MAAD,IAAYA,MAAM,CAACA,MAAP,KAAkBJ,MAAM,CAACI,MAAzB,IAAmCA,MAAM,CAACC,IAAP,KAAgBL,MAAM,CAACK,IAD7C,CAA3B;AAGA,aAAO,EAAE,GAAGN,KAAL;AAAYF,QAAAA;AAAZ,OAAP;;AACF,SAAKR,aAAL;AACE,aAAOG,YAAP;;AACF;AACE,aAAOO,KAAP;AAnBJ;AAqBD,CAzBM","sourcesContent":["import { Reducer } from 'redux';\r\nimport { LocalVideoStream } from '@azure/communication-calling';\r\nimport { ParticipantStream } from './index';\r\nimport {\r\n  SET_LOCAL_VIDEO_STREAM,\r\n  ADD_SCREENSHARE_STREAM,\r\n  RESET_STREAMS,\r\n  StreamTypes,\r\n  REMOVE_SCREENSHARE_STREAM\r\n} from '../actions/streams';\r\nimport { DeviceTypes, SET_VIDEO_DEVICE_INFO } from '../actions/devices';\r\n\r\nexport interface StreamsState {\r\n  streams: ParticipantStream[];\r\n  screenShareStreams: ParticipantStream[];\r\n  localVideoRendererIsBusy: boolean;\r\n  localVideoStream?: LocalVideoStream;\r\n}\r\n\r\nconst initialState: StreamsState = {\r\n  localVideoRendererIsBusy: false,\r\n  localVideoStream: undefined,\r\n  streams: [],\r\n  screenShareStreams: []\r\n};\r\n\r\nexport const streamsReducer: Reducer<StreamsState, StreamTypes | DeviceTypes> = (\r\n  state = initialState,\r\n  action: StreamTypes | DeviceTypes\r\n): StreamsState => {\r\n  switch (action.type) {\r\n    case SET_VIDEO_DEVICE_INFO:\r\n      if (state.localVideoStream && action.videoDeviceInfo) {\r\n        return { ...state, localVideoStream: new LocalVideoStream(action.videoDeviceInfo) };\r\n      }\r\n      return state;\r\n    case SET_LOCAL_VIDEO_STREAM:\r\n      return { ...state, localVideoStream: action.localVideoStream };\r\n    case ADD_SCREENSHARE_STREAM:\r\n      const newScreenShareStream: ParticipantStream = { stream: action.stream, user: action.user };\r\n      return { ...state, screenShareStreams: [...state.screenShareStreams, newScreenShareStream] };\r\n    case REMOVE_SCREENSHARE_STREAM:\r\n      const screenShareStreams = state.screenShareStreams.filter(\r\n        (stream) => stream.stream !== action.stream && stream.user !== action.user\r\n      );\r\n      return { ...state, screenShareStreams };\r\n    case RESET_STREAMS:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}