{"ast":null,"code":"import { connect } from 'react-redux';\nimport ConfigurationScreen from '../components/Configuration';\nimport { setGroup } from '../core/actions/calls';\nimport { setUserId } from '../core/actions/sdk';\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\nimport { initCallClient, updateDevices } from '../core/sideEffects';\nimport { setMic } from '../core/actions/controls';\nimport { setLocalVideoStream } from '../core/actions/streams';\n\nconst mapStateToProps = (state, props) => ({\n  deviceManager: state.devices.deviceManager,\n  callAgent: state.calls.callAgent,\n  userId: state.sdk.userId || props.userId,\n  group: state.calls.group,\n  mic: state.controls.mic,\n  screenWidth: props.screenWidth,\n  localVideoStream: state.streams.localVideoStream,\n  audioDeviceInfo: state.devices.audioDeviceInfo,\n  videoDeviceInfo: state.devices.videoDeviceInfo,\n  videoDeviceList: state.devices.videoDeviceList,\n  audioDeviceList: state.devices.audioDeviceList,\n  cameraPermission: state.devices.cameraPermission,\n  microphonePermission: state.devices.microphonePermission\n});\n\nconst mapDispatchToProps = dispatch => ({\n  setLocalVideoStream: localVideoStream => dispatch(setLocalVideoStream(localVideoStream)),\n  setMic: mic => dispatch(setMic(mic)),\n  setAudioDeviceInfo: deviceInfo => dispatch(setAudioDeviceInfo(deviceInfo)),\n  setVideoDeviceInfo: deviceInfo => dispatch(setVideoDeviceInfo(deviceInfo)),\n  initCallClient: (userId, unsupportedStateHandler, endCallHandler) => dispatch(initCallClient(userId, unsupportedStateHandler, endCallHandler)),\n  setUserId: userId => dispatch(setUserId(userId)),\n  setGroup: groupId => dispatch(setGroup(groupId)),\n  updateDevices: () => dispatch(updateDevices())\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(ConfigurationScreen);","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/containers/Configuration.ts"],"names":["connect","ConfigurationScreen","setGroup","setUserId","setVideoDeviceInfo","setAudioDeviceInfo","initCallClient","updateDevices","setMic","setLocalVideoStream","mapStateToProps","state","props","deviceManager","devices","callAgent","calls","userId","sdk","group","mic","controls","screenWidth","localVideoStream","streams","audioDeviceInfo","videoDeviceInfo","videoDeviceList","audioDeviceList","cameraPermission","microphonePermission","mapDispatchToProps","dispatch","deviceInfo","unsupportedStateHandler","endCallHandler","groupId","connector"],"mappings":"AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,mBAAP,MAA8D,6BAA9D;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,yBAAvD;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,qBAA9C;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAGA,SAASC,mBAAT,QAAoC,yBAApC;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAeC,KAAf,MAAoD;AAC1EC,EAAAA,aAAa,EAAEF,KAAK,CAACG,OAAN,CAAcD,aAD6C;AAE1EE,EAAAA,SAAS,EAAEJ,KAAK,CAACK,KAAN,CAAYD,SAFmD;AAG1EE,EAAAA,MAAM,EAAEN,KAAK,CAACO,GAAN,CAAUD,MAAV,IAAoBL,KAAK,CAACK,MAHwC;AAI1EE,EAAAA,KAAK,EAAER,KAAK,CAACK,KAAN,CAAYG,KAJuD;AAK1EC,EAAAA,GAAG,EAAET,KAAK,CAACU,QAAN,CAAeD,GALsD;AAM1EE,EAAAA,WAAW,EAAEV,KAAK,CAACU,WANuD;AAO1EC,EAAAA,gBAAgB,EAAEZ,KAAK,CAACa,OAAN,CAAcD,gBAP0C;AAQ1EE,EAAAA,eAAe,EAAEd,KAAK,CAACG,OAAN,CAAcW,eAR2C;AAS1EC,EAAAA,eAAe,EAAEf,KAAK,CAACG,OAAN,CAAcY,eAT2C;AAU1EC,EAAAA,eAAe,EAAEhB,KAAK,CAACG,OAAN,CAAca,eAV2C;AAW1EC,EAAAA,eAAe,EAAEjB,KAAK,CAACG,OAAN,CAAcc,eAX2C;AAY1EC,EAAAA,gBAAgB,EAAElB,KAAK,CAACG,OAAN,CAAce,gBAZ0C;AAa1EC,EAAAA,oBAAoB,EAAEnB,KAAK,CAACG,OAAN,CAAcgB;AAbsC,CAApD,CAAxB;;AAgBA,MAAMC,kBAAkB,GAAIC,QAAD,KAAoB;AAC7CvB,EAAAA,mBAAmB,EAAGc,gBAAD,IAAwCS,QAAQ,CAACvB,mBAAmB,CAACc,gBAAD,CAApB,CADxB;AAE7Cf,EAAAA,MAAM,EAAGY,GAAD,IAAkBY,QAAQ,CAACxB,MAAM,CAACY,GAAD,CAAP,CAFW;AAG7Cf,EAAAA,kBAAkB,EAAG4B,UAAD,IAAiCD,QAAQ,CAAC3B,kBAAkB,CAAC4B,UAAD,CAAnB,CAHhB;AAI7C7B,EAAAA,kBAAkB,EAAG6B,UAAD,IAAiCD,QAAQ,CAAC5B,kBAAkB,CAAC6B,UAAD,CAAnB,CAJhB;AAK7C3B,EAAAA,cAAc,EAAE,CAACW,MAAD,EAAiBiB,uBAAjB,EAAsDC,cAAtD,KACdH,QAAQ,CAAC1B,cAAc,CAACW,MAAD,EAASiB,uBAAT,EAAkCC,cAAlC,CAAf,CANmC;AAO7ChC,EAAAA,SAAS,EAAGc,MAAD,IAAoBe,QAAQ,CAAC7B,SAAS,CAACc,MAAD,CAAV,CAPM;AAQ7Cf,EAAAA,QAAQ,EAAGkC,OAAD,IAAqBJ,QAAQ,CAAC9B,QAAQ,CAACkC,OAAD,CAAT,CARM;AAS7C7B,EAAAA,aAAa,EAAE,MAAMyB,QAAQ,CAACzB,aAAa,EAAd;AATgB,CAApB,CAA3B;;AAYA,MAAM8B,SAAc,GAAGrC,OAAO,CAACU,eAAD,EAAkBqB,kBAAlB,CAA9B;AACA,eAAeM,SAAS,CAACpC,mBAAD,CAAxB","sourcesContent":["import { connect } from 'react-redux';\r\nimport ConfigurationScreen, { ConfigurationScreenProps } from '../components/Configuration';\r\nimport { setGroup } from '../core/actions/calls';\r\nimport { setUserId } from '../core/actions/sdk';\r\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\r\nimport { initCallClient, updateDevices } from '../core/sideEffects';\r\nimport { setMic } from '../core/actions/controls';\r\nimport { State } from '../core/reducers';\r\nimport { AudioDeviceInfo, VideoDeviceInfo, LocalVideoStream } from '@azure/communication-calling';\r\nimport { setLocalVideoStream } from '../core/actions/streams';\r\n\r\nconst mapStateToProps = (state: State, props: ConfigurationScreenProps) => ({\r\n  deviceManager: state.devices.deviceManager,\r\n  callAgent: state.calls.callAgent,\r\n  userId: state.sdk.userId || props.userId,\r\n  group: state.calls.group,\r\n  mic: state.controls.mic,\r\n  screenWidth: props.screenWidth,\r\n  localVideoStream: state.streams.localVideoStream,\r\n  audioDeviceInfo: state.devices.audioDeviceInfo,\r\n  videoDeviceInfo: state.devices.videoDeviceInfo,\r\n  videoDeviceList: state.devices.videoDeviceList,\r\n  audioDeviceList: state.devices.audioDeviceList,\r\n  cameraPermission: state.devices.cameraPermission,\r\n  microphonePermission: state.devices.microphonePermission\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  setLocalVideoStream: (localVideoStream: LocalVideoStream) => dispatch(setLocalVideoStream(localVideoStream)),\r\n  setMic: (mic: boolean) => dispatch(setMic(mic)),\r\n  setAudioDeviceInfo: (deviceInfo: AudioDeviceInfo) => dispatch(setAudioDeviceInfo(deviceInfo)),\r\n  setVideoDeviceInfo: (deviceInfo: VideoDeviceInfo) => dispatch(setVideoDeviceInfo(deviceInfo)),\r\n  initCallClient: (userId: string, unsupportedStateHandler: () => void, endCallHandler: () => void) =>\r\n    dispatch(initCallClient(userId, unsupportedStateHandler, endCallHandler)),\r\n  setUserId: (userId: string) => dispatch(setUserId(userId)),\r\n  setGroup: (groupId: string) => dispatch(setGroup(groupId)),\r\n  updateDevices: () => dispatch(updateDevices())\r\n});\r\n\r\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\r\nexport default connector(ConfigurationScreen);\r\n"]},"metadata":{},"sourceType":"module"}