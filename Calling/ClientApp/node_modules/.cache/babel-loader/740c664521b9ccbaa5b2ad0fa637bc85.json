{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\src\\\\App.tsx\";\n// © Microsoft Corporation. All rights reserved.\nimport React, { useState, useEffect } from 'react';\nimport GroupCall from './containers/GroupCall';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { reducer } from './core/reducers';\nimport thunk from 'redux-thunk';\nimport EndCall from './components/EndCall';\nimport HomeScreen from './components/HomeScreen';\nimport ConfigurationScreen from './containers/Configuration';\nimport { v1 as createGUID } from 'uuid';\nimport { loadTheme, initializeIcons } from '@fluentui/react';\nimport { utils } from './Utils/Utils';\n\nconst sdkVersion = require('../package.json').dependencies['@azure/communication-calling'];\n\nconst lastUpdated = `Last Updated ${utils.getBuildTime()} with @azure/communication-calling:${sdkVersion}`;\nloadTheme({});\ninitializeIcons();\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nconst App = () => {\n  const [page, setPage] = useState('home');\n  const [groupId, setGroupId] = useState('');\n  const [screenWidth, setScreenWidth] = useState(0);\n  useEffect(() => {\n    const setWindowWidth = () => {\n      const width = typeof window !== 'undefined' ? window.innerWidth : 0;\n      setScreenWidth(width);\n    };\n\n    setWindowWidth();\n    window.addEventListener('resize', setWindowWidth);\n    return () => window.removeEventListener('resize', setWindowWidth);\n  }, []);\n\n  const createUserId = () => 'user' + Math.ceil(Math.random() * 1000);\n\n  const getGroupIdFromUrl = () => {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get('groupId');\n  };\n\n  const getGroupId = () => {\n    if (groupId) return groupId;\n    const uri_gid = getGroupIdFromUrl();\n    const gid = uri_gid == null || uri_gid === '' ? createGUID() : uri_gid;\n    console.log('The group id is ' + gid);\n    setGroupId(gid);\n    return gid;\n  };\n\n  const getContent = () => {\n    if (page === 'home') {\n      return /*#__PURE__*/React.createElement(HomeScreen, {\n        startCallHandler: () => {\n          window.history.pushState({}, document.title, window.location.href + '?groupId=' + getGroupId());\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }\n      });\n    } else if (page === 'configuration') {\n      return /*#__PURE__*/React.createElement(ConfigurationScreen, {\n        startCallHandler: () => setPage('call'),\n        unsupportedStateHandler: () => setPage('error'),\n        endCallHandler: () => setPage('endCall'),\n        groupId: getGroupId(),\n        userId: createUserId(),\n        screenWidth: screenWidth,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 9\n        }\n      });\n    } else if (page === 'call') {\n      return /*#__PURE__*/React.createElement(GroupCall, {\n        endCallHandler: () => setPage('endCall'),\n        groupId: getGroupId(),\n        userId: createUserId(),\n        screenWidth: screenWidth,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }\n      });\n    } else if (page === 'endCall') {\n      return /*#__PURE__*/React.createElement(EndCall, {\n        rejoinHandler: () => {\n          setPage('call');\n        },\n        homeHandler: () => {\n          window.location.href = window.location.href.split('?')[0];\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 9\n        }\n      });\n    } else {\n      // page === 'error'\n      window.document.title = 'Unsupported browser';\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"a\", {\n        href: \"https://aka.ms/ACS-CallingSupport#calling-client-library-browser-support\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }\n      }, \"Learn more\"), \"\\xA0about browsers and platforms supported by the web calling sdk\");\n    }\n  };\n\n  if (getGroupIdFromUrl() && page === 'home') {\n    setPage('configuration');\n  }\n\n  if (utils.isMobileSession() || utils.isSmallScreen()) {\n    console.log('ACS Calling sample: This is experimental behaviour');\n  }\n\n  return /*#__PURE__*/React.createElement(Provider, {\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 10\n    }\n  }, getContent());\n};\n\nwindow.setTimeout(() => {\n  try {\n    console.log(`ACS sample group calling app: ${lastUpdated}`);\n  } catch (e) {}\n}, 0);\nexport default App;","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/App.tsx"],"names":["React","useState","useEffect","GroupCall","createStore","applyMiddleware","Provider","reducer","thunk","EndCall","HomeScreen","ConfigurationScreen","v1","createGUID","loadTheme","initializeIcons","utils","sdkVersion","require","dependencies","lastUpdated","getBuildTime","store","App","page","setPage","groupId","setGroupId","screenWidth","setScreenWidth","setWindowWidth","width","window","innerWidth","addEventListener","removeEventListener","createUserId","Math","ceil","random","getGroupIdFromUrl","urlParams","URLSearchParams","location","search","get","getGroupId","uri_gid","gid","console","log","getContent","history","pushState","document","title","href","split","isMobileSession","isSmallScreen","setTimeout","e"],"mappings":"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","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\nimport React, { useState, useEffect } from 'react';\r\nimport GroupCall from './containers/GroupCall';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport { reducer } from './core/reducers';\r\nimport thunk from 'redux-thunk';\r\nimport EndCall from './components/EndCall';\r\nimport HomeScreen from './components/HomeScreen';\r\nimport ConfigurationScreen from './containers/Configuration';\r\nimport { v1 as createGUID } from 'uuid';\r\nimport { loadTheme, initializeIcons } from '@fluentui/react';\r\nimport { utils } from './Utils/Utils';\r\n\r\nconst sdkVersion = require('../package.json').dependencies['@azure/communication-calling'];\r\nconst lastUpdated = `Last Updated ${utils.getBuildTime()} with @azure/communication-calling:${sdkVersion}`;\r\n\r\nloadTheme({});\r\ninitializeIcons();\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\nconst App = () => {\r\n  const [page, setPage] = useState('home');\r\n  const [groupId, setGroupId] = useState('');\r\n  const [screenWidth, setScreenWidth] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const setWindowWidth = () => {\r\n      const width = typeof window !== 'undefined' ? window.innerWidth : 0;\r\n      setScreenWidth(width);\r\n    };\r\n    setWindowWidth();\r\n    window.addEventListener('resize', setWindowWidth);\r\n    return () => window.removeEventListener('resize', setWindowWidth);\r\n  }, []);\r\n\r\n  const createUserId = () => 'user' + Math.ceil(Math.random() * 1000);\r\n\r\n  const getGroupIdFromUrl = () => {\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    return urlParams.get('groupId');\r\n  };\r\n\r\n  const getGroupId = () => {\r\n    if (groupId) return groupId;\r\n    const uri_gid = getGroupIdFromUrl();\r\n    const gid = uri_gid == null || uri_gid === '' ? createGUID() : uri_gid;\r\n    console.log('The group id is ' + gid);\r\n    setGroupId(gid);\r\n    return gid;\r\n  };\r\n\r\n  const getContent = () => {\r\n    if (page === 'home') {\r\n      return (\r\n        <HomeScreen\r\n          startCallHandler={() => {\r\n            window.history.pushState({}, document.title, window.location.href + '?groupId=' + getGroupId());\r\n          }}\r\n        />\r\n      );\r\n    } else if (page === 'configuration') {\r\n      return (\r\n        <ConfigurationScreen\r\n          startCallHandler={() => setPage('call')}\r\n          unsupportedStateHandler={() => setPage('error')}\r\n          endCallHandler={() => setPage('endCall')}\r\n          groupId={getGroupId()}\r\n          userId={createUserId()}\r\n          screenWidth={screenWidth}\r\n        />\r\n      );\r\n    } else if (page === 'call') {\r\n      return (\r\n        <GroupCall\r\n          endCallHandler={() => setPage('endCall')}\r\n          groupId={getGroupId()}\r\n          userId={createUserId()}\r\n          screenWidth={screenWidth}\r\n        />\r\n      );\r\n    } else if (page === 'endCall') {\r\n      return (\r\n        <EndCall\r\n          rejoinHandler={() => {\r\n            setPage('call');\r\n          }}\r\n          homeHandler={() => {\r\n            window.location.href = window.location.href.split('?')[0];\r\n          }}\r\n        />\r\n      );\r\n    } else {\r\n      // page === 'error'\r\n      window.document.title = 'Unsupported browser';\r\n      return (\r\n        <>\r\n          <a href=\"https://aka.ms/ACS-CallingSupport#calling-client-library-browser-support\">Learn more</a>&nbsp;about\r\n          browsers and platforms supported by the web calling sdk\r\n        </>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (getGroupIdFromUrl() && page === 'home') {\r\n    setPage('configuration');\r\n  }\r\n\r\n  if (utils.isMobileSession() || utils.isSmallScreen()) {\r\n    console.log('ACS Calling sample: This is experimental behaviour');\r\n  }\r\n\r\n  return <Provider store={store}>{getContent()}</Provider>;\r\n};\r\n\r\nwindow.setTimeout(() => {\r\n  try {\r\n    console.log(`ACS sample group calling app: ${lastUpdated}`);\r\n  } catch (e) {}\r\n}, 0);\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}