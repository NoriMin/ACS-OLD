{"ast":null,"code":"import{connect}from'react-redux';import Header from'../components/Header';import{setMicrophone,setShareUnshareScreen,endCall as _endCall}from'../core/sideEffects';import{utils}from'../Utils/Utils';import{Constants}from'../core/constants';import{setLocalVideoStream as _setLocalVideoStream}from'../core/actions/streams';var mapStateToProps=function mapStateToProps(state,props){return{actionable:state.calls.callState===Constants.INCOMING||state.calls.callState===Constants.RINGING||state.calls.callState===Constants.CONNECTING||state.calls.callState===Constants.CONNECTED,localVideoStream:state.streams.localVideoStream,mic:state.controls.mic,call:state.calls.call,shareScreen:state.controls.shareScreen,endCall:function endCall(){state.calls.call&&_endCall(state.calls.call,{forEveryone:false});props.endCallHandler();},videoDeviceInfo:state.devices.videoDeviceInfo,screenWidth:props.screenWidth,screenShareStreams:state.streams.screenShareStreams,localVideoRendererIsBusy:state.streams.localVideoRendererIsBusy,cameraPermission:state.devices.cameraPermission,microphonePermission:state.devices.microphonePermission};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{setLocalVideoStream:function setLocalVideoStream(localVideoStream){return dispatch(_setLocalVideoStream(localVideoStream));},setMic:function setMic(mic){return dispatch(setMicrophone(mic));},setScreenShare:function setScreenShare(screenShare){return dispatch(setShareUnshareScreen(screenShare));},// Only support Desktop -- Chrome | Edge (Chromium) | Safari\nisLocalScreenShareSupportedInBrowser:function isLocalScreenShareSupportedInBrowser(){return!utils.isMobileSession()&&(/chrome/i.test(navigator.userAgent.toLowerCase())||/safari/i.test(navigator.userAgent.toLowerCase()));}};};var connector=connect(mapStateToProps,mapDispatchToProps);export default connector(Header);","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/containers/Header.ts"],"names":["connect","Header","setMicrophone","setShareUnshareScreen","endCall","utils","Constants","setLocalVideoStream","mapStateToProps","state","props","actionable","calls","callState","INCOMING","RINGING","CONNECTING","CONNECTED","localVideoStream","streams","mic","controls","call","shareScreen","forEveryone","endCallHandler","videoDeviceInfo","devices","screenWidth","screenShareStreams","localVideoRendererIsBusy","cameraPermission","microphonePermission","mapDispatchToProps","dispatch","setMic","setScreenShare","screenShare","isLocalScreenShareSupportedInBrowser","isMobileSession","test","navigator","userAgent","toLowerCase","connector"],"mappings":"AAAA,OAASA,OAAT,KAAwB,aAAxB,CACA,MAAOC,CAAAA,MAAP,KAAoC,sBAApC,CACA,OAASC,aAAT,CAAwBC,qBAAxB,CAA+CC,OAAO,GAAPA,CAAAA,QAA/C,KAA8D,qBAA9D,CACA,OAASC,KAAT,KAAsB,gBAAtB,CACA,OAASC,SAAT,KAA0B,mBAA1B,CAGA,OAASC,mBAAmB,GAAnBA,CAAAA,oBAAT,KAAoC,yBAApC,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAeC,KAAf,QAAuC,CAC7DC,UAAU,CACRF,KAAK,CAACG,KAAN,CAAYC,SAAZ,GAA0BP,SAAS,CAACQ,QAApC,EACAL,KAAK,CAACG,KAAN,CAAYC,SAAZ,GAA0BP,SAAS,CAACS,OADpC,EAEAN,KAAK,CAACG,KAAN,CAAYC,SAAZ,GAA0BP,SAAS,CAACU,UAFpC,EAGAP,KAAK,CAACG,KAAN,CAAYC,SAAZ,GAA0BP,SAAS,CAACW,SALuB,CAM7DC,gBAAgB,CAAET,KAAK,CAACU,OAAN,CAAcD,gBAN6B,CAO7DE,GAAG,CAAEX,KAAK,CAACY,QAAN,CAAeD,GAPyC,CAQ7DE,IAAI,CAAEb,KAAK,CAACG,KAAN,CAAYU,IAR2C,CAS7DC,WAAW,CAAEd,KAAK,CAACY,QAAN,CAAeE,WATiC,CAU7DnB,OAAO,CAAE,kBAAM,CACbK,KAAK,CAACG,KAAN,CAAYU,IAAZ,EAAoBlB,QAAO,CAACK,KAAK,CAACG,KAAN,CAAYU,IAAb,CAAmB,CAAEE,WAAW,CAAE,KAAf,CAAnB,CAA3B,CACAd,KAAK,CAACe,cAAN,GACD,CAb4D,CAc7DC,eAAe,CAAEjB,KAAK,CAACkB,OAAN,CAAcD,eAd8B,CAe7DE,WAAW,CAAElB,KAAK,CAACkB,WAf0C,CAgB7DC,kBAAkB,CAAEpB,KAAK,CAACU,OAAN,CAAcU,kBAhB2B,CAiB7DC,wBAAwB,CAAErB,KAAK,CAACU,OAAN,CAAcW,wBAjBqB,CAkB7DC,gBAAgB,CAAEtB,KAAK,CAACkB,OAAN,CAAcI,gBAlB6B,CAmB7DC,oBAAoB,CAAEvB,KAAK,CAACkB,OAAN,CAAcK,oBAnByB,CAAvC,EAAxB,CAsBA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,QAAD,QAAoB,CAC7C3B,mBAAmB,CAAE,6BAACW,gBAAD,QAAwCgB,CAAAA,QAAQ,CAAC3B,oBAAmB,CAACW,gBAAD,CAApB,CAAhD,EADwB,CAE7CiB,MAAM,CAAE,gBAACf,GAAD,QAAkBc,CAAAA,QAAQ,CAAChC,aAAa,CAACkB,GAAD,CAAd,CAA1B,EAFqC,CAG7CgB,cAAc,CAAE,wBAACC,WAAD,QAA0BH,CAAAA,QAAQ,CAAC/B,qBAAqB,CAACkC,WAAD,CAAtB,CAAlC,EAH6B,CAI7C;AACAC,oCAAoC,CAAE,+CAAM,CAC1C,MACE,CAACjC,KAAK,CAACkC,eAAN,EAAD,GACC,UAAUC,IAAV,CAAeC,SAAS,CAACC,SAAV,CAAoBC,WAApB,EAAf,GAAqD,UAAUH,IAAV,CAAeC,SAAS,CAACC,SAAV,CAAoBC,WAApB,EAAf,CADtD,CADF,CAID,CAV4C,CAApB,EAA3B,CAaA,GAAMC,CAAAA,SAAc,CAAG5C,OAAO,CAACQ,eAAD,CAAkByB,kBAAlB,CAA9B,CACA,cAAeW,CAAAA,SAAS,CAAC3C,MAAD,CAAxB","sourcesContent":["import { connect } from 'react-redux';\r\nimport Header, { HeaderProps } from '../components/Header';\r\nimport { setMicrophone, setShareUnshareScreen, endCall } from '../core/sideEffects';\r\nimport { utils } from '../Utils/Utils';\r\nimport { Constants } from '../core/constants';\r\nimport { State } from '../core/reducers';\r\nimport { LocalVideoStream } from '@azure/communication-calling';\r\nimport { setLocalVideoStream } from '../core/actions/streams';\r\n\r\nconst mapStateToProps = (state: State, props: HeaderProps) => ({\r\n  actionable:\r\n    state.calls.callState === Constants.INCOMING ||\r\n    state.calls.callState === Constants.RINGING ||\r\n    state.calls.callState === Constants.CONNECTING ||\r\n    state.calls.callState === Constants.CONNECTED,\r\n  localVideoStream: state.streams.localVideoStream,\r\n  mic: state.controls.mic,\r\n  call: state.calls.call,\r\n  shareScreen: state.controls.shareScreen,\r\n  endCall: () => {\r\n    state.calls.call && endCall(state.calls.call, { forEveryone: false });\r\n    props.endCallHandler();\r\n  },\r\n  videoDeviceInfo: state.devices.videoDeviceInfo,\r\n  screenWidth: props.screenWidth,\r\n  screenShareStreams: state.streams.screenShareStreams,\r\n  localVideoRendererIsBusy: state.streams.localVideoRendererIsBusy,\r\n  cameraPermission: state.devices.cameraPermission,\r\n  microphonePermission: state.devices.microphonePermission\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  setLocalVideoStream: (localVideoStream: LocalVideoStream) => dispatch(setLocalVideoStream(localVideoStream)),\r\n  setMic: (mic: boolean) => dispatch(setMicrophone(mic)),\r\n  setScreenShare: (screenShare: boolean) => dispatch(setShareUnshareScreen(screenShare)),\r\n  // Only support Desktop -- Chrome | Edge (Chromium) | Safari\r\n  isLocalScreenShareSupportedInBrowser: () => {\r\n    return (\r\n      !utils.isMobileSession() &&\r\n      (/chrome/i.test(navigator.userAgent.toLowerCase()) || /safari/i.test(navigator.userAgent.toLowerCase()))\r\n    );\r\n  }\r\n});\r\n\r\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\r\nexport default connector(Header);\r\n"]},"metadata":{},"sourceType":"module"}