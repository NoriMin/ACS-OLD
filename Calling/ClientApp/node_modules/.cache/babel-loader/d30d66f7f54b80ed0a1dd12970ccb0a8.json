{"ast":null,"code":"import{connect}from'react-redux';import ConfigurationScreen from'../components/Configuration';import{setGroup as _setGroup}from'../core/actions/calls';import{setUserId as _setUserId}from'../core/actions/sdk';import{setVideoDeviceInfo as _setVideoDeviceInfo,setAudioDeviceInfo as _setAudioDeviceInfo}from'../core/actions/devices';import{initCallClient as _initCallClient,updateDevices as _updateDevices}from'../core/sideEffects';import{setMic as _setMic}from'../core/actions/controls';import{setLocalVideoStream as _setLocalVideoStream}from'../core/actions/streams';var mapStateToProps=function mapStateToProps(state,props){return{deviceManager:state.devices.deviceManager,callAgent:state.calls.callAgent,userId:state.sdk.userId||props.userId,group:state.calls.group,mic:state.controls.mic,screenWidth:props.screenWidth,localVideoStream:state.streams.localVideoStream,audioDeviceInfo:state.devices.audioDeviceInfo,videoDeviceInfo:state.devices.videoDeviceInfo,videoDeviceList:state.devices.videoDeviceList,audioDeviceList:state.devices.audioDeviceList,cameraPermission:state.devices.cameraPermission,microphonePermission:state.devices.microphonePermission};};var mapDispatchToProps=function mapDispatchToProps(dispatch){return{setLocalVideoStream:function setLocalVideoStream(localVideoStream){return dispatch(_setLocalVideoStream(localVideoStream));},setMic:function setMic(mic){return dispatch(_setMic(mic));},setAudioDeviceInfo:function setAudioDeviceInfo(deviceInfo){return dispatch(_setAudioDeviceInfo(deviceInfo));},setVideoDeviceInfo:function setVideoDeviceInfo(deviceInfo){return dispatch(_setVideoDeviceInfo(deviceInfo));},initCallClient:function initCallClient(userId,unsupportedStateHandler,endCallHandler){return dispatch(_initCallClient(userId,unsupportedStateHandler,endCallHandler));},setUserId:function setUserId(userId){return dispatch(_setUserId(userId));},setGroup:function setGroup(groupId){return dispatch(_setGroup(groupId));},updateDevices:function updateDevices(){return dispatch(_updateDevices());}};};var connector=connect(mapStateToProps,mapDispatchToProps);export default connector(ConfigurationScreen);","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/containers/Configuration.ts"],"names":["connect","ConfigurationScreen","setGroup","setUserId","setVideoDeviceInfo","setAudioDeviceInfo","initCallClient","updateDevices","setMic","setLocalVideoStream","mapStateToProps","state","props","deviceManager","devices","callAgent","calls","userId","sdk","group","mic","controls","screenWidth","localVideoStream","streams","audioDeviceInfo","videoDeviceInfo","videoDeviceList","audioDeviceList","cameraPermission","microphonePermission","mapDispatchToProps","dispatch","deviceInfo","unsupportedStateHandler","endCallHandler","groupId","connector"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\r\nimport ConfigurationScreen, { ConfigurationScreenProps } from '../components/Configuration';\r\nimport { setGroup } from '../core/actions/calls';\r\nimport { setUserId } from '../core/actions/sdk';\r\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\r\nimport { initCallClient, updateDevices } from '../core/sideEffects';\r\nimport { setMic } from '../core/actions/controls';\r\nimport { State } from '../core/reducers';\r\nimport { AudioDeviceInfo, VideoDeviceInfo, LocalVideoStream } from '@azure/communication-calling';\r\nimport { setLocalVideoStream } from '../core/actions/streams';\r\n\r\nconst mapStateToProps = (state: State, props: ConfigurationScreenProps) => ({\r\n  deviceManager: state.devices.deviceManager,\r\n  callAgent: state.calls.callAgent,\r\n  userId: state.sdk.userId || props.userId,\r\n  group: state.calls.group,\r\n  mic: state.controls.mic,\r\n  screenWidth: props.screenWidth,\r\n  localVideoStream: state.streams.localVideoStream,\r\n  audioDeviceInfo: state.devices.audioDeviceInfo,\r\n  videoDeviceInfo: state.devices.videoDeviceInfo,\r\n  videoDeviceList: state.devices.videoDeviceList,\r\n  audioDeviceList: state.devices.audioDeviceList,\r\n  cameraPermission: state.devices.cameraPermission,\r\n  microphonePermission: state.devices.microphonePermission\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  setLocalVideoStream: (localVideoStream: LocalVideoStream) => dispatch(setLocalVideoStream(localVideoStream)),\r\n  setMic: (mic: boolean) => dispatch(setMic(mic)),\r\n  setAudioDeviceInfo: (deviceInfo: AudioDeviceInfo) => dispatch(setAudioDeviceInfo(deviceInfo)),\r\n  setVideoDeviceInfo: (deviceInfo: VideoDeviceInfo) => dispatch(setVideoDeviceInfo(deviceInfo)),\r\n  initCallClient: (userId: string, unsupportedStateHandler: () => void, endCallHandler: () => void) =>\r\n    dispatch(initCallClient(userId, unsupportedStateHandler, endCallHandler)),\r\n  setUserId: (userId: string) => dispatch(setUserId(userId)),\r\n  setGroup: (groupId: string) => dispatch(setGroup(groupId)),\r\n  updateDevices: () => dispatch(updateDevices())\r\n});\r\n\r\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\r\nexport default connector(ConfigurationScreen);\r\n"]},"metadata":{},"sourceType":"module"}