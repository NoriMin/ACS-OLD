{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter } from \"tslib\";\nimport { parseToken } from \"./tokenParser\";\nimport { StaticTokenCredential } from \"./staticTokenCredential\";\nimport { AutoRefreshUserCredential } from \"./autoRefreshUserCredential\";\n/**\n * The CommunicationUserCredential implementation with support for proactive token refresh.\n */\n\nexport class AzureCommunicationUserCredential {\n  constructor(tokenOrRefreshOptions) {\n    this.disposed = false;\n\n    if (typeof tokenOrRefreshOptions === \"string\") {\n      this.userCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptions));\n    } else {\n      this.userCredential = new AutoRefreshUserCredential(tokenOrRefreshOptions);\n    }\n  }\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.\n   */\n\n\n  getToken(abortSignal) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.throwIfDisposed();\n      const token = yield this.userCredential.getToken(abortSignal);\n      this.throwIfDisposed();\n      return token;\n    });\n  }\n  /**\n   * Disposes the CommunicationUserCredential and cancels any internal auto-refresh operation.\n   */\n\n\n  dispose() {\n    this.disposed = true;\n    this.userCredential.dispose();\n  }\n\n  throwIfDisposed() {\n    if (this.disposed) {\n      throw new Error(\"User credential is disposed\");\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/communicationUserCredential.ts"],"names":[],"mappings":"AAAA;AACA;;AAGA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,yBAAT,QAA0D,6BAA1D;AAmBA;;;;AAGA,OAAM,MAAO,gCAAP,CAAuC;AAe3C,EAAA,WAAA,CAAY,qBAAZ,EAA0D;AAblD,SAAA,QAAA,GAAW,KAAX;;AAcN,QAAI,OAAO,qBAAP,KAAiC,QAArC,EAA+C;AAC7C,WAAK,cAAL,GAAsB,IAAI,qBAAJ,CAA0B,UAAU,CAAC,qBAAD,CAApC,CAAtB;AACD,KAFD,MAEO;AACL,WAAK,cAAL,GAAsB,IAAI,yBAAJ,CAA8B,qBAA9B,CAAtB;AACD;AACF;AAED;;;;;;AAIa,EAAA,QAAQ,CAAC,WAAD,EAA8B;;AACjD,WAAK,eAAL;AACA,YAAM,KAAK,GAAG,MAAM,KAAK,cAAL,CAAoB,QAApB,CAA6B,WAA7B,CAApB;AACA,WAAK,eAAL;AACA,aAAO,KAAP;AACD,K;AAAA;AAED;;;;;AAGO,EAAA,OAAO,GAAA;AACZ,SAAK,QAAL,GAAgB,IAAhB;AACA,SAAK,cAAL,CAAoB,OAApB;AACD;;AAEO,EAAA,eAAe,GAAA;AACrB,QAAI,KAAK,QAAT,EAAmB;AACjB,YAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF;;AA9C0C","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike, AccessToken } from \"@azure/core-http\";\nimport { parseToken } from \"./tokenParser\";\nimport { StaticTokenCredential } from \"./staticTokenCredential\";\nimport { AutoRefreshUserCredential, RefreshOptions } from \"./autoRefreshUserCredential\";\n\nexport type UserCredential = Pick<AzureCommunicationUserCredential, \"getToken\" | \"dispose\">;\n\n/**\n * The Azure Communication Services User token credential.\n */\nexport interface CommunicationUserCredential {\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.\n   */\n  getToken(abortSignal?: AbortSignalLike): Promise<AccessToken>;\n  /**\n   * Disposes the CommunicationUserCredential and cancels any internal auto-refresh operation.\n   */\n  dispose(): void;\n}\n\n/**\n * The CommunicationUserCredential implementation with support for proactive token refresh.\n */\nexport class AzureCommunicationUserCredential implements CommunicationUserCredential {\n  private readonly userCredential: UserCredential;\n  private disposed = false;\n\n  /**\n   * Creates an instance of CommunicationUserCredential with a static token and no proactive refreshing.\n   * @param token A user access token issued by Communication Services.\n   */\n  constructor(token: string);\n  /**\n   * Creates an instance of CommunicationUserCredential with a lambda to get a token and options\n   * to configure proactive refreshing.\n   * @param refreshOptions Options to configure refresh and opt-in to proactive refreshing.\n   */\n  constructor(refreshOptions: RefreshOptions);\n  constructor(tokenOrRefreshOptions: string | RefreshOptions) {\n    if (typeof tokenOrRefreshOptions === \"string\") {\n      this.userCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptions));\n    } else {\n      this.userCredential = new AutoRefreshUserCredential(tokenOrRefreshOptions);\n    }\n  }\n\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.\n   */\n  public async getToken(abortSignal?: AbortSignalLike): Promise<AccessToken> {\n    this.throwIfDisposed();\n    const token = await this.userCredential.getToken(abortSignal);\n    this.throwIfDisposed();\n    return token;\n  }\n\n  /**\n   * Disposes the CommunicationUserCredential and cancels any internal auto-refresh operation.\n   */\n  public dispose(): void {\n    this.disposed = true;\n    this.userCredential.dispose();\n  }\n\n  private throwIfDisposed(): void {\n    if (this.disposed) {\n      throw new Error(\"User credential is disposed\");\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}