{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{hiddenFullScreenStyle,fullScreenStyle,loadingStyle}from'./styles/MediaFullScreen.styles';import{Renderer}from'@azure/communication-calling';import{Spinner,SpinnerSize}from'@fluentui/react';import{utils}from'Utils/Utils';export default(function(props){var _props$activeScreenSh;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var fullScreenStreamMediaId='fullScreenStreamMediaId';var rendererView;/**\r\n   * Start stream after DOM has rendered\r\n   */var activeScreenShareStream=props.activeScreenShareStream;var renderStream=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var stream,renderer,container;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(activeScreenShareStream&&activeScreenShareStream.stream)){_context.next=10;break;}stream=activeScreenShareStream.stream;renderer=new Renderer(stream);_context.next=5;return renderer.createView({scalingMode:'Fit'});case 5:rendererView=_context.sent;container=document.getElementById(fullScreenStreamMediaId);if(container&&container.childElementCount===0){setLoading(false);container.appendChild(rendererView.target);}_context.next=11;break;case 10:if(rendererView){rendererView.dispose();}case 11:case\"end\":return _context.stop();}}},_callee);}));return function renderStream(){return _ref.apply(this,arguments);};}();useEffect(function(){renderStream();},[activeScreenShareStream,renderStream]);var displayName=(_props$activeScreenSh=props.activeScreenShareStream.user.displayName)!==null&&_props$activeScreenSh!==void 0?_props$activeScreenSh:utils.getId(props.activeScreenShareStream.user.identifier);return/*#__PURE__*/React.createElement(React.Fragment,null,loading&&/*#__PURE__*/React.createElement(\"div\",{className:loadingStyle},/*#__PURE__*/React.createElement(Spinner,{label:\"Loading \".concat(displayName,\"'s screen\"),size:SpinnerSize.xSmall})),/*#__PURE__*/React.createElement(\"div\",{id:fullScreenStreamMediaId,className:loading?hiddenFullScreenStyle:fullScreenStyle}));});","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/components/MediaFullScreen.tsx"],"names":["React","useEffect","useState","hiddenFullScreenStyle","fullScreenStyle","loadingStyle","Renderer","Spinner","SpinnerSize","utils","props","loading","setLoading","fullScreenStreamMediaId","rendererView","activeScreenShareStream","renderStream","stream","renderer","createView","scalingMode","container","document","getElementById","childElementCount","appendChild","target","dispose","displayName","user","getId","identifier","xSmall"],"mappings":"2rBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CAEA,OAASC,qBAAT,CAAgCC,eAAhC,CAAiDC,YAAjD,KAAqE,iCAArE,CACA,OAA4BC,QAA5B,KAA0D,8BAA1D,CACA,OAASC,OAAT,CAAkBC,WAAlB,KAAqC,iBAArC,CACA,OAASC,KAAT,KAAsB,aAAtB,CAMA,eAAe,SAACC,KAAD,CAA8C,yCAC7BR,QAAQ,CAAC,IAAD,CADqB,wCACpDS,OADoD,eAC3CC,UAD2C,eAE3D,GAAMC,CAAAA,uBAAuB,CAAG,yBAAhC,CACA,GAAIC,CAAAA,YAAJ,CAEA;;KAIA,GAAMC,CAAAA,uBAAuB,CAAGL,KAAK,CAACK,uBAAtC,CAEA,GAAMC,CAAAA,YAAY,0FAAG,sKACfD,uBAAuB,EAAIA,uBAAuB,CAACE,MADpC,2BAEbA,MAFa,CAEeF,uBAAuB,CAACE,MAFvC,CAGbC,QAHa,CAGQ,GAAIZ,CAAAA,QAAJ,CAAaW,MAAb,CAHR,uBAIIC,CAAAA,QAAQ,CAACC,UAAT,CAAoB,CAAEC,WAAW,CAAE,KAAf,CAApB,CAJJ,QAIjBN,YAJiB,eAMbO,SANa,CAMDC,QAAQ,CAACC,cAAT,CAAwBV,uBAAxB,CANC,CAOjB,GAAIQ,SAAS,EAAIA,SAAS,CAACG,iBAAV,GAAgC,CAAjD,CAAoD,CAClDZ,UAAU,CAAC,KAAD,CAAV,CACAS,SAAS,CAACI,WAAV,CAAsBX,YAAY,CAACY,MAAnC,EACD,CAVgB,+BAYjB,GAAIZ,YAAJ,CAAkB,CAChBA,YAAY,CAACa,OAAb,GACD,CAdgB,uDAAH,kBAAZX,CAAAA,YAAY,0CAAlB,CAiBAf,SAAS,CAAC,UAAM,CACde,YAAY,GACb,CAFQ,CAEN,CAACD,uBAAD,CAA0BC,YAA1B,CAFM,CAAT,CAIA,GAAMY,CAAAA,WAAW,wBACflB,KAAK,CAACK,uBAAN,CAA8Bc,IAA9B,CAAmCD,WADpB,+DACmCnB,KAAK,CAACqB,KAAN,CAAYpB,KAAK,CAACK,uBAAN,CAA8Bc,IAA9B,CAAmCE,UAA/C,CADpD,CAGA,mBACE,wCACGpB,OAAO,eACN,2BAAK,SAAS,CAAEN,YAAhB,eACE,oBAAC,OAAD,EAAS,KAAK,mBAAauB,WAAb,aAAd,CAAmD,IAAI,CAAEpB,WAAW,CAACwB,MAArE,EADF,CAFJ,cAME,2BAAK,EAAE,CAAEnB,uBAAT,CAAkC,SAAS,CAAEF,OAAO,CAAGR,qBAAH,CAA2BC,eAA/E,EANF,CADF,CAUD,CA7CD","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { ParticipantStream } from '../core/reducers';\r\nimport { hiddenFullScreenStyle, fullScreenStyle, loadingStyle } from './styles/MediaFullScreen.styles';\r\nimport { RemoteVideoStream, Renderer, RendererView } from '@azure/communication-calling';\r\nimport { Spinner, SpinnerSize } from '@fluentui/react';\r\nimport { utils } from 'Utils/Utils';\r\n\r\nexport interface MediaFullScreenProps {\r\n  activeScreenShareStream: ParticipantStream;\r\n}\r\n\r\nexport default (props: MediaFullScreenProps): JSX.Element => {\r\n  const [loading, setLoading] = useState(true);\r\n  const fullScreenStreamMediaId = 'fullScreenStreamMediaId';\r\n  let rendererView: RendererView;\r\n\r\n  /**\r\n   * Start stream after DOM has rendered\r\n   */\r\n\r\n  const activeScreenShareStream = props.activeScreenShareStream;\r\n\r\n  const renderStream = async () => {\r\n    if (activeScreenShareStream && activeScreenShareStream.stream) {\r\n      let stream: RemoteVideoStream = activeScreenShareStream.stream;\r\n      var renderer: Renderer = new Renderer(stream);\r\n      rendererView = await renderer.createView({ scalingMode: 'Fit' });\r\n\r\n      let container = document.getElementById(fullScreenStreamMediaId);\r\n      if (container && container.childElementCount === 0) {\r\n        setLoading(false);\r\n        container.appendChild(rendererView.target);\r\n      }\r\n    } else {\r\n      if (rendererView) {\r\n        rendererView.dispose();\r\n      }\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    renderStream();\r\n  }, [activeScreenShareStream, renderStream]);\r\n\r\n  const displayName =\r\n    props.activeScreenShareStream.user.displayName ?? utils.getId(props.activeScreenShareStream.user.identifier);\r\n\r\n  return (\r\n    <>\r\n      {loading && (\r\n        <div className={loadingStyle}>\r\n          <Spinner label={`Loading ${displayName}'s screen`} size={SpinnerSize.xSmall} />\r\n        </div>\r\n      )}\r\n      <div id={fullScreenStreamMediaId} className={loading ? hiddenFullScreenStyle : fullScreenStyle}></div>\r\n    </>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}