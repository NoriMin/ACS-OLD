{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { AzureKeyCredential } from \"@azure/core-auth\"; // TODO: update when connection string format is finalized\n\nvar CONNECTION_STRING_REGEX = /endpoint=(.*);accesskey=(.*)/i;\n\nvar tryParseConnectionString = function tryParseConnectionString(s) {\n  var match = s.match(CONNECTION_STRING_REGEX);\n\n  if ((match === null || match === void 0 ? void 0 : match[1]) && match[2]) {\n    return {\n      endpoint: match[1],\n      credential: new AzureKeyCredential(match[2])\n    };\n  }\n\n  return undefined;\n};\n\nexport var parseConnectionString = function parseConnectionString(connectionString) {\n  var parsedConnectionString = tryParseConnectionString(connectionString);\n\n  if (parsedConnectionString) {\n    return parsedConnectionString;\n  } else {\n    throw new Error(\"Invalid connection string \".concat(connectionString));\n  }\n};","map":{"version":3,"sources":["../../../src/credential/connectionString.ts"],"names":[],"mappings":"AAAA;AACA;AAEA,SAAS,kBAAT,QAAkD,kBAAlD,C,CAOA;;AACA,IAAM,uBAAuB,GAAG,+BAAhC;;AAEA,IAAM,wBAAwB,GAAG,SAA3B,wBAA2B,CAAC,CAAD,EAA8C;AAC7E,MAAM,KAAK,GAAG,CAAC,CAAC,KAAF,CAAQ,uBAAR,CAAd;;AACA,MAAI,CAAA,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAG,CAAH,CAAL,KAAc,KAAK,CAAC,CAAD,CAAvB,EAA4B;AAC1B,WAAO;AAAE,MAAA,QAAQ,EAAE,KAAK,CAAC,CAAD,CAAjB;AAAsB,MAAA,UAAU,EAAE,IAAI,kBAAJ,CAAuB,KAAK,CAAC,CAAD,CAA5B;AAAlC,KAAP;AACD;;AACD,SAAO,SAAP;AACD,CAND;;AAQA,OAAO,IAAM,qBAAqB,GAAG,SAAxB,qBAAwB,CAAC,gBAAD,EAAiD;AACpF,MAAM,sBAAsB,GAAG,wBAAwB,CAAC,gBAAD,CAAvD;;AACA,MAAI,sBAAJ,EAA4B;AAC1B,WAAO,sBAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAI,KAAJ,qCAAuC,gBAAvC,EAAN;AACD;AACF,CAPM","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureKeyCredential, KeyCredential } from \"@azure/core-auth\";\n\nexport interface EndpointCredential {\n  endpoint: string;\n  credential: KeyCredential;\n}\n\n// TODO: update when connection string format is finalized\nconst CONNECTION_STRING_REGEX = /endpoint=(.*);accesskey=(.*)/i;\n\nconst tryParseConnectionString = (s: string): EndpointCredential | undefined => {\n  const match = s.match(CONNECTION_STRING_REGEX);\n  if (match?.[1] && match[2]) {\n    return { endpoint: match[1], credential: new AzureKeyCredential(match[2]) };\n  }\n  return undefined;\n};\n\nexport const parseConnectionString = (connectionString: string): EndpointCredential => {\n  const parsedConnectionString = tryParseConnectionString(connectionString);\n  if (parsedConnectionString) {\n    return parsedConnectionString;\n  } else {\n    throw new Error(`Invalid connection string ${connectionString}`);\n  }\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}