{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { __awaiter } from \"tslib\";\nimport { parseToken } from \"./tokenParser\";\nimport { StaticTokenCredential } from \"./staticTokenCredential\";\nimport { AutoRefreshUserCredential } from \"./autoRefreshUserCredential\";\n/**\n * The CommunicationUserCredential implementation with support for proactive token refresh.\n */\n\nexport var AzureCommunicationUserCredential = /*#__PURE__*/function () {\n  function AzureCommunicationUserCredential(tokenOrRefreshOptions) {\n    _classCallCheck(this, AzureCommunicationUserCredential);\n\n    this.disposed = false;\n\n    if (typeof tokenOrRefreshOptions === \"string\") {\n      this.userCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptions));\n    } else {\n      this.userCredential = new AutoRefreshUserCredential(tokenOrRefreshOptions);\n    }\n  }\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.\n   */\n\n\n  _createClass(AzureCommunicationUserCredential, [{\n    key: \"getToken\",\n    value: function getToken(abortSignal) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var token;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.throwIfDisposed();\n                _context.next = 3;\n                return this.userCredential.getToken(abortSignal);\n\n              case 3:\n                token = _context.sent;\n                this.throwIfDisposed();\n                return _context.abrupt(\"return\", token);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Disposes the CommunicationUserCredential and cancels any internal auto-refresh operation.\n     */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this.disposed = true;\n      this.userCredential.dispose();\n    }\n  }, {\n    key: \"throwIfDisposed\",\n    value: function throwIfDisposed() {\n      if (this.disposed) {\n        throw new Error(\"User credential is disposed\");\n      }\n    }\n  }]);\n\n  return AzureCommunicationUserCredential;\n}();","map":{"version":3,"sources":["../../src/communicationUserCredential.ts"],"names":[],"mappings":";;;AAAA;AACA;;AAGA,SAAS,UAAT,QAA2B,eAA3B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,yBAAT,QAA0D,6BAA1D;AAmBA;;;;AAGA,WAAa,gCAAb;AAeE,4CAAY,qBAAZ,EAA0D;AAAA;;AAblD,SAAA,QAAA,GAAW,KAAX;;AAcN,QAAI,OAAO,qBAAP,KAAiC,QAArC,EAA+C;AAC7C,WAAK,cAAL,GAAsB,IAAI,qBAAJ,CAA0B,UAAU,CAAC,qBAAD,CAApC,CAAtB;AACD,KAFD,MAEO;AACL,WAAK,cAAL,GAAsB,IAAI,yBAAJ,CAA8B,qBAA9B,CAAtB;AACD;AACF;AAED;;;;;;AAvBF;AAAA;AAAA,6BA2BwB,WA3BxB,EA2BqD;;;;;;;AACjD,qBAAK,eAAL;;AACc,uBAAM,KAAK,cAAL,CAAoB,QAApB,CAA6B,WAA7B,CAAN;;;AAAR,gBAAA,K;AACN,qBAAK,eAAL;iDACO,K;;;;;;;;;AACR;AAED;;;;AAlCF;AAAA;AAAA,8BAqCgB;AACZ,WAAK,QAAL,GAAgB,IAAhB;AACA,WAAK,cAAL,CAAoB,OAApB;AACD;AAxCH;AAAA;AAAA,sCA0CyB;AACrB,UAAI,KAAK,QAAT,EAAmB;AACjB,cAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD;AACF;AA9CH;;AAAA;AAAA","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignalLike, AccessToken } from \"@azure/core-http\";\nimport { parseToken } from \"./tokenParser\";\nimport { StaticTokenCredential } from \"./staticTokenCredential\";\nimport { AutoRefreshUserCredential, RefreshOptions } from \"./autoRefreshUserCredential\";\n\nexport type UserCredential = Pick<AzureCommunicationUserCredential, \"getToken\" | \"dispose\">;\n\n/**\n * The Azure Communication Services User token credential.\n */\nexport interface CommunicationUserCredential {\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.\n   */\n  getToken(abortSignal?: AbortSignalLike): Promise<AccessToken>;\n  /**\n   * Disposes the CommunicationUserCredential and cancels any internal auto-refresh operation.\n   */\n  dispose(): void;\n}\n\n/**\n * The CommunicationUserCredential implementation with support for proactive token refresh.\n */\nexport class AzureCommunicationUserCredential implements CommunicationUserCredential {\n  private readonly userCredential: UserCredential;\n  private disposed = false;\n\n  /**\n   * Creates an instance of CommunicationUserCredential with a static token and no proactive refreshing.\n   * @param token A user access token issued by Communication Services.\n   */\n  constructor(token: string);\n  /**\n   * Creates an instance of CommunicationUserCredential with a lambda to get a token and options\n   * to configure proactive refreshing.\n   * @param refreshOptions Options to configure refresh and opt-in to proactive refreshing.\n   */\n  constructor(refreshOptions: RefreshOptions);\n  constructor(tokenOrRefreshOptions: string | RefreshOptions) {\n    if (typeof tokenOrRefreshOptions === \"string\") {\n      this.userCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptions));\n    } else {\n      this.userCredential = new AutoRefreshUserCredential(tokenOrRefreshOptions);\n    }\n  }\n\n  /**\n   * Gets an `AccessToken` for the user. Throws if already disposed.\n   * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.\n   */\n  public async getToken(abortSignal?: AbortSignalLike): Promise<AccessToken> {\n    this.throwIfDisposed();\n    const token = await this.userCredential.getToken(abortSignal);\n    this.throwIfDisposed();\n    return token;\n  }\n\n  /**\n   * Disposes the CommunicationUserCredential and cancels any internal auto-refresh operation.\n   */\n  public dispose(): void {\n    this.disposed = true;\n    this.userCredential.dispose();\n  }\n\n  private throwIfDisposed(): void {\n    if (this.disposed) {\n      throw new Error(\"User credential is disposed\");\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}