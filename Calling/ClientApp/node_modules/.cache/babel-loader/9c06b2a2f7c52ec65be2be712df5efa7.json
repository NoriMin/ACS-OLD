{"ast":null,"code":"import _createForOfIteratorHelper from \"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\n// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nexport var encodeUTF8 = function encodeUTF8(str) {\n  return new TextEncoder().encode(str);\n};\nexport function encodeUTF8fromBase64(str) {\n  if (typeof atob !== \"function\") {\n    throw new Error(\"Your browser environment is missing the global `atob` function\");\n  }\n\n  var binary = atob(str);\n  var bytes = new Uint8Array(binary.length);\n\n  for (var i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n\n  return bytes;\n}\nexport function encodeBase64(value) {\n  if (typeof btoa !== \"function\") {\n    throw new Error(\"Your browser environment is missing the global `btoa` function\");\n  }\n\n  var bytes = new Uint8Array(value);\n  var binary = \"\";\n\n  var _iterator = _createForOfIteratorHelper(bytes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var byte = _step.value;\n      binary += String.fromCharCode(byte);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return btoa(binary);\n}","map":{"version":3,"sources":["../../../src/credential/encodeUtils.browser.ts"],"names":[],"mappings":";AAAA;AACA;AAEA,OAAO,IAAM,UAAU,GAAG,SAAb,UAAa,CAAC,GAAD;AAAA,SAA6B,IAAI,WAAJ,GAAkB,MAAlB,CAAyB,GAAzB,CAA7B;AAAA,CAAnB;AAEP,OAAM,SAAU,oBAAV,CAA+B,GAA/B,EAA0C;AAC9C,MAAI,OAAO,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAU,gEAAV,CAAN;AACD;;AACD,MAAM,MAAM,GAAG,IAAI,CAAC,GAAD,CAAnB;AACA,MAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,MAAM,CAAC,MAAtB,CAAd;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAAM,CAAC,MAA3B,EAAmC,CAAC,EAApC,EAAwC;AACtC,IAAA,KAAK,CAAC,CAAD,CAAL,GAAW,MAAM,CAAC,UAAP,CAAkB,CAAlB,CAAX;AACD;;AACD,SAAO,KAAP;AACD;AAED,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAyC;AAC7C,MAAI,OAAO,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAM,IAAI,KAAJ,CAAU,gEAAV,CAAN;AACD;;AACD,MAAM,KAAK,GAAG,IAAI,UAAJ,CAAe,KAAf,CAAd;AACA,MAAI,MAAM,GAAG,EAAb;;AAL6C,6CAM1B,KAN0B;AAAA;;AAAA;AAM7C,wDAA0B;AAAA,UAAf,IAAe;AACxB,MAAA,MAAM,IAAI,MAAM,CAAC,YAAP,CAAoB,IAApB,CAAV;AACD;AAR4C;AAAA;AAAA;AAAA;AAAA;;AAS7C,SAAO,IAAI,CAAC,MAAD,CAAX;AACD","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const encodeUTF8 = (str: string): Uint8Array => new TextEncoder().encode(str);\n\nexport function encodeUTF8fromBase64(str: string): Uint8Array {\n  if (typeof atob !== \"function\") {\n    throw new Error(\"Your browser environment is missing the global `atob` function\");\n  }\n  const binary = atob(str);\n  const bytes = new Uint8Array(binary.length);\n  for (let i = 0; i < binary.length; i++) {\n    bytes[i] = binary.charCodeAt(i);\n  }\n  return bytes;\n}\n\nexport function encodeBase64(value: ArrayBuffer): string {\n  if (typeof btoa !== \"function\") {\n    throw new Error(\"Your browser environment is missing the global `btoa` function\");\n  }\n  const bytes = new Uint8Array(value);\n  let binary = \"\";\n  for (const byte of bytes) {\n    binary += String.fromCharCode(byte);\n  }\n  return btoa(binary);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}