{"ast":null,"code":"import { connect } from 'react-redux';\nimport GroupCall from '../components/GroupCall';\nimport { joinGroup, setMicrophone } from '../core/sideEffects';\nimport { setLocalVideoStream } from '../core/actions/streams';\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\n\nconst mapStateToProps = (state, props) => ({\n  userId: state.sdk.userId || props.userId,\n  callAgent: state.calls.callAgent,\n  group: state.calls.group,\n  screenWidth: props.screenWidth,\n  call: state.calls.call,\n  shareScreen: state.controls.shareScreen,\n  mic: state.controls.mic,\n  groupCallEndReason: state.calls.groupCallEndReason,\n  isGroup: () => state.calls.call && !state.calls.call.isIncoming && !!state.calls.group,\n  joinGroup: () => {\n    state.calls.callAgent && joinGroup(state.calls.callAgent, {\n      groupId: state.calls.group\n    }, {\n      audioOptions: {\n        muted: !state.controls.mic\n      }\n    });\n  },\n  remoteParticipants: state.calls.remoteParticipants,\n  streams: state.streams.streams,\n  callState: state.calls.callState,\n  localVideo: state.controls.localVideo,\n  localVideoStream: state.streams.localVideoStream,\n  screenShareStreams: state.streams.screenShareStreams,\n  videoDeviceInfo: state.devices.videoDeviceInfo,\n  audioDeviceInfo: state.devices.audioDeviceInfo,\n  videoDeviceList: state.devices.videoDeviceList,\n  audioDeviceList: state.devices.audioDeviceList,\n  cameraPermission: state.devices.cameraPermission,\n  microphonePermission: state.devices.microphonePermission\n});\n\nconst mapDispatchToProps = dispatch => ({\n  mute: () => dispatch(setMicrophone(false)),\n  setAudioDeviceInfo: deviceInfo => dispatch(setAudioDeviceInfo(deviceInfo)),\n  setVideoDeviceInfo: deviceInfo => {\n    dispatch(setVideoDeviceInfo(deviceInfo));\n  },\n  setLocalVideoStream: localVideoStream => dispatch(setLocalVideoStream(localVideoStream))\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport default connector(GroupCall);","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/containers/GroupCall.ts"],"names":["connect","GroupCall","joinGroup","setMicrophone","setLocalVideoStream","setVideoDeviceInfo","setAudioDeviceInfo","mapStateToProps","state","props","userId","sdk","callAgent","calls","group","screenWidth","call","shareScreen","controls","mic","groupCallEndReason","isGroup","isIncoming","groupId","audioOptions","muted","remoteParticipants","streams","callState","localVideo","localVideoStream","screenShareStreams","videoDeviceInfo","devices","audioDeviceInfo","videoDeviceList","audioDeviceList","cameraPermission","microphonePermission","mapDispatchToProps","dispatch","mute","deviceInfo","connector"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\r\nimport GroupCall, { GroupCallProps } from '../components/GroupCall';\r\nimport { joinGroup, setMicrophone } from '../core/sideEffects';\r\nimport { setLocalVideoStream } from '../core/actions/streams';\r\nimport { setVideoDeviceInfo, setAudioDeviceInfo } from '../core/actions/devices';\r\nimport { AudioDeviceInfo, VideoDeviceInfo, LocalVideoStream } from '@azure/communication-calling';\r\nimport { State } from '../core/reducers';\r\n\r\nconst mapStateToProps = (state: State, props: GroupCallProps) => ({\r\n  userId: state.sdk.userId || props.userId,\r\n  callAgent: state.calls.callAgent,\r\n  group: state.calls.group,\r\n  screenWidth: props.screenWidth,\r\n  call: state.calls.call,\r\n  shareScreen: state.controls.shareScreen,\r\n  mic: state.controls.mic,\r\n  groupCallEndReason: state.calls.groupCallEndReason,\r\n  isGroup: () => state.calls.call && !state.calls.call.isIncoming && !!state.calls.group,\r\n  joinGroup: () => {\r\n    state.calls.callAgent &&\r\n      joinGroup(\r\n        state.calls.callAgent,\r\n        {\r\n          groupId: state.calls.group\r\n        },\r\n        {\r\n          audioOptions: { muted: !state.controls.mic }\r\n        }\r\n      );\r\n  },\r\n  remoteParticipants: state.calls.remoteParticipants,\r\n  streams: state.streams.streams,\r\n  callState: state.calls.callState,\r\n  localVideo: state.controls.localVideo,\r\n  localVideoStream: state.streams.localVideoStream,\r\n  screenShareStreams: state.streams.screenShareStreams,\r\n  videoDeviceInfo: state.devices.videoDeviceInfo,\r\n  audioDeviceInfo: state.devices.audioDeviceInfo,\r\n  videoDeviceList: state.devices.videoDeviceList,\r\n  audioDeviceList: state.devices.audioDeviceList,\r\n  cameraPermission: state.devices.cameraPermission,\r\n  microphonePermission: state.devices.microphonePermission\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: any) => ({\r\n  mute: () => dispatch(setMicrophone(false)),\r\n  setAudioDeviceInfo: (deviceInfo: AudioDeviceInfo) => dispatch(setAudioDeviceInfo(deviceInfo)),\r\n  setVideoDeviceInfo: (deviceInfo: VideoDeviceInfo) => {\r\n    dispatch(setVideoDeviceInfo(deviceInfo));\r\n  },\r\n  setLocalVideoStream: (localVideoStream: LocalVideoStream) => dispatch(setLocalVideoStream(localVideoStream))\r\n});\r\n\r\nconst connector: any = connect(mapStateToProps, mapDispatchToProps);\r\nexport default connector(GroupCall);\r\n"]},"metadata":{},"sourceType":"module"}