{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _findIndex from \"lodash/findIndex\";\nimport _isNil from \"lodash/isNil\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _isNumber from \"lodash/isNumber\";\nimport _invoke from \"lodash/invoke\";\nimport _debounce from \"lodash/debounce\";\nimport _uniqueId from \"lodash/uniqueId\";\nimport _get from \"lodash/get\";\nimport _isFunction from \"lodash/isFunction\";\nimport _map from \"lodash/map\";\nimport _differenceBy from \"lodash/differenceBy\";\nimport { getElementType, useAutoControlled, useStyles, useUnhandledProps, useFluentContext, useTelemetry } from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport computeScrollIntoView from 'compute-scroll-into-view';\nimport Downshift from 'downshift';\nimport { commonPropTypes, isFromKeyboard as detectIsFromKeyboard, createShorthand } from '../../utils';\nimport { List } from '../List/List';\nimport { DropdownItem } from './DropdownItem';\nimport { DropdownSelectedItem } from './DropdownSelectedItem';\nimport { DropdownSearchInput } from './DropdownSearchInput';\nimport { Button } from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { Box } from '../Box/Box';\nimport { Portal } from '../Portal/Portal';\nimport { ALIGNMENTS, POSITIONS, Popper, partitionPopperPropsFromShorthand } from '../../utils/positioner';\nexport var dropdownClassName = 'ui-dropdown';\nexport var dropdownSlotClassNames = {\n  clearIndicator: dropdownClassName + \"__clear-indicator\",\n  container: dropdownClassName + \"__container\",\n  toggleIndicator: dropdownClassName + \"__toggle-indicator\",\n  item: dropdownClassName + \"__item\",\n  itemsList: dropdownClassName + \"__items-list\",\n  searchInput: dropdownClassName + \"__searchinput\",\n  selectedItem: dropdownClassName + \"__selecteditem\",\n  selectedItems: dropdownClassName + \"__selected-items\",\n  triggerButton: dropdownClassName + \"__trigger-button\"\n};\nvar a11yStatusCleanupTime = 500;\nvar charKeyPressedCleanupTime = 500;\n/** `normalizedValue` should be normalized always as it can be received from props */\n\nfunction normalizeValue(multiple, rawValue) {\n  var normalizedValue = Array.isArray(rawValue) ? rawValue : [rawValue];\n  return multiple ? normalizedValue : normalizedValue.slice(0, 1);\n}\n/**\n * Used to compute the filtered items (by value and search query) and, if needed,\n * their string equivalents, in order to be used throughout the component.\n */\n\n\nfunction getFilteredValues(options) {\n  var items = options.items,\n      itemToString = options.itemToString,\n      itemToValue = options.itemToValue,\n      multiple = options.multiple,\n      search = options.search,\n      searchQuery = options.searchQuery,\n      value = options.value;\n  var filteredItemsByValue = multiple ? _differenceBy(items, value, itemToValue) : items;\n\n  var filteredItemStrings = _map(filteredItemsByValue, function (filteredItem) {\n    return itemToString(filteredItem).toLowerCase();\n  });\n\n  if (search) {\n    if (_isFunction(search)) {\n      return {\n        filteredItems: search(filteredItemsByValue, searchQuery),\n        filteredItemStrings: filteredItemStrings\n      };\n    }\n\n    return {\n      filteredItems: filteredItemsByValue.filter(function (item) {\n        return itemToString(item).toLowerCase().indexOf(searchQuery.toLowerCase()) !== -1;\n      }),\n      filteredItemStrings: filteredItemStrings\n    };\n  }\n\n  return {\n    filteredItems: filteredItemsByValue,\n    filteredItemStrings: filteredItemStrings\n  };\n}\n\nvar isEmpty = function isEmpty(prop) {\n  return typeof prop === 'object' && !prop.props && !_get(prop, 'children') && !_get(prop, 'content');\n};\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n */\n\n\nexport var Dropdown = /*#__PURE__*/function () {\n  var Dropdown = function Dropdown(props) {\n    var _context$target;\n\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Dropdown.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var align = props.align,\n        ariaLabelledby = props['aria-labelledby'],\n        clearable = props.clearable,\n        clearIndicator = props.clearIndicator,\n        checkable = props.checkable,\n        checkableIndicator = props.checkableIndicator,\n        className = props.className,\n        design = props.design,\n        disabled = props.disabled,\n        error = props.error,\n        fluid = props.fluid,\n        getA11ySelectionMessage = props.getA11ySelectionMessage,\n        getA11yStatusMessage = props.getA11yStatusMessage,\n        inline = props.inline,\n        inverted = props.inverted,\n        itemToString = props.itemToString,\n        itemToValue = props.itemToValue,\n        items = props.items,\n        highlightFirstItemOnOpen = props.highlightFirstItemOnOpen,\n        multiple = props.multiple,\n        headerMessage = props.headerMessage,\n        moveFocusOnTab = props.moveFocusOnTab,\n        noResultsMessage = props.noResultsMessage,\n        loading = props.loading,\n        loadingMessage = props.loadingMessage,\n        placeholder = props.placeholder,\n        position = props.position,\n        offset = props.offset,\n        renderItem = props.renderItem,\n        renderSelectedItem = props.renderSelectedItem,\n        search = props.search,\n        searchInput = props.searchInput,\n        styles = props.styles,\n        toggleIndicator = props.toggleIndicator,\n        triggerButton = props.triggerButton,\n        unstable_pinned = props.unstable_pinned,\n        variables = props.variables;\n\n    var _partitionPopperProps = partitionPopperPropsFromShorthand(props.list),\n        list = _partitionPopperProps[0],\n        positioningProps = _partitionPopperProps[1];\n\n    var buttonRef = React.useRef();\n\n    var _inputRef = React.useRef();\n\n    var listRef = React.useRef();\n    var selectedItemsRef = React.useRef();\n    var containerRef = React.useRef();\n    var defaultTriggerButtonId = React.useMemo(function () {\n      return _uniqueId('dropdown-trigger-button-');\n    }, []);\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Dropdown.handledProps, props);\n\n    var _useAutoControlled = useAutoControlled({\n      defaultValue: props.defaultActiveSelectedIndex,\n      initialValue: multiple ? null : undefined,\n      value: props.activeSelectedIndex\n    }),\n        activeSelectedIndex = _useAutoControlled[0],\n        setActiveSelectedIndex = _useAutoControlled[1];\n\n    var _useAutoControlled2 = useAutoControlled({\n      defaultValue: props.defaultHighlightedIndex,\n      initialValue: highlightFirstItemOnOpen ? 0 : null,\n      value: props.highlightedIndex\n    }),\n        highlightedIndex = _useAutoControlled2[0],\n        setHighlightedIndex = _useAutoControlled2[1];\n\n    var _useAutoControlled3 = useAutoControlled({\n      defaultValue: props.defaultOpen,\n      initialValue: false,\n      value: props.open\n    }),\n        open = _useAutoControlled3[0],\n        setOpen = _useAutoControlled3[1];\n\n    var _useAutoControlled4 = useAutoControlled({\n      defaultValue: props.defaultSearchQuery,\n      initialValue: search ? '' : undefined,\n      value: props.searchQuery\n    }),\n        searchQuery = _useAutoControlled4[0],\n        setSearchQuery = _useAutoControlled4[1];\n\n    var _useAutoControlled5 = useAutoControlled({\n      defaultValue: props.defaultValue,\n      initialValue: [],\n      value: props.value\n    }),\n        rawValue = _useAutoControlled5[0],\n        setValue = _useAutoControlled5[1];\n\n    var value = normalizeValue(multiple, rawValue);\n\n    var _React$useState = React.useState(''),\n        a11ySelectionStatus = _React$useState[0],\n        setA11ySelectionStatus = _React$useState[1];\n\n    var _React$useState2 = React.useState(false),\n        focused = _React$useState2[0],\n        setFocused = _React$useState2[1];\n\n    var _React$useState3 = React.useState(false),\n        isFromKeyboard = _React$useState3[0],\n        setIsFromKeyboard = _React$useState3[1];\n\n    var _React$useState4 = React.useState(false),\n        itemIsFromKeyboard = _React$useState4[0],\n        setItemIsFromKeyboard = _React$useState4[1];\n\n    var _React$useState5 = React.useState(search ? undefined : ''),\n        startingString = _React$useState5[0],\n        setStartingString = _React$useState5[1];\n\n    var _getFilteredValues = getFilteredValues({\n      itemToString: itemToString,\n      itemToValue: itemToValue,\n      items: items,\n      multiple: multiple,\n      search: search,\n      searchQuery: searchQuery,\n      value: value\n    }),\n        filteredItems = _getFilteredValues.filteredItems,\n        filteredItemStrings = _getFilteredValues.filteredItemStrings;\n\n    var _useStyles = useStyles(Dropdown.displayName, {\n      className: dropdownClassName,\n      mapPropsToStyles: function mapPropsToStyles() {\n        return {\n          disabled: disabled,\n          error: error,\n          fluid: fluid,\n          focused: focused,\n          isEmptyClearIndicator: isEmpty(clearIndicator),\n          hasToggleIndicator: !!toggleIndicator,\n          inline: inline,\n          inverted: inverted,\n          isFromKeyboard: isFromKeyboard,\n          multiple: multiple,\n          open: open,\n          position: position,\n          search: !!search\n        };\n      },\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes,\n        resolvedStyles = _useStyles.styles;\n\n    var clearA11ySelectionMessage = React.useMemo(function () {\n      return _debounce(function () {\n        setA11ySelectionStatus('');\n      }, a11yStatusCleanupTime);\n    }, []);\n    var clearStartingString = React.useMemo(function () {\n      return _debounce(function () {\n        setStartingString('');\n      }, charKeyPressedCleanupTime);\n    }, []);\n\n    var handleChange = function handleChange(e) {\n      // Dropdown component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      _invoke(props, 'onChange', e, Object.assign({}, props, {\n        value: value\n      }));\n    };\n\n    var handleOnBlur = function handleOnBlur(e) {\n      // Dropdown component doesn't present any `input` component in markup, however all of our\n      // components should handle events transparently.\n      if (e.target !== buttonRef.current) {\n        _invoke(props, 'onBlur', e, props);\n      }\n    };\n\n    var renderTriggerButton = function renderTriggerButton(getToggleButtonProps) {\n      var content = getSelectedItemAsString(value[0]);\n      var triggerButtonId = triggerButton['id'] || defaultTriggerButtonId;\n      var triggerButtonProps = getToggleButtonProps({\n        disabled: disabled,\n        onFocus: handleTriggerButtonOrListFocus,\n        onBlur: handleTriggerButtonBlur,\n        onKeyDown: function onKeyDown(e) {\n          handleTriggerButtonKeyDown(e);\n        },\n        'aria-label': undefined,\n        'aria-labelledby': [ariaLabelledby, triggerButtonId].filter(function (l) {\n          return !!l;\n        }).join(' ')\n      });\n\n      var _onClick = triggerButtonProps.onClick,\n          _onFocus = triggerButtonProps.onFocus,\n          _onBlur = triggerButtonProps.onBlur,\n          _onKeyDown = triggerButtonProps.onKeyDown,\n          restTriggerButtonProps = _objectWithoutPropertiesLoose(triggerButtonProps, [\"onClick\", \"onFocus\", \"onBlur\", \"onKeyDown\"]);\n\n      return /*#__PURE__*/React.createElement(Ref, {\n        innerRef: buttonRef\n      }, createShorthand(Button, triggerButton, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            className: dropdownSlotClassNames.triggerButton,\n            content: content,\n            disabled: disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: resolvedStyles.triggerButton\n          }, restTriggerButtonProps);\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            onClick: function onClick(e) {\n              _onClick(e);\n\n              _invoke(predefinedProps, 'onClick', e, predefinedProps);\n            },\n            onFocus: function onFocus(e) {\n              _onFocus(e);\n\n              _invoke(predefinedProps, 'onFocus', e, predefinedProps);\n            },\n            onBlur: function onBlur(e) {\n              if (!disabled) {\n                _onBlur(e);\n              }\n\n              _invoke(predefinedProps, 'onBlur', e, predefinedProps);\n            },\n            onKeyDown: function onKeyDown(e) {\n              if (!disabled) {\n                _onKeyDown(e);\n              }\n\n              _invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n            }\n          };\n        }\n      }));\n    };\n\n    var renderSearchInput = function renderSearchInput(accessibilityComboboxProps, highlightedIndex, getInputProps, selectItemAtIndex, toggleMenu, variables) {\n      var noPlaceholder = searchQuery.length > 0 || multiple && value.length > 0;\n      return DropdownSearchInput.create(searchInput || {}, {\n        defaultProps: function defaultProps() {\n          return {\n            className: dropdownSlotClassNames.searchInput,\n            placeholder: noPlaceholder ? '' : placeholder,\n            inline: inline,\n            variables: variables,\n            disabled: disabled\n          };\n        },\n        overrideProps: handleSearchInputOverrides(highlightedIndex, selectItemAtIndex, toggleMenu, accessibilityComboboxProps, getInputProps)\n      });\n    };\n\n    var renderItemsList = function renderItemsList(highlightedIndex, toggleMenu, selectItemAtIndex, getMenuProps, getItemProps, getInputProps) {\n      var items = open ? renderItems(getItemProps) : [];\n\n      var _getMenuProps = getMenuProps({\n        refKey: 'innerRef'\n      }, {\n        suppressRefError: true\n      }),\n          _innerRef = _getMenuProps.innerRef,\n          accessibilityMenuProps = _objectWithoutPropertiesLoose(_getMenuProps, [\"innerRef\"]); // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n\n\n      if (!search) {\n        var accessibilityInputProps = getInputProps();\n        accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n\n        accessibilityMenuProps['onKeyDown'] = function (e) {\n          handleListKeyDown(e, highlightedIndex, accessibilityInputProps['onKeyDown'], toggleMenu, selectItemAtIndex);\n        };\n      }\n\n      return /*#__PURE__*/React.createElement(Ref, {\n        innerRef: function innerRef(listElement) {\n          handleRef(listRef, listElement);\n          handleRef(_innerRef, listElement);\n        }\n      }, /*#__PURE__*/React.createElement(Popper, _extends({\n        align: align,\n        position: position,\n        offset: offset,\n        rtl: context.rtl,\n        enabled: open,\n        targetRef: containerRef,\n        unstable_pinned: unstable_pinned,\n        positioningDependencies: [items.length]\n      }, positioningProps), List.create(list, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            className: dropdownSlotClassNames.itemsList\n          }, accessibilityMenuProps, {\n            styles: resolvedStyles.list,\n            items: items,\n            tabIndex: search ? undefined : -1,\n            // needs to be focused when trigger button is activated.\n            'aria-hidden': !open\n          });\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            onFocus: function onFocus(e, listProps) {\n              handleTriggerButtonOrListFocus();\n\n              _invoke(predefinedProps, 'onClick', e, listProps);\n            },\n            onBlur: function onBlur(e, listProps) {\n              handleListBlur(e);\n\n              _invoke(predefinedProps, 'onBlur', e, listProps);\n            }\n          };\n        }\n      })));\n    };\n\n    var renderItems = function renderItems(getItemProps) {\n      var footerItem = renderItemsListFooter();\n      var headerItem = renderItemsListHeader();\n\n      var items = _map(filteredItems, function (item, index) {\n        return {\n          children: function children() {\n            var selected = value.indexOf(item) !== -1;\n            return DropdownItem.create(item, {\n              defaultProps: function defaultProps() {\n                return Object.assign({\n                  className: dropdownSlotClassNames.item,\n                  active: highlightedIndex === index,\n                  selected: selected,\n                  checkable: checkable,\n                  checkableIndicator: checkableIndicator,\n                  isFromKeyboard: itemIsFromKeyboard,\n                  variables: variables\n                }, typeof item === 'object' && !item.hasOwnProperty('key') && {\n                  key: item.header\n                });\n              },\n              overrideProps: handleItemOverrides(item, index, getItemProps, selected),\n              render: renderItem\n            });\n          }\n        };\n      });\n\n      if (footerItem) {\n        items.push(footerItem);\n      }\n\n      return headerItem ? [headerItem].concat(items) : items;\n    };\n\n    var renderItemsListHeader = function renderItemsListHeader() {\n      if (headerMessage) {\n        return {\n          children: function children() {\n            return DropdownItem.create(headerMessage, {\n              defaultProps: function defaultProps() {\n                return {\n                  key: 'items-list-footer-message',\n                  styles: resolvedStyles.headerMessage\n                };\n              }\n            });\n          }\n        };\n      }\n\n      return null;\n    };\n\n    var renderItemsListFooter = function renderItemsListFooter() {\n      if (loading) {\n        return {\n          children: function children() {\n            return DropdownItem.create(loadingMessage, {\n              defaultProps: function defaultProps() {\n                return {\n                  key: 'loading-message',\n                  styles: resolvedStyles.loadingMessage\n                };\n              }\n            });\n          }\n        };\n      }\n\n      if (filteredItems && filteredItems.length === 0) {\n        return {\n          children: function children() {\n            return DropdownItem.create(noResultsMessage, {\n              defaultProps: function defaultProps() {\n                return {\n                  key: 'no-results-message',\n                  styles: resolvedStyles.noResultsMessage\n                };\n              }\n            });\n          }\n        };\n      }\n\n      return null;\n    };\n\n    var renderSelectedItems = function renderSelectedItems() {\n      if (value.length === 0) {\n        return null;\n      }\n\n      return value.map(function (item, index) {\n        return (// (!) an item matches DropdownItemProps\n          DropdownSelectedItem.create(item, {\n            defaultProps: function defaultProps() {\n              return Object.assign({\n                className: dropdownSlotClassNames.selectedItem,\n                active: isSelectedItemActive(index),\n                variables: variables\n              }, typeof item === 'object' && !item.hasOwnProperty('key') && {\n                key: item.header\n              });\n            },\n            overrideProps: handleSelectedItemOverrides(item),\n            render: renderSelectedItem\n          })\n        );\n      });\n    };\n\n    var downshiftStateReducer = function downshiftStateReducer(state, changes) {\n      var activeElement = context.target.activeElement;\n\n      switch (changes.type) {\n        case Downshift.stateChangeTypes.blurButton:\n          // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n          // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n          if (state.isOpen && activeElement === listRef.current) {\n            return {}; // won't change state in this case.\n          }\n\n          _invoke(props, 'onBlur', null);\n\n        default:\n          return changes;\n      }\n    };\n\n    var handleStateChange = function handleStateChange(changes) {\n      var type = changes.type;\n      var newState = {};\n\n      switch (type) {\n        case Downshift.stateChangeTypes.changeInput:\n          {\n            var shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n            newState.searchQuery = changes.inputValue;\n            newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n\n            if (shouldValueChange) {\n              newState.value = [];\n            }\n\n            if (open) {\n              // we clear value when in single selection user cleared the query.\n              var shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n              if (shouldMenuClose) {\n                newState.open = false;\n              }\n            } else {\n              newState.open = true;\n            }\n\n            break;\n          }\n\n        case Downshift.stateChangeTypes.keyDownEnter:\n        case Downshift.stateChangeTypes.clickItem:\n          var shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n          var isSameItemSelected = changes.selectedItem === undefined;\n          var newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n          newState.searchQuery = getSelectedItemAsString(newValue);\n          newState.open = false;\n          newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n\n          if (!isSameItemSelected) {\n            newState.value = multiple ? [].concat(value, [changes.selectedItem]) : [changes.selectedItem];\n\n            if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n              setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n            }\n          }\n\n          if (multiple) {\n            setTimeout(function () {\n              return selectedItemsRef.current.scrollTop = selectedItemsRef.current.scrollHeight;\n            }, 0);\n          }\n\n          tryFocusTriggerButton();\n          break;\n\n        case Downshift.stateChangeTypes.keyDownEscape:\n          if (search) {\n            newState.searchQuery = '';\n\n            if (!multiple) {\n              newState.value = [];\n            }\n          }\n\n          newState.open = false;\n          newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n          break;\n\n        case Downshift.stateChangeTypes.keyDownArrowDown:\n        case Downshift.stateChangeTypes.keyDownArrowUp:\n          if (changes.isOpen !== undefined) {\n            newState.open = changes.isOpen;\n            newState.highlightedIndex = changes.highlightedIndex;\n\n            if (changes.isOpen) {\n              var highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n              if (_isNumber(highlightedIndexOnArrowKeyOpen)) {\n                newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n              }\n\n              if (!search) {\n                listRef.current.focus();\n              }\n            } else {\n              newState.highlightedIndex = null;\n            }\n          }\n\n        case Downshift.stateChangeTypes['keyDownHome']:\n        case Downshift.stateChangeTypes['keyDownEnd']:\n          if (open && _isNumber(changes.highlightedIndex)) {\n            newState.highlightedIndex = changes.highlightedIndex;\n            newState.itemIsFromKeyboard = true;\n          }\n\n          break;\n\n        case Downshift.stateChangeTypes.mouseUp:\n          if (open) {\n            newState.open = false;\n            newState.highlightedIndex = null;\n          }\n\n          break;\n\n        case Downshift.stateChangeTypes.clickButton:\n        case Downshift.stateChangeTypes.keyDownSpaceButton:\n          newState.open = changes.isOpen;\n\n          if (changes.isOpen) {\n            var _highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_isNumber(_highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = _highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n\n          break;\n\n        case Downshift.stateChangeTypes.itemMouseEnter:\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = false;\n          break;\n\n        case Downshift.stateChangeTypes.unknown:\n          if (changes.selectedItem) {\n            newState.value = multiple ? [].concat(value, [changes.selectedItem]) : [changes.selectedItem];\n            newState.searchQuery = multiple ? '' : changes.inputValue;\n            newState.open = false;\n            newState.highlightedIndex = changes.highlightedIndex;\n            tryFocusTriggerButton();\n          } else {\n            newState.open = changes.isOpen;\n          }\n\n        default:\n          break;\n      }\n\n      if (_isEmpty(newState)) {\n        return;\n      }\n\n      var handlers = [newState.highlightedIndex !== undefined && 'onHighlightedIndexChange', newState.open !== undefined && 'onOpenChange', newState.searchQuery !== undefined && 'onSearchQueryChange', newState.value !== undefined && 'onChange'].filter(Boolean);\n      setStateAndInvokeHandler(handlers, null, newState);\n    };\n\n    var isSelectedItemActive = function isSelectedItemActive(index) {\n      return index === activeSelectedIndex;\n    };\n\n    var handleItemOverrides = function handleItemOverrides(item, index, getItemProps, selected) {\n      return function (predefinedProps) {\n        return {\n          accessibilityItemProps: Object.assign({}, getItemProps({\n            item: item,\n            index: index,\n            disabled: item['disabled'],\n            onClick: function onClick(e) {\n              e.stopPropagation();\n              e.nativeEvent.stopImmediatePropagation();\n\n              _invoke(predefinedProps, 'onClick', e, predefinedProps);\n            }\n          }), !multiple && {\n            'aria-selected': selected\n          })\n        };\n      };\n    };\n\n    var handleSelectedItemOverrides = function handleSelectedItemOverrides(item) {\n      return function (predefinedProps) {\n        return {\n          onRemove: function onRemove(e, dropdownSelectedItemProps) {\n            handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n          },\n          onClick: function onClick(e, dropdownSelectedItemProps) {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: value.indexOf(item)\n            });\n            e.stopPropagation();\n\n            _invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n          },\n          onKeyDown: function onKeyDown(e, dropdownSelectedItemProps) {\n            handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps);\n          }\n        };\n      };\n    };\n\n    var handleSearchInputOverrides = function handleSearchInputOverrides(highlightedIndex, selectItemAtIndex, toggleMenu, accessibilityComboboxProps, getInputProps) {\n      return function (predefinedProps) {\n        var handleInputBlur = function handleInputBlur(e, searchInputProps) {\n          if (!disabled) {\n            setFocused(false);\n            setIsFromKeyboard(detectIsFromKeyboard());\n            e.nativeEvent['preventDownshiftDefault'] = true;\n          }\n\n          _invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n        };\n\n        var handleInputKeyDown = function handleInputKeyDown(e, searchInputProps) {\n          if (!disabled) {\n            switch (getCode(e)) {\n              // https://github.com/downshift-js/downshift/issues/1097\n              // Downshift skips Home/End if Deopdown is opened\n              case keyboardKey.Home:\n                e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n                break;\n\n              case keyboardKey.End:\n                e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n                break;\n\n              case keyboardKey.Tab:\n                e.stopPropagation();\n                handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n                break;\n\n              case keyboardKey.ArrowLeft:\n                e.stopPropagation();\n\n                if (!context.rtl) {\n                  trySetLastSelectedItemAsActive();\n                }\n\n                break;\n\n              case keyboardKey.ArrowRight:\n                e.stopPropagation();\n\n                if (context.rtl) {\n                  trySetLastSelectedItemAsActive();\n                }\n\n                break;\n\n              case keyboardKey.Backspace:\n                e.stopPropagation();\n                tryRemoveItemFromValue();\n                break;\n\n              case keyboardKey.Escape:\n                // If dropdown list is open ESC should close it and not propagate to the parent\n                // otherwise event should propagate\n                if (open) {\n                  e.stopPropagation();\n                }\n\n              default:\n                break;\n            }\n          }\n\n          _invoke(predefinedProps, 'onInputKeyDown', e, Object.assign({}, searchInputProps, {\n            highlightedIndex: highlightedIndex,\n            selectItemAtIndex: selectItemAtIndex\n          }));\n        };\n\n        return {\n          // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n          // user handlers were also added to our handlers previously, at the beginning of this function.\n          accessibilityInputProps: Object.assign({}, getInputProps({\n            disabled: disabled,\n            onBlur: function onBlur(e) {\n              handleInputBlur(e, predefinedProps);\n            },\n            onKeyDown: function onKeyDown(e) {\n              handleInputKeyDown(e, predefinedProps);\n            },\n            onChange: function onChange(e) {\n              // we prevent the onChange input event to bubble up to our Dropdown handler,\n              // since in Dropdown it gets handled as onSearchQueryChange.\n              e.stopPropagation(); // A state modification should be triggered there otherwise it will go to an another frame and will break\n              // cursor position:\n              // https://github.com/facebook/react/issues/955#issuecomment-469352730\n\n              setSearchQuery(e.target.value);\n            }\n          })),\n          // same story as above for getRootProps.\n          accessibilityComboboxProps: accessibilityComboboxProps,\n          inputRef: function inputRef(node) {\n            handleRef(predefinedProps.inputRef, node);\n            _inputRef.current = node;\n          },\n          onFocus: function onFocus(e, searchInputProps) {\n            if (!disabled) {\n              setFocused(true);\n              setIsFromKeyboard(detectIsFromKeyboard());\n            }\n\n            _invoke(predefinedProps, 'onFocus', e, searchInputProps);\n          },\n          onInputBlur: function onInputBlur(e, searchInputProps) {\n            handleInputBlur(e, searchInputProps);\n          },\n          onInputKeyDown: function onInputKeyDown(e, searchInputProps) {\n            handleInputKeyDown(e, searchInputProps);\n          }\n        };\n      };\n    };\n    /**\n     * Custom Tab selection logic, at least until Downshift will implement selection on blur.\n     * Also keeps focus on multiple selection dropdown when selecting by Tab.\n     */\n\n\n    var handleTabSelection = function handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu) {\n      if (open) {\n        if (!_isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n          selectItemAtIndex(highlightedIndex);\n\n          if (multiple && !moveFocusOnTab) {\n            e.preventDefault();\n          }\n        } else {\n          toggleMenu();\n        }\n      }\n    };\n\n    var trySetLastSelectedItemAsActive = function trySetLastSelectedItemAsActive() {\n      if (!multiple || _inputRef.current && _inputRef.current.selectionStart !== 0) {\n        return;\n      }\n\n      if (value.length > 0) {\n        // If last element was already active, perform a 'reset' of activeSelectedIndex.\n        if (activeSelectedIndex === value.length - 1) {\n          setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: value.length - 1\n          });\n        } else {\n          setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: value.length - 1\n          });\n        }\n      }\n    };\n\n    var tryRemoveItemFromValue = function tryRemoveItemFromValue() {\n      if (multiple && (searchQuery === '' || _inputRef.current.selectionStart === 0 && _inputRef.current.selectionEnd === 0) && value.length > 0) {\n        removeItemFromValue();\n      }\n    };\n\n    var handleClear = function handleClear(e) {\n      setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n        activeSelectedIndex: multiple ? null : undefined,\n        highlightedIndex: highlightFirstItemOnOpen ? 0 : null,\n        open: false,\n        searchQuery: search ? '' : undefined,\n        value: []\n      });\n      tryFocusSearchInput();\n      tryFocusTriggerButton();\n    };\n\n    var handleContainerClick = function handleContainerClick() {\n      tryFocusSearchInput();\n    };\n\n    var handleTriggerButtonKeyDown = function handleTriggerButtonKeyDown(e) {\n      switch (getCode(e)) {\n        case keyboardKey.ArrowLeft:\n          if (!context.rtl) {\n            trySetLastSelectedItemAsActive();\n          }\n\n          return;\n\n        case keyboardKey.ArrowRight:\n          if (context.rtl) {\n            trySetLastSelectedItemAsActive();\n          }\n\n          return;\n\n        default:\n          return;\n      }\n    };\n\n    var handleListKeyDown = function handleListKeyDown(e, highlightedIndex, accessibilityInputPropsKeyDown, toggleMenu, selectItemAtIndex) {\n      var keyCode = getCode(e);\n\n      switch (keyCode) {\n        case keyboardKey.Tab:\n          handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n          return;\n\n        case keyboardKey.Escape:\n          accessibilityInputPropsKeyDown(e);\n          tryFocusTriggerButton();\n          e.stopPropagation();\n          return;\n\n        default:\n          var keyString = String.fromCharCode(keyCode);\n\n          if (/[a-zA-Z0-9]/.test(keyString)) {\n            setHighlightedIndexOnCharKeyDown(keyString);\n          }\n\n          accessibilityInputPropsKeyDown(e);\n          return;\n      }\n    };\n\n    var handleSelectedItemKeyDown = function handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps) {\n      var previousKey = context.rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n      var nextKey = context.rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n      switch (getCode(e)) {\n        case keyboardKey.Delete:\n        case keyboardKey.Backspace:\n          handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n          break;\n\n        case previousKey:\n          if (value.length > 0 && !_isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: activeSelectedIndex - 1\n            });\n          }\n\n          break;\n\n        case nextKey:\n          if (value.length > 0 && !_isNil(activeSelectedIndex)) {\n            if (activeSelectedIndex < value.length - 1) {\n              setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n                activeSelectedIndex: activeSelectedIndex + 1\n              });\n            } else {\n              setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n                activeSelectedIndex: null\n              });\n\n              if (search) {\n                e.preventDefault(); // prevents caret to forward one position in input.\n\n                _inputRef.current.focus();\n              } else {\n                buttonRef.current.focus();\n              }\n            }\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      _invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n    };\n\n    var handleTriggerButtonOrListFocus = function handleTriggerButtonOrListFocus() {\n      setFocused(true);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    };\n\n    var handleTriggerButtonBlur = function handleTriggerButtonBlur(e) {\n      if (listRef.current !== e.relatedTarget) {\n        setFocused(false);\n        setIsFromKeyboard(detectIsFromKeyboard());\n      }\n    };\n\n    var handleListBlur = function handleListBlur(e) {\n      if (buttonRef.current !== e.relatedTarget) {\n        setFocused(false);\n        setIsFromKeyboard(detectIsFromKeyboard());\n      }\n    };\n    /**\n     * Sets highlightedIndex to be the item that starts with the character keys the\n     * user has typed. Only used in non-search dropdowns.\n     *\n     * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.\n     */\n\n\n    var setHighlightedIndexOnCharKeyDown = function setHighlightedIndexOnCharKeyDown(keyString) {\n      var newStartingString = \"\" + startingString + keyString.toLowerCase();\n      var newHighlightedIndex = -1;\n      setStartingString(newStartingString);\n      clearStartingString();\n\n      if (_isNumber(highlightedIndex)) {\n        newHighlightedIndex = _findIndex(filteredItemStrings, function (item) {\n          return item.startsWith(newStartingString);\n        }, highlightedIndex + (startingString.length > 0 ? 0 : 1));\n      }\n\n      if (newHighlightedIndex < 0) {\n        newHighlightedIndex = _findIndex(filteredItemStrings, function (item) {\n          return item.startsWith(newStartingString);\n        });\n      }\n\n      if (newHighlightedIndex >= 0) {\n        setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n          highlightedIndex: newHighlightedIndex\n        });\n      }\n    };\n\n    var handleSelectedItemRemove = function handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps) {\n      setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: null\n      });\n      removeItemFromValue(item);\n      tryFocusSearchInput();\n      tryFocusTriggerButton();\n\n      _invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n    };\n\n    var removeItemFromValue = function removeItemFromValue(item) {\n      var poppedItem = item;\n      var newValue = [].concat(value);\n\n      if (poppedItem) {\n        newValue = newValue.filter(function (currentElement) {\n          return currentElement !== item;\n        });\n      } else {\n        poppedItem = newValue.pop();\n      }\n\n      if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n        setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n      }\n\n      setStateAndInvokeHandler(['onChange'], null, {\n        value: newValue\n      });\n    };\n    /**\n     * Calls setState and invokes event handler exposed to user.\n     * We don't have the event object for most events coming from Downshift se we send an empty event\n     * because we want to keep the event handling interface\n     */\n\n\n    var setStateAndInvokeHandler = function setStateAndInvokeHandler(handlerNames, event, newState) {\n      var proposedValue = _isNil(newState.value) ? value : newState.value; // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n      // required as first item can be undefined\n\n      var newValue = multiple ? proposedValue : proposedValue[0] || null;\n\n      if (newState.hasOwnProperty('activeSelectedIndex')) {\n        setActiveSelectedIndex(newState.activeSelectedIndex);\n      }\n\n      if (newState.hasOwnProperty('highlightedIndex')) {\n        setHighlightedIndex(newState.highlightedIndex);\n      }\n\n      if (newState.hasOwnProperty('itemIsFromKeyboard')) {\n        setItemIsFromKeyboard(newState.itemIsFromKeyboard);\n      }\n\n      if (newState.hasOwnProperty('open')) {\n        setOpen(newState.open);\n      }\n\n      if (newState.hasOwnProperty('searchQuery')) {\n        setSearchQuery(newState.searchQuery);\n      }\n\n      if (newState.hasOwnProperty('value')) {\n        setValue(newState.value);\n      }\n\n      handlerNames.forEach(function (handlerName) {\n        _invoke(props, handlerName, event, Object.assign({}, props, newState, {\n          value: newValue\n        }));\n      });\n    };\n\n    var tryFocusTriggerButton = function tryFocusTriggerButton() {\n      if (!search && buttonRef.current) {\n        buttonRef.current.focus();\n      }\n    };\n\n    var tryFocusSearchInput = function tryFocusSearchInput() {\n      if (search && _inputRef.current) {\n        _inputRef.current.focus();\n      }\n    };\n    /**\n     * If there is no value we use the placeholder value\n     * otherwise, for single selection we convert the value with itemToString\n     * and for multiple selection we return empty string, the values are rendered by renderSelectedItems\n     */\n\n\n    var getSelectedItemAsString = function getSelectedItemAsString(value) {\n      if (!value) {\n        return search ? '' : placeholder;\n      }\n\n      if (multiple) {\n        return '';\n      }\n\n      return itemToString(value);\n    };\n\n    var getHighlightedIndexOnArrowKeyOpen = function getHighlightedIndexOnArrowKeyOpen(changes) {\n      var isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n      var isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n      var itemsLength = filteredItems.length;\n\n      if (highlightedIndex) {\n        return highlightedIndex;\n      }\n\n      if (highlightFirstItemOnOpen) {\n        // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n        return 0;\n      }\n\n      if (!multiple && !search && value.length > 0) {\n        // in single selection, if there is a selected item, highlight it.\n        var _offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n\n        var newHighlightedIndex = items.indexOf(value[0]) + _offset;\n\n        if (newHighlightedIndex >= itemsLength) {\n          return 0;\n        }\n\n        if (newHighlightedIndex < 0) {\n          return itemsLength - 1;\n        }\n\n        return newHighlightedIndex;\n      }\n\n      if (isArrowDown) {\n        return 0;\n      }\n\n      if (isArrowUp) {\n        return itemsLength - 1;\n      }\n\n      return null;\n    };\n    /**\n     * Function that sets and cleans the selection message after it has been set,\n     * so it is not read anymore via virtual cursor.\n     */\n\n\n    var setA11ySelectionMessage = function setA11ySelectionMessage(a11ySelectionStatus) {\n      setA11ySelectionStatus(a11ySelectionStatus);\n      clearA11ySelectionMessage();\n    };\n\n    React.useEffect(function () {\n      return function () {\n        clearStartingString.cancel();\n        clearA11ySelectionMessage.cancel();\n      };\n    }, [clearA11ySelectionMessage, clearStartingString]);\n    var element = /*#__PURE__*/React.createElement(ElementType, _extends({\n      className: classes.root,\n      onBlur: handleOnBlur,\n      onChange: handleChange\n    }, unhandledProps, process.env.NODE_ENV === 'test' && {\n      'data-test-focused': focused\n    }), /*#__PURE__*/React.createElement(Downshift, {\n      isOpen: open,\n      inputValue: search ? searchQuery : null,\n      stateReducer: downshiftStateReducer,\n      itemToString: itemToString // downshift does not work with arrays as selectedItem.\n      ,\n      selectedItem: multiple || !value.length ? null : value[0],\n      scrollIntoView: function scrollIntoView(node, menu) {\n        if (node) {\n          var children = menu.children;\n          var nodeToScroll = node;\n          /**\n           * If it's loading downshift doesn't take the last node with loadingMessage\n           * in consideration to scrolld so we need to check if the current is the\n           * antepenultimate and is so scroll the loading into view, same for headerMessage\n           */\n\n          if (loading && children[children.length - 2] === node) {\n            nodeToScroll = children[children.length - 1];\n          } else if (headerMessage && children[1] === node) {\n            nodeToScroll = children[0];\n          } // Replicating same config that Downshift uses\n\n\n          var actions = computeScrollIntoView(nodeToScroll, {\n            scrollMode: 'if-needed',\n            block: 'nearest',\n            inline: 'nearest'\n          });\n          actions.forEach(function (_ref) {\n            var el = _ref.el,\n                top = _ref.top,\n                left = _ref.left;\n            el.scrollTop = top;\n            el.scrollLeft = left;\n          });\n        }\n      },\n      getA11yStatusMessage: getA11yStatusMessage,\n      highlightedIndex: highlightedIndex,\n      onStateChange: handleStateChange,\n      labelId: ariaLabelledby,\n      environment: (_context$target = context.target) == null ? void 0 : _context$target.defaultView,\n      inputId: searchInput && searchInput['id'] ? searchInput['id'] : undefined\n    }, function (_ref2) {\n      var getInputProps = _ref2.getInputProps,\n          getItemProps = _ref2.getItemProps,\n          getMenuProps = _ref2.getMenuProps,\n          getRootProps = _ref2.getRootProps,\n          getToggleButtonProps = _ref2.getToggleButtonProps,\n          toggleMenu = _ref2.toggleMenu,\n          highlightedIndex = _ref2.highlightedIndex,\n          selectItemAtIndex = _ref2.selectItemAtIndex;\n\n      var _getRootProps = getRootProps({\n        refKey: 'innerRef'\n      }, {\n        suppressRefError: true\n      }),\n          innerRef = _getRootProps.innerRef,\n          accessibilityRootPropsRest = _objectWithoutPropertiesLoose(_getRootProps, [\"innerRef\"]);\n\n      var showClearIndicator = clearable && value.length > 0;\n      return /*#__PURE__*/React.createElement(Ref, {\n        innerRef: innerRef\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: containerRef,\n        className: cx(dropdownSlotClassNames.container, classes.container),\n        onClick: search && !open ? handleContainerClick : undefined\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        ref: selectedItemsRef,\n        className: cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)\n      }, multiple && renderSelectedItems(), search ? renderSearchInput(accessibilityRootPropsRest, highlightedIndex, getInputProps, selectItemAtIndex, toggleMenu, variables) : renderTriggerButton(getToggleButtonProps)), showClearIndicator ? Box.create(clearIndicator, {\n        defaultProps: function defaultProps() {\n          return Object.assign({\n            className: dropdownSlotClassNames.clearIndicator,\n            styles: resolvedStyles.clearIndicator,\n            accessibility: indicatorBehavior\n          }, !search && {\n            tabIndex: 0,\n            role: 'button'\n          });\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            onClick: function onClick(e) {\n              _invoke(predefinedProps, 'onClick', e);\n\n              handleClear(e);\n            }\n          };\n        }\n      }) : Box.create(toggleIndicator, {\n        defaultProps: function defaultProps() {\n          return {\n            className: dropdownSlotClassNames.toggleIndicator,\n            styles: resolvedStyles.toggleIndicator,\n            accessibility: indicatorBehavior\n          };\n        },\n        overrideProps: function overrideProps(predefinedProps) {\n          return {\n            onClick: function onClick(e) {\n              if (!disabled) {\n                getToggleButtonProps({\n                  disabled: disabled\n                }).onClick(e);\n              }\n\n              _invoke(predefinedProps, 'onClick', e);\n            }\n          };\n        }\n      }), renderItemsList(highlightedIndex, toggleMenu, selectItemAtIndex, getMenuProps, getItemProps, getInputProps)));\n    }), /*#__PURE__*/React.createElement(Portal, {\n      open: !!getA11ySelectionMessage\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      role: \"status\",\n      \"aria-live\": \"polite\",\n      \"aria-relevant\": \"additions text\",\n      style: screenReaderContainerStyles\n    }, a11ySelectionStatus)));\n    setEnd();\n    return element;\n  };\n\n  Dropdown.displayName = 'Dropdown';\n  Dropdown.propTypes = Object.assign({}, commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false\n  }), {\n    activeSelectedIndex: PropTypes.number,\n    align: PropTypes.oneOf(ALIGNMENTS),\n    checkable: PropTypes.bool,\n    checkableIndicator: customPropTypes.shorthandAllowingChildren,\n    clearable: PropTypes.bool,\n    clearIndicator: customPropTypes.shorthandAllowingChildren,\n    defaultActiveSelectedIndex: PropTypes.number,\n    defaultOpen: PropTypes.bool,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultSearchQuery: PropTypes.string,\n    defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n    disabled: PropTypes.bool,\n    error: PropTypes.bool,\n    fluid: PropTypes.bool,\n    getA11ySelectionMessage: PropTypes.object,\n    getA11yStatusMessage: PropTypes.func,\n    highlightFirstItemOnOpen: PropTypes.bool,\n    highlightedIndex: PropTypes.number,\n    inline: PropTypes.bool,\n    inverted: PropTypes.bool,\n    items: customPropTypes.collectionShorthand,\n    itemToString: PropTypes.func,\n    itemToValue: PropTypes.func,\n    headerMessage: customPropTypes.itemShorthand,\n    list: customPropTypes.itemShorthand,\n    loading: PropTypes.bool,\n    loadingMessage: customPropTypes.itemShorthand,\n    moveFocusOnTab: PropTypes.bool,\n    multiple: PropTypes.bool,\n    noResultsMessage: customPropTypes.itemShorthand,\n    offset: PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.number)]),\n    onOpenChange: PropTypes.func,\n    onSearchQueryChange: PropTypes.func,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onActiveSelectedIndexChange: PropTypes.func,\n    onHighlightedIndexChange: PropTypes.func,\n    open: PropTypes.bool,\n    placeholder: PropTypes.string,\n    position: PropTypes.oneOf(POSITIONS),\n    renderItem: PropTypes.func,\n    renderSelectedItem: PropTypes.func,\n    search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    searchQuery: PropTypes.string,\n    searchInput: customPropTypes.itemShorthand,\n    toggleIndicator: customPropTypes.shorthandAllowingChildren,\n    triggerButton: customPropTypes.itemShorthand,\n    unstable_pinned: PropTypes.bool,\n    value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand])\n  });\n  Dropdown.handledProps = Object.keys(Dropdown.propTypes);\n  Dropdown.defaultProps = {\n    align: 'start',\n    clearIndicator: {},\n    itemToString: function itemToString(item) {\n      if (!item || /*#__PURE__*/React.isValidElement(item)) {\n        return '';\n      } // targets DropdownItem shorthand objects\n\n\n      return item.header || String(item);\n    },\n    itemToValue: function itemToValue(item) {\n      if (!item || /*#__PURE__*/React.isValidElement(item)) {\n        return '';\n      } // targets DropdownItem shorthand objects\n\n\n      return item.header || String(item);\n    },\n    list: {},\n    position: 'below',\n    toggleIndicator: {},\n    triggerButton: {}\n  };\n  Dropdown.Item = DropdownItem;\n  Dropdown.SearchInput = DropdownSearchInput;\n  Dropdown.SelectedItem = DropdownSelectedItem;\n  return Dropdown;\n}();","map":{"version":3,"sources":["components/Dropdown/Dropdown.tsx"],"names":["isFromKeyboard","dropdownClassName","dropdownSlotClassNames","clearIndicator","container","toggleIndicator","item","itemsList","searchInput","selectedItem","selectedItems","triggerButton","a11yStatusCleanupTime","charKeyPressedCleanupTime","normalizedValue","Array","multiple","items","itemToString","itemToValue","search","searchQuery","value","options","filteredItemsByValue","filteredItemStrings","filteredItems","isEmpty","prop","Dropdown","context","useFluentContext","setStart","setEnd","useTelemetry","align","ariaLabelledby","clearable","checkable","checkableIndicator","className","design","disabled","error","fluid","getA11ySelectionMessage","getA11yStatusMessage","inline","inverted","highlightFirstItemOnOpen","headerMessage","moveFocusOnTab","noResultsMessage","loading","loadingMessage","placeholder","position","offset","renderItem","renderSelectedItem","styles","unstable_pinned","variables","props","list","positioningProps","partitionPopperPropsFromShorthand","buttonRef","React","inputRef","listRef","selectedItemsRef","containerRef","defaultTriggerButtonId","ElementType","getElementType","unhandledProps","useUnhandledProps","activeSelectedIndex","setActiveSelectedIndex","useAutoControlled","defaultValue","initialValue","highlightedIndex","setHighlightedIndex","open","setOpen","setSearchQuery","rawValue","setValue","normalizeValue","a11ySelectionStatus","setA11ySelectionStatus","focused","setFocused","setIsFromKeyboard","itemIsFromKeyboard","setItemIsFromKeyboard","startingString","setStartingString","getFilteredValues","classes","resolvedStyles","useStyles","mapPropsToStyles","isEmptyClearIndicator","hasToggleIndicator","mapPropsToInlineStyles","rtl","clearA11ySelectionMessage","clearStartingString","handleChange","handleOnBlur","e","renderTriggerButton","content","getSelectedItemAsString","triggerButtonId","triggerButtonProps","getToggleButtonProps","onFocus","onBlur","onKeyDown","handleTriggerButtonKeyDown","onClick","restTriggerButtonProps","createShorthand","defaultProps","id","overrideProps","renderSearchInput","noPlaceholder","handleSearchInputOverrides","renderItemsList","renderItems","innerRef","accessibilityMenuProps","getMenuProps","refKey","suppressRefError","accessibilityInputProps","getInputProps","handleListKeyDown","handleRef","tabIndex","handleTriggerButtonOrListFocus","handleListBlur","footerItem","renderItemsListFooter","headerItem","renderItemsListHeader","children","selected","active","key","header","handleItemOverrides","render","renderSelectedItems","DropdownSelectedItem","isSelectedItemActive","handleSelectedItemOverrides","downshiftStateReducer","activeElement","changes","Downshift","state","handleStateChange","type","newState","shouldValueChange","shouldMenuClose","shouldAddHighlightedIndex","isSameItemSelected","newValue","setA11ySelectionMessage","setTimeout","tryFocusTriggerButton","highlightedIndexOnArrowKeyOpen","getHighlightedIndexOnArrowKeyOpen","handlers","setStateAndInvokeHandler","index","accessibilityItemProps","getItemProps","onRemove","handleSelectedItemRemove","handleSelectedItemKeyDown","handleInputBlur","detectIsFromKeyboard","handleInputKeyDown","getCode","keyboardKey","handleTabSelection","trySetLastSelectedItemAsActive","tryRemoveItemFromValue","selectItemAtIndex","onChange","accessibilityComboboxProps","predefinedProps","onInputBlur","onInputKeyDown","toggleMenu","removeItemFromValue","handleClear","tryFocusSearchInput","handleContainerClick","keyCode","accessibilityInputPropsKeyDown","keyString","String","setHighlightedIndexOnCharKeyDown","previousKey","nextKey","handleTriggerButtonBlur","newStartingString","newHighlightedIndex","poppedItem","currentElement","proposedValue","handlerNames","isArrowUp","isArrowDown","itemsLength","element","process","menu","nodeToScroll","actions","computeScrollIntoView","scrollMode","block","el","top","left","undefined","getRootProps","accessibilityRootPropsRest","showClearIndicator","cx","accessibility","indicatorBehavior","role","screenReaderContainerStyles","PropTypes","customPropTypes","defaultActiveSelectedIndex","defaultOpen","defaultHighlightedIndex","defaultSearchQuery","onOpenChange","onSearchQueryChange","onActiveSelectedIndexChange","onHighlightedIndexChange","Object"],"mappings":"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","sourcesContent":["import {\n  getElementType,\n  useAutoControlled,\n  useStyles,\n  useUnhandledProps,\n  ComponentWithAs,\n  useFluentContext,\n  useTelemetry,\n} from '@fluentui/react-bindings';\nimport { handleRef, Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport { indicatorBehavior } from '@fluentui/accessibility';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash';\nimport cx from 'classnames';\nimport { getCode, keyboardKey } from '@fluentui/keyboard-key';\nimport computeScrollIntoView from 'compute-scroll-into-view';\n\nimport { ShorthandRenderFunction, ShorthandValue, ShorthandCollection, FluentComponentStaticProps } from '../../types';\nimport Downshift, {\n  DownshiftState,\n  StateChangeOptions,\n  A11yStatusMessageOptions,\n  GetMenuPropsOptions,\n  GetPropsCommonOptions,\n  GetInputPropsOptions,\n  GetToggleButtonPropsOptions,\n  GetItemPropsOptions,\n} from 'downshift';\nimport {\n  commonPropTypes,\n  UIComponentProps,\n  isFromKeyboard as detectIsFromKeyboard,\n  createShorthand,\n} from '../../utils';\nimport { List, ListProps } from '../List/List';\nimport { DropdownItem, DropdownItemProps } from './DropdownItem';\nimport { DropdownSelectedItem, DropdownSelectedItemProps } from './DropdownSelectedItem';\nimport { DropdownSearchInput, DropdownSearchInputProps } from './DropdownSearchInput';\nimport { Button, ButtonProps } from '../Button/Button';\nimport { screenReaderContainerStyles } from '../../utils/accessibility/Styles/accessibilityStyles';\nimport { Box, BoxProps } from '../Box/Box';\nimport { Portal } from '../Portal/Portal';\nimport {\n  ALIGNMENTS,\n  POSITIONS,\n  Popper,\n  PositioningProps,\n  PopperShorthandProps,\n  partitionPopperPropsFromShorthand,\n} from '../../utils/positioner';\n\nexport interface DownshiftA11yStatusMessageOptions<Item> extends Required<A11yStatusMessageOptions<Item>> {}\n\nexport interface DropdownSlotClassNames {\n  clearIndicator: string;\n  container: string;\n  toggleIndicator: string;\n  item: string;\n  itemsList: string;\n  searchInput: string;\n  selectedItem: string;\n  selectedItems: string;\n  triggerButton: string;\n}\n\nexport interface DropdownProps extends UIComponentProps<DropdownProps>, PositioningProps {\n  /** The index of the currently selected item, if the dropdown supports multiple selection. */\n  activeSelectedIndex?: number;\n\n  /** A dropdown item can show a check indicator if it is selected. */\n  checkable?: boolean;\n\n  /** A slot for a selected indicator in the dropdown list. */\n  checkableIndicator?: ShorthandValue<BoxProps>;\n\n  /** A dropdown can be clearable to let users remove their selection. */\n  clearable?: boolean;\n\n  /** A slot for the clearing indicator. */\n  clearIndicator?: ShorthandValue<BoxProps>;\n\n  /** The initial value for the index of the currently selected item in a multiple selection. */\n  defaultActiveSelectedIndex?: number;\n\n  /** The initial value for 'open' in uncontrolled mode. */\n  defaultOpen?: boolean;\n\n  /** The initial list item index to highlight. */\n  defaultHighlightedIndex?: number;\n\n  /** The initial value for the search query if the dropdown has `search` enabled. */\n  defaultSearchQuery?: string;\n\n  /** The initial value (or value array if the array has multiple selection). */\n  defaultValue?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** A dropdown can show that it cannot be interacted with. */\n  disabled?: boolean;\n\n  /** A dropdown can fill the width of its container. */\n  fluid?: boolean;\n\n  /** Object with callbacks for generating announcements for item selection and removal. */\n  getA11ySelectionMessage?: {\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item added to selection.\n     * @param item - Dropdown added element.\n     */\n    onAdd?: (item: ShorthandValue<DropdownItemProps>) => string;\n    /**\n     * Callback that creates custom accessibility message a screen reader narrates on item removed from selection.\n     * @param item - Dropdown removed element.\n     */\n    onRemove?: (item: ShorthandValue<DropdownItemProps>) => string;\n  };\n\n  /**\n   * Callback that provides status announcement message with number of items in the list, using Arrow Up/Down keys to navigate through them and, if multiple, using Arrow Left/Right to navigate through selected items.\n   * @param messageGenerationProps - Object with properties to generate message from. See getA11yStatusMessage from Downshift repo.\n   */\n  getA11yStatusMessage?: (options: DownshiftA11yStatusMessageOptions<ShorthandValue<DropdownItemProps>>) => string;\n\n  /** A dropdown can highlight the first option when it opens. */\n  highlightFirstItemOnOpen?: boolean;\n\n  /** The index of the list item to highlight. */\n  highlightedIndex?: number;\n\n  /** A dropdown can be formatted to appear inline next to other elements. */\n  inline?: boolean;\n\n  /** A dropdown can have inverted colors. */\n  inverted?: boolean;\n\n  /** Array of props for generating list options (Dropdown.Item[]) and selected item labels (Dropdown.SelectedItem[]), if it's a multiple selection. */\n  items?: ShorthandCollection<DropdownItemProps>;\n\n  /**\n   * A function that converts an item to string. Used when dropdown has `search` enabled.\n   * By default, it:\n   * - returns the `header` property if it exists on an item\n   * - stringifies the item if it is a primitive type\n   */\n  itemToString?: (item: ShorthandValue<DropdownItemProps>) => string;\n\n  /** Used when comparing two items in multiple selection. Default comparison is by the header prop. */\n  itemToValue?: (item: ShorthandValue<DropdownItemProps>) => any;\n\n  /** A message to be displayed in the list header. */\n  headerMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** A slot for dropdown list. */\n  list?: ShorthandValue<ListProps & { popper?: PopperShorthandProps }>;\n\n  /** A dropdown can show that it is currently loading data. */\n  loading?: boolean;\n\n  /** A message to be displayed in the list when the dropdown is loading. */\n  loadingMessage?: ShorthandValue<DropdownItemProps>;\n\n  /** When selecting an element with Tab, focus stays on the dropdown by default. If true, the focus will jump to next/previous element in DOM. Only available to multiple selection dropdowns. */\n  moveFocusOnTab?: boolean;\n\n  /** A dropdown can allow a user to select multiple items. */\n  multiple?: boolean;\n\n  /** A message to be displayed in the list when the dropdown has no items. */\n  noResultsMessage?: ShorthandValue<DropdownItemProps>;\n\n  /**\n   * Called when the dropdown's selected items index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onActiveSelectedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's highlighted index change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onHighlightedIndexChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown opens or closes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `open` reflecting the new open state.\n   */\n  onOpenChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's search query changes.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props, with `searchQuery` reflecting its new value.\n   */\n  onSearchQueryChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the dropdown's selected item(s) change.\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and the new selected value(s).\n   */\n  onChange?: (event: React.MouseEvent | React.KeyboardEvent | null, data: DropdownProps) => void;\n\n  /**\n   * Called when the focus moves out from dropdown.\n   * @param event - React's original SyntheticEvent.\n   */\n  onBlur?: (event: React.MouseEvent | React.KeyboardEvent | null) => void;\n\n  /** A dropdown's open state can be controlled. */\n  open?: boolean;\n\n  /** A placeholder message for the input field. */\n  placeholder?: string;\n\n  /**\n   * A render function to customize how items are rendered in the dropdown.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderItem?: ShorthandRenderFunction<DropdownItemProps>;\n\n  /**\n   * A custom render function for the selected item. Only applicable with the `multiple` prop.\n   *\n   * @param Component - The computed component for this slot.\n   * @param props - The computed props for this slot.\n   * @param children - The computed children for this slot.\n   */\n  renderSelectedItem?: ShorthandRenderFunction<DropdownSelectedItemProps>;\n\n  /** A dropdown can have a search field instead of trigger button. Can receive a custom search function that will replace the default equivalent. */\n  search?:\n    | boolean\n    | ((items: ShorthandCollection<DropdownItemProps>, searchQuery: string) => ShorthandCollection<DropdownItemProps>);\n\n  /** A search dropdown's input can be customized. */\n  searchInput?: ShorthandValue<DropdownSearchInputProps>;\n\n  /** Sets search query value (controlled mode). */\n  searchQuery?: string;\n\n  /** Controls the appearance of the indicator that shows/hides the list of items. */\n  toggleIndicator?: ShorthandValue<BoxProps>;\n\n  /** Controls the appearance of the trigger button if it's a selection dropdown (not a search). */\n  triggerButton?: ShorthandValue<ButtonProps>;\n\n  /** Sets the dropdown's currently selected value(s) in controlled mode. */\n  value?: ShorthandValue<DropdownItemProps> | ShorthandCollection<DropdownItemProps>;\n\n  /** Dropdown can have errors status  */\n  error?: boolean;\n}\n\nexport type DropdownStylesProps = Required<\n  Pick<DropdownProps, 'disabled' | 'error' | 'fluid' | 'inline' | 'inverted' | 'multiple' | 'position' | 'open'>\n> & {\n  focused: boolean;\n  isEmptyClearIndicator: boolean;\n  hasToggleIndicator: boolean;\n  isFromKeyboard: boolean;\n  search: boolean;\n};\n\ntype DropdownStateForInvoke = {\n  activeSelectedIndex?: number | null;\n  highlightedIndex?: number | null;\n  itemIsFromKeyboard?: boolean;\n  open?: boolean;\n  searchQuery?: string;\n  value?: ShorthandCollection<DropdownItemProps>;\n};\n\nexport const dropdownClassName = 'ui-dropdown';\nexport const dropdownSlotClassNames: DropdownSlotClassNames = {\n  clearIndicator: `${dropdownClassName}__clear-indicator`,\n  container: `${dropdownClassName}__container`,\n  toggleIndicator: `${dropdownClassName}__toggle-indicator`,\n  item: `${dropdownClassName}__item`,\n  itemsList: `${dropdownClassName}__items-list`,\n  searchInput: `${dropdownClassName}__searchinput`,\n  selectedItem: `${dropdownClassName}__selecteditem`,\n  selectedItems: `${dropdownClassName}__selected-items`,\n  triggerButton: `${dropdownClassName}__trigger-button`,\n};\n\nconst a11yStatusCleanupTime = 500;\nconst charKeyPressedCleanupTime = 500;\n\n/** `normalizedValue` should be normalized always as it can be received from props */\nfunction normalizeValue(multiple: boolean, rawValue: DropdownProps['value']): ShorthandCollection<DropdownItemProps> {\n  const normalizedValue = Array.isArray(rawValue) ? rawValue : [rawValue];\n\n  return multiple ? normalizedValue : normalizedValue.slice(0, 1);\n}\n\n/**\n * Used to compute the filtered items (by value and search query) and, if needed,\n * their string equivalents, in order to be used throughout the component.\n */\nfunction getFilteredValues(\n  options: Required<\n    Pick<DropdownProps, 'multiple' | 'items' | 'itemToValue' | 'itemToString' | 'search' | 'searchQuery'>\n  > & {\n    value: ShorthandCollection<DropdownItemProps>;\n  },\n) {\n  const { items, itemToString, itemToValue, multiple, search, searchQuery, value } = options;\n\n  const filteredItemsByValue = multiple ? _.differenceBy(items, value, itemToValue) : items;\n  const filteredItemStrings = _.map(filteredItemsByValue, filteredItem => itemToString(filteredItem).toLowerCase());\n\n  if (search) {\n    if (_.isFunction(search)) {\n      return {\n        filteredItems: search(filteredItemsByValue, searchQuery),\n        filteredItemStrings,\n      };\n    }\n\n    return {\n      filteredItems: filteredItemsByValue.filter(\n        item =>\n          itemToString(item)\n            .toLowerCase()\n            .indexOf(searchQuery.toLowerCase()) !== -1,\n      ),\n      filteredItemStrings,\n    };\n  }\n\n  return {\n    filteredItems: filteredItemsByValue,\n    filteredItemStrings,\n  };\n}\n\nconst isEmpty = prop => {\n  return typeof prop === 'object' && !prop.props && !_.get(prop, 'children') && !_.get(prop, 'content');\n};\n\n/**\n * A Dropdown allows user to select one or more values from a list of options.\n * Can be created with search and multi-selection capabilities.\n *\n * @accessibility\n * Implements [ARIA Combo Box](https://www.w3.org/TR/wai-aria-practices-1.1/#combobox) design pattern, uses aria-live to announce state changes.\n * @accessibilityIssues\n * [Issue 991203: VoiceOver doesn't narrate properly elements in the input/combobox](https://bugs.chromium.org/p/chromium/issues/detail?id=991203)\n */\nexport const Dropdown: ComponentWithAs<'div', DropdownProps> &\n  FluentComponentStaticProps<DropdownProps> & {\n    Item: typeof DropdownItem;\n    SearchInput: typeof DropdownSearchInput;\n    SelectedItem: typeof DropdownSelectedItem;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Dropdown.displayName, context.telemetry);\n\n  setStart();\n\n  const {\n    align,\n    'aria-labelledby': ariaLabelledby,\n    clearable,\n    clearIndicator,\n    checkable,\n    checkableIndicator,\n    className,\n    design,\n    disabled,\n    error,\n    fluid,\n    getA11ySelectionMessage,\n    getA11yStatusMessage,\n    inline,\n    inverted,\n    itemToString,\n    itemToValue,\n    items,\n    highlightFirstItemOnOpen,\n    multiple,\n    headerMessage,\n    moveFocusOnTab,\n    noResultsMessage,\n    loading,\n    loadingMessage,\n    placeholder,\n    position,\n    offset,\n    renderItem,\n    renderSelectedItem,\n    search,\n    searchInput,\n    styles,\n    toggleIndicator,\n    triggerButton,\n    unstable_pinned,\n    variables,\n  } = props;\n  const [list, positioningProps] = partitionPopperPropsFromShorthand(props.list);\n\n  const buttonRef = React.useRef<HTMLElement>();\n  const inputRef = React.useRef<HTMLInputElement | undefined>() as React.MutableRefObject<HTMLInputElement | undefined>;\n  const listRef = React.useRef<HTMLElement>();\n  const selectedItemsRef = React.useRef<HTMLDivElement>();\n  const containerRef = React.useRef<HTMLDivElement>();\n\n  const defaultTriggerButtonId = React.useMemo(() => _.uniqueId('dropdown-trigger-button-'), []);\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Dropdown.handledProps, props);\n\n  const [activeSelectedIndex, setActiveSelectedIndex] = useAutoControlled<number | null | undefined>({\n    defaultValue: props.defaultActiveSelectedIndex,\n    initialValue: multiple ? null : undefined,\n    value: props.activeSelectedIndex,\n  });\n  const [highlightedIndex, setHighlightedIndex] = useAutoControlled<number | null>({\n    defaultValue: props.defaultHighlightedIndex,\n    initialValue: highlightFirstItemOnOpen ? 0 : null,\n    value: props.highlightedIndex,\n  });\n  const [open, setOpen] = useAutoControlled({\n    defaultValue: props.defaultOpen,\n    initialValue: false,\n    value: props.open,\n  });\n  const [searchQuery, setSearchQuery] = useAutoControlled<string | undefined>({\n    defaultValue: props.defaultSearchQuery,\n    initialValue: search ? '' : undefined,\n    value: props.searchQuery,\n  });\n  const [rawValue, setValue] = useAutoControlled({\n    defaultValue: props.defaultValue,\n    initialValue: [],\n    value: props.value,\n  });\n  const value = normalizeValue(multiple, rawValue);\n\n  const [a11ySelectionStatus, setA11ySelectionStatus] = React.useState('');\n  const [focused, setFocused] = React.useState(false);\n  const [isFromKeyboard, setIsFromKeyboard] = React.useState(false);\n  const [itemIsFromKeyboard, setItemIsFromKeyboard] = React.useState(false);\n  const [startingString, setStartingString] = React.useState<string | undefined>(search ? undefined : '');\n\n  const { filteredItems, filteredItemStrings } = getFilteredValues({\n    itemToString,\n    itemToValue,\n    items,\n    multiple,\n    search,\n    searchQuery,\n    value,\n  });\n\n  const { classes, styles: resolvedStyles } = useStyles<DropdownStylesProps>(Dropdown.displayName, {\n    className: dropdownClassName,\n    mapPropsToStyles: () => ({\n      disabled,\n      error,\n      fluid,\n      focused,\n      isEmptyClearIndicator: isEmpty(clearIndicator),\n      hasToggleIndicator: !!toggleIndicator,\n      inline,\n      inverted,\n      isFromKeyboard,\n      multiple,\n      open,\n      position,\n      search: !!search,\n    }),\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const clearA11ySelectionMessage = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setA11ySelectionStatus('');\n      }, a11yStatusCleanupTime),\n    [],\n  );\n  const clearStartingString = React.useMemo(\n    () =>\n      _.debounce(() => {\n        setStartingString('');\n      }, charKeyPressedCleanupTime),\n    [],\n  );\n\n  const handleChange = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    _.invoke(props, 'onChange', e, { ...props, value });\n  };\n\n  const handleOnBlur = (e: React.SyntheticEvent) => {\n    // Dropdown component doesn't present any `input` component in markup, however all of our\n    // components should handle events transparently.\n    if (e.target !== buttonRef.current) {\n      _.invoke(props, 'onBlur', e, props);\n    }\n  };\n\n  const renderTriggerButton = (getToggleButtonProps: (options?: GetToggleButtonPropsOptions) => any): JSX.Element => {\n    const content = getSelectedItemAsString(value[0]);\n    const triggerButtonId = triggerButton['id'] || defaultTriggerButtonId;\n\n    const triggerButtonProps = getToggleButtonProps({\n      disabled,\n      onFocus: handleTriggerButtonOrListFocus,\n      onBlur: handleTriggerButtonBlur,\n      onKeyDown: e => {\n        handleTriggerButtonKeyDown(e);\n      },\n      'aria-label': undefined,\n      'aria-labelledby': [ariaLabelledby, triggerButtonId].filter(l => !!l).join(' '),\n    });\n\n    const { onClick, onFocus, onBlur, onKeyDown, ...restTriggerButtonProps } = triggerButtonProps;\n\n    return (\n      <Ref innerRef={buttonRef}>\n        {createShorthand(Button, triggerButton, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.triggerButton,\n            content,\n            disabled,\n            id: triggerButtonId,\n            fluid: true,\n            styles: resolvedStyles.triggerButton,\n            ...restTriggerButtonProps,\n          }),\n          overrideProps: (predefinedProps: ButtonProps) => ({\n            onClick: e => {\n              onClick(e);\n              _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n            },\n            onFocus: e => {\n              onFocus(e);\n              _.invoke(predefinedProps, 'onFocus', e, predefinedProps);\n            },\n            onBlur: e => {\n              if (!disabled) {\n                onBlur(e);\n              }\n\n              _.invoke(predefinedProps, 'onBlur', e, predefinedProps);\n            },\n            onKeyDown: e => {\n              if (!disabled) {\n                onKeyDown(e);\n              }\n\n              _.invoke(predefinedProps, 'onKeyDown', e, predefinedProps);\n            },\n          }),\n        })}\n      </Ref>\n    );\n  };\n\n  const renderSearchInput = (\n    accessibilityComboboxProps: Object,\n    highlightedIndex: number,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    variables,\n  ): JSX.Element => {\n    const noPlaceholder = searchQuery.length > 0 || (multiple && value.length > 0);\n\n    return DropdownSearchInput.create(searchInput || {}, {\n      defaultProps: () => ({\n        className: dropdownSlotClassNames.searchInput,\n        placeholder: noPlaceholder ? '' : placeholder,\n        inline,\n        variables,\n        disabled,\n      }),\n      overrideProps: handleSearchInputOverrides(\n        highlightedIndex,\n        selectItemAtIndex,\n        toggleMenu,\n        accessibilityComboboxProps,\n        getInputProps,\n      ),\n    });\n  };\n\n  const renderItemsList = (\n    highlightedIndex: number,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n    getMenuProps: (options?: GetMenuPropsOptions, otherOptions?: GetPropsCommonOptions) => any,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => {\n    const items = open ? renderItems(getItemProps) : [];\n    const { innerRef, ...accessibilityMenuProps } = getMenuProps({ refKey: 'innerRef' }, { suppressRefError: true });\n\n    // If it's just a selection, some attributes and listeners from Downshift input need to go on the menu list.\n    if (!search) {\n      const accessibilityInputProps = getInputProps();\n\n      accessibilityMenuProps['aria-activedescendant'] = accessibilityInputProps['aria-activedescendant'];\n      accessibilityMenuProps['onKeyDown'] = e => {\n        handleListKeyDown(e, highlightedIndex, accessibilityInputProps['onKeyDown'], toggleMenu, selectItemAtIndex);\n      };\n    }\n\n    return (\n      <Ref\n        innerRef={(listElement: HTMLElement) => {\n          handleRef(listRef, listElement);\n          handleRef(innerRef, listElement);\n        }}\n      >\n        <Popper\n          align={align}\n          position={position}\n          offset={offset}\n          rtl={context.rtl}\n          enabled={open}\n          targetRef={containerRef}\n          unstable_pinned={unstable_pinned}\n          positioningDependencies={[items.length]}\n          {...positioningProps}\n        >\n          {List.create(list, {\n            defaultProps: () => ({\n              className: dropdownSlotClassNames.itemsList,\n              ...accessibilityMenuProps,\n              styles: resolvedStyles.list,\n              items,\n              tabIndex: search ? undefined : -1, // needs to be focused when trigger button is activated.\n              'aria-hidden': !open,\n            }),\n\n            overrideProps: (predefinedProps: ListProps) => ({\n              onFocus: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleTriggerButtonOrListFocus();\n                _.invoke(predefinedProps, 'onClick', e, listProps);\n              },\n              onBlur: (e: React.SyntheticEvent<HTMLElement>, listProps: ListProps) => {\n                handleListBlur(e);\n                _.invoke(predefinedProps, 'onBlur', e, listProps);\n              },\n            }),\n          })}\n        </Popper>\n      </Ref>\n    );\n  };\n\n  const renderItems = (getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any) => {\n    const footerItem = renderItemsListFooter();\n    const headerItem = renderItemsListHeader();\n\n    const items = _.map(filteredItems, (item, index) => ({\n      children: () => {\n        const selected = value.indexOf(item) !== -1;\n\n        return DropdownItem.create(item, {\n          defaultProps: () => ({\n            className: dropdownSlotClassNames.item,\n            active: highlightedIndex === index,\n            selected,\n            checkable,\n            checkableIndicator,\n            isFromKeyboard: itemIsFromKeyboard,\n            variables,\n            ...(typeof item === 'object' &&\n              !item.hasOwnProperty('key') && {\n                key: (item as any).header,\n              }),\n          }),\n          overrideProps: handleItemOverrides(item, index, getItemProps, selected),\n          render: renderItem,\n        });\n      },\n    }));\n\n    if (footerItem) {\n      items.push(footerItem);\n    }\n\n    return headerItem ? [headerItem, ...items] : items;\n  };\n\n  const renderItemsListHeader = () => {\n    if (headerMessage) {\n      return {\n        children: () =>\n          DropdownItem.create(headerMessage, {\n            defaultProps: () => ({\n              key: 'items-list-footer-message',\n              styles: resolvedStyles.headerMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const renderItemsListFooter = () => {\n    if (loading) {\n      return {\n        children: () =>\n          DropdownItem.create(loadingMessage, {\n            defaultProps: () => ({\n              key: 'loading-message',\n              styles: resolvedStyles.loadingMessage,\n            }),\n          }),\n      };\n    }\n\n    if (filteredItems && filteredItems.length === 0) {\n      return {\n        children: () =>\n          DropdownItem.create(noResultsMessage, {\n            defaultProps: () => ({\n              key: 'no-results-message',\n              styles: resolvedStyles.noResultsMessage,\n            }),\n          }),\n      };\n    }\n\n    return null;\n  };\n\n  const renderSelectedItems = () => {\n    if (value.length === 0) {\n      return null;\n    }\n\n    return value.map((item: DropdownItemProps, index) =>\n      // (!) an item matches DropdownItemProps\n      DropdownSelectedItem.create(item, {\n        defaultProps: () => ({\n          className: dropdownSlotClassNames.selectedItem,\n          active: isSelectedItemActive(index),\n          variables,\n          ...(typeof item === 'object' &&\n            !item.hasOwnProperty('key') && {\n              key: (item as any).header,\n            }),\n        }),\n        overrideProps: handleSelectedItemOverrides(item),\n        render: renderSelectedItem,\n      }),\n    );\n  };\n\n  const downshiftStateReducer = (\n    state: DownshiftState<ShorthandValue<DropdownItemProps>>,\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ) => {\n    const activeElement: Element = context.target.activeElement;\n\n    switch (changes.type) {\n      case Downshift.stateChangeTypes.blurButton:\n        // Downshift closes the list by default on trigger blur. It does not support the case when dropdown is\n        // single selection and focuses list on trigger click/up/down/space/enter. Treating that here.\n        if (state.isOpen && activeElement === listRef.current) {\n          return {}; // won't change state in this case.\n        }\n        _.invoke(props, 'onBlur', null);\n      default:\n        return changes;\n    }\n  };\n\n  const handleStateChange = (changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>) => {\n    const { type } = changes;\n    const newState = {} as DropdownStateForInvoke;\n\n    switch (type) {\n      case Downshift.stateChangeTypes.changeInput: {\n        const shouldValueChange = changes.inputValue === '' && !multiple && value.length > 0;\n        newState.searchQuery = changes.inputValue;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n\n        if (shouldValueChange) {\n          newState.value = [];\n        }\n\n        if (open) {\n          // we clear value when in single selection user cleared the query.\n          const shouldMenuClose = changes.inputValue === '' || changes.selectedItem !== undefined;\n\n          if (shouldMenuClose) {\n            newState.open = false;\n          }\n        } else {\n          newState.open = true;\n        }\n\n        break;\n      }\n      case Downshift.stateChangeTypes.keyDownEnter:\n      case Downshift.stateChangeTypes.clickItem:\n        const shouldAddHighlightedIndex = !multiple && items && items.length > 0;\n        const isSameItemSelected = changes.selectedItem === undefined;\n        const newValue = isSameItemSelected ? value[0] : changes.selectedItem;\n\n        newState.searchQuery = getSelectedItemAsString(newValue);\n        newState.open = false;\n        newState.highlightedIndex = shouldAddHighlightedIndex ? items.indexOf(newValue) : null;\n\n        if (!isSameItemSelected) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n\n          if (getA11ySelectionMessage && getA11ySelectionMessage.onAdd) {\n            setA11ySelectionMessage(getA11ySelectionMessage.onAdd(newValue));\n          }\n        }\n\n        if (multiple) {\n          setTimeout(() => (selectedItemsRef.current.scrollTop = selectedItemsRef.current.scrollHeight), 0);\n        }\n\n        tryFocusTriggerButton();\n\n        break;\n      case Downshift.stateChangeTypes.keyDownEscape:\n        if (search) {\n          newState.searchQuery = '';\n\n          if (!multiple) {\n            newState.value = [];\n          }\n        }\n        newState.open = false;\n        newState.highlightedIndex = highlightFirstItemOnOpen ? 0 : null;\n        break;\n      case Downshift.stateChangeTypes.keyDownArrowDown:\n      case Downshift.stateChangeTypes.keyDownArrowUp:\n        if (changes.isOpen !== undefined) {\n          newState.open = changes.isOpen;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          if (changes.isOpen) {\n            const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n            if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n              newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n            }\n\n            if (!search) {\n              listRef.current.focus();\n            }\n          } else {\n            newState.highlightedIndex = null;\n          }\n        }\n      case Downshift.stateChangeTypes['keyDownHome']:\n      case Downshift.stateChangeTypes['keyDownEnd']:\n        if (open && _.isNumber(changes.highlightedIndex)) {\n          newState.highlightedIndex = changes.highlightedIndex;\n          newState.itemIsFromKeyboard = true;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.mouseUp:\n        if (open) {\n          newState.open = false;\n          newState.highlightedIndex = null;\n        }\n\n        break;\n      case Downshift.stateChangeTypes.clickButton:\n      case Downshift.stateChangeTypes.keyDownSpaceButton:\n        newState.open = changes.isOpen;\n\n        if (changes.isOpen) {\n          const highlightedIndexOnArrowKeyOpen = getHighlightedIndexOnArrowKeyOpen(changes);\n\n          if (_.isNumber(highlightedIndexOnArrowKeyOpen)) {\n            newState.highlightedIndex = highlightedIndexOnArrowKeyOpen;\n          }\n\n          if (!search) {\n            listRef.current.focus();\n          }\n        } else {\n          newState.highlightedIndex = null;\n        }\n        break;\n      case Downshift.stateChangeTypes.itemMouseEnter:\n        newState.highlightedIndex = changes.highlightedIndex;\n        newState.itemIsFromKeyboard = false;\n        break;\n      case Downshift.stateChangeTypes.unknown:\n        if (changes.selectedItem) {\n          newState.value = multiple ? [...value, changes.selectedItem] : [changes.selectedItem];\n          newState.searchQuery = multiple ? '' : changes.inputValue;\n          newState.open = false;\n          newState.highlightedIndex = changes.highlightedIndex;\n\n          tryFocusTriggerButton();\n        } else {\n          newState.open = changes.isOpen;\n        }\n      default:\n        break;\n    }\n\n    if (_.isEmpty(newState)) {\n      return;\n    }\n\n    const handlers: (keyof DropdownProps)[] = [\n      newState.highlightedIndex !== undefined && 'onHighlightedIndexChange',\n      newState.open !== undefined && 'onOpenChange',\n      newState.searchQuery !== undefined && 'onSearchQueryChange',\n      newState.value !== undefined && 'onChange',\n    ].filter(Boolean) as (keyof DropdownProps)[];\n\n    setStateAndInvokeHandler(handlers, null, newState);\n  };\n\n  const isSelectedItemActive = (index: number): boolean => {\n    return index === activeSelectedIndex;\n  };\n\n  const handleItemOverrides = (\n    item: ShorthandValue<DropdownItemProps>,\n    index: number,\n    getItemProps: (options: GetItemPropsOptions<ShorthandValue<DropdownItemProps>>) => any,\n    selected: boolean,\n  ) => (predefinedProps: DropdownItemProps) => ({\n    accessibilityItemProps: {\n      ...getItemProps({\n        item,\n        index,\n        disabled: item['disabled'],\n        onClick: e => {\n          e.stopPropagation();\n          e.nativeEvent.stopImmediatePropagation();\n          _.invoke(predefinedProps, 'onClick', e, predefinedProps);\n        },\n      }),\n      // for single selection the selected item should have aria-selected, instead of the highlighted\n      ...(!multiple && {\n        'aria-selected': selected,\n      }),\n    },\n  });\n\n  const handleSelectedItemOverrides = (item: ShorthandValue<DropdownItemProps>) => (\n    predefinedProps: DropdownSelectedItemProps,\n  ) => ({\n    onRemove: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n    onClick: (e: React.SyntheticEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n        activeSelectedIndex: value.indexOf(item),\n      });\n      e.stopPropagation();\n      _.invoke(predefinedProps, 'onClick', e, dropdownSelectedItemProps);\n    },\n    onKeyDown: (e: React.KeyboardEvent, dropdownSelectedItemProps: DropdownSelectedItemProps) => {\n      handleSelectedItemKeyDown(e, item, predefinedProps, dropdownSelectedItemProps);\n    },\n  });\n\n  const handleSearchInputOverrides = (\n    highlightedIndex: number,\n    selectItemAtIndex: (index: number, otherStateToSet?: Partial<StateChangeOptions<any>>, cb?: () => void) => void,\n    toggleMenu: () => void,\n    accessibilityComboboxProps: Object,\n    getInputProps: (options?: GetInputPropsOptions) => any,\n  ) => (predefinedProps: DropdownSearchInputProps) => {\n    const handleInputBlur = (e: React.SyntheticEvent, searchInputProps: DropdownSearchInputProps) => {\n      if (!disabled) {\n        setFocused(false);\n        setIsFromKeyboard(detectIsFromKeyboard());\n\n        e.nativeEvent['preventDownshiftDefault'] = true;\n      }\n\n      _.invoke(predefinedProps, 'onInputBlur', e, searchInputProps);\n    };\n\n    const handleInputKeyDown = (\n      e: React.KeyboardEvent<HTMLInputElement>,\n      searchInputProps: DropdownSearchInputProps,\n    ) => {\n      if (!disabled) {\n        switch (getCode(e)) {\n          // https://github.com/downshift-js/downshift/issues/1097\n          // Downshift skips Home/End if Deopdown is opened\n          case keyboardKey.Home:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.End:\n            e.nativeEvent['preventDownshiftDefault'] = filteredItems.length === 0;\n            break;\n          case keyboardKey.Tab:\n            e.stopPropagation();\n            handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n            break;\n          case keyboardKey.ArrowLeft:\n            e.stopPropagation();\n            if (!context.rtl) {\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.ArrowRight:\n            e.stopPropagation();\n            if (context.rtl) {\n              trySetLastSelectedItemAsActive();\n            }\n            break;\n          case keyboardKey.Backspace:\n            e.stopPropagation();\n            tryRemoveItemFromValue();\n            break;\n          case keyboardKey.Escape:\n            // If dropdown list is open ESC should close it and not propagate to the parent\n            // otherwise event should propagate\n            if (open) {\n              e.stopPropagation();\n            }\n          default:\n            break;\n        }\n      }\n\n      _.invoke(predefinedProps, 'onInputKeyDown', e, {\n        ...searchInputProps,\n        highlightedIndex,\n        selectItemAtIndex,\n      });\n    };\n\n    return {\n      // getInputProps adds Downshift handlers. We also add our own by passing them as params to that function.\n      // user handlers were also added to our handlers previously, at the beginning of this function.\n      accessibilityInputProps: {\n        ...getInputProps({\n          disabled,\n          onBlur: e => {\n            handleInputBlur(e, predefinedProps);\n          },\n          onKeyDown: e => {\n            handleInputKeyDown(e, predefinedProps);\n          },\n          onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\n            // we prevent the onChange input event to bubble up to our Dropdown handler,\n            // since in Dropdown it gets handled as onSearchQueryChange.\n            e.stopPropagation();\n\n            // A state modification should be triggered there otherwise it will go to an another frame and will break\n            // cursor position:\n            // https://github.com/facebook/react/issues/955#issuecomment-469352730\n            setSearchQuery(e.target.value);\n          },\n        }),\n      },\n      // same story as above for getRootProps.\n      accessibilityComboboxProps,\n\n      inputRef: (node: HTMLInputElement) => {\n        handleRef(predefinedProps.inputRef, node);\n        inputRef.current = node;\n      },\n      onFocus: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        if (!disabled) {\n          setFocused(true);\n          setIsFromKeyboard(detectIsFromKeyboard());\n        }\n\n        _.invoke(predefinedProps, 'onFocus', e, searchInputProps);\n      },\n      onInputBlur: (e: React.FocusEvent, searchInputProps: DropdownSearchInputProps) => {\n        handleInputBlur(e, searchInputProps);\n      },\n      onInputKeyDown: (e: React.KeyboardEvent<HTMLInputElement>, searchInputProps: DropdownSearchInputProps) => {\n        handleInputKeyDown(e, searchInputProps);\n      },\n    };\n  };\n\n  /**\n   * Custom Tab selection logic, at least until Downshift will implement selection on blur.\n   * Also keeps focus on multiple selection dropdown when selecting by Tab.\n   */\n  const handleTabSelection = (\n    e: React.SyntheticEvent,\n    highlightedIndex: number,\n    selectItemAtIndex: (highlightedIndex: number) => void,\n    toggleMenu: () => void,\n  ): void => {\n    if (open) {\n      if (!_.isNil(highlightedIndex) && filteredItems.length && !items[highlightedIndex]['disabled']) {\n        selectItemAtIndex(highlightedIndex);\n\n        if (multiple && !moveFocusOnTab) {\n          e.preventDefault();\n        }\n      } else {\n        toggleMenu();\n      }\n    }\n  };\n\n  const trySetLastSelectedItemAsActive = () => {\n    if (!multiple || (inputRef.current && inputRef.current.selectionStart !== 0)) {\n      return;\n    }\n\n    if (value.length > 0) {\n      // If last element was already active, perform a 'reset' of activeSelectedIndex.\n      if (activeSelectedIndex === value.length - 1) {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      } else {\n        setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n          activeSelectedIndex: value.length - 1,\n        });\n      }\n    }\n  };\n\n  const tryRemoveItemFromValue = () => {\n    if (\n      multiple &&\n      (searchQuery === '' || (inputRef.current.selectionStart === 0 && inputRef.current.selectionEnd === 0)) &&\n      value.length > 0\n    ) {\n      removeItemFromValue();\n    }\n  };\n\n  const handleClear = (e: React.SyntheticEvent<HTMLElement>) => {\n    setStateAndInvokeHandler(['onChange', 'onActiveSelectedIndexChange', 'onHighlightedIndexChange'], e, {\n      activeSelectedIndex: multiple ? null : undefined,\n      highlightedIndex: highlightFirstItemOnOpen ? 0 : null,\n      open: false,\n      searchQuery: search ? '' : undefined,\n      value: [],\n    });\n\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n  };\n\n  const handleContainerClick = () => {\n    tryFocusSearchInput();\n  };\n\n  const handleTriggerButtonKeyDown = (e: React.KeyboardEvent) => {\n    switch (getCode(e)) {\n      case keyboardKey.ArrowLeft:\n        if (!context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      case keyboardKey.ArrowRight:\n        if (context.rtl) {\n          trySetLastSelectedItemAsActive();\n        }\n        return;\n      default:\n        return;\n    }\n  };\n\n  const handleListKeyDown = (\n    e: React.KeyboardEvent,\n    highlightedIndex: number,\n    accessibilityInputPropsKeyDown: (e) => any,\n    toggleMenu: () => void,\n    selectItemAtIndex: (index: number) => void,\n  ) => {\n    const keyCode = getCode(e);\n    switch (keyCode) {\n      case keyboardKey.Tab:\n        handleTabSelection(e, highlightedIndex, selectItemAtIndex, toggleMenu);\n        return;\n      case keyboardKey.Escape:\n        accessibilityInputPropsKeyDown(e);\n        tryFocusTriggerButton();\n        e.stopPropagation();\n        return;\n      default:\n        const keyString = String.fromCharCode(keyCode);\n        if (/[a-zA-Z0-9]/.test(keyString)) {\n          setHighlightedIndexOnCharKeyDown(keyString);\n        }\n        accessibilityInputPropsKeyDown(e);\n        return;\n    }\n  };\n\n  const handleSelectedItemKeyDown = (\n    e: React.KeyboardEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    const previousKey = context.rtl ? keyboardKey.ArrowRight : keyboardKey.ArrowLeft;\n    const nextKey = context.rtl ? keyboardKey.ArrowLeft : keyboardKey.ArrowRight;\n\n    switch (getCode(e)) {\n      case keyboardKey.Delete:\n      case keyboardKey.Backspace:\n        handleSelectedItemRemove(e, item, predefinedProps, dropdownSelectedItemProps);\n        break;\n      case previousKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex) && activeSelectedIndex > 0) {\n          setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n            activeSelectedIndex: activeSelectedIndex - 1,\n          });\n        }\n        break;\n      case nextKey:\n        if (value.length > 0 && !_.isNil(activeSelectedIndex)) {\n          if (activeSelectedIndex < value.length - 1) {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: activeSelectedIndex + 1,\n            });\n          } else {\n            setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n              activeSelectedIndex: null,\n            });\n\n            if (search) {\n              e.preventDefault(); // prevents caret to forward one position in input.\n              inputRef.current.focus();\n            } else {\n              buttonRef.current.focus();\n            }\n          }\n        }\n        break;\n      default:\n        break;\n    }\n    _.invoke(predefinedProps, 'onKeyDown', e, dropdownSelectedItemProps);\n  };\n\n  const handleTriggerButtonOrListFocus = () => {\n    setFocused(true);\n    setIsFromKeyboard(detectIsFromKeyboard());\n  };\n\n  const handleTriggerButtonBlur = e => {\n    if (listRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  const handleListBlur = e => {\n    if (buttonRef.current !== e.relatedTarget) {\n      setFocused(false);\n      setIsFromKeyboard(detectIsFromKeyboard());\n    }\n  };\n\n  /**\n   * Sets highlightedIndex to be the item that starts with the character keys the\n   * user has typed. Only used in non-search dropdowns.\n   *\n   * @param keystring - The string the item needs to start with. It is composed by typing keys in fast succession.\n   */\n  const setHighlightedIndexOnCharKeyDown = (keyString: string): void => {\n    const newStartingString = `${startingString}${keyString.toLowerCase()}`;\n    let newHighlightedIndex = -1;\n\n    setStartingString(newStartingString);\n    clearStartingString();\n\n    if (_.isNumber(highlightedIndex)) {\n      newHighlightedIndex = _.findIndex(\n        filteredItemStrings,\n        item => item.startsWith(newStartingString),\n        highlightedIndex + (startingString.length > 0 ? 0 : 1),\n      );\n    }\n\n    if (newHighlightedIndex < 0) {\n      newHighlightedIndex = _.findIndex(filteredItemStrings, item => item.startsWith(newStartingString));\n    }\n\n    if (newHighlightedIndex >= 0) {\n      setStateAndInvokeHandler(['onHighlightedIndexChange'], null, {\n        highlightedIndex: newHighlightedIndex,\n      });\n    }\n  };\n\n  const handleSelectedItemRemove = (\n    e: React.SyntheticEvent,\n    item: ShorthandValue<DropdownItemProps>,\n    predefinedProps: DropdownSelectedItemProps,\n    dropdownSelectedItemProps: DropdownSelectedItemProps,\n  ) => {\n    setStateAndInvokeHandler(['onActiveSelectedIndexChange'], null, {\n      activeSelectedIndex: null,\n    });\n    removeItemFromValue(item);\n    tryFocusSearchInput();\n    tryFocusTriggerButton();\n    _.invoke(predefinedProps, 'onRemove', e, dropdownSelectedItemProps);\n  };\n\n  const removeItemFromValue = (item?: ShorthandValue<DropdownItemProps>) => {\n    let poppedItem = item;\n    let newValue = [...value];\n\n    if (poppedItem) {\n      newValue = newValue.filter(currentElement => currentElement !== item);\n    } else {\n      poppedItem = newValue.pop();\n    }\n\n    if (getA11ySelectionMessage && getA11ySelectionMessage.onRemove) {\n      setA11ySelectionMessage(getA11ySelectionMessage.onRemove(poppedItem));\n    }\n\n    setStateAndInvokeHandler(['onChange'], null, { value: newValue });\n  };\n\n  /**\n   * Calls setState and invokes event handler exposed to user.\n   * We don't have the event object for most events coming from Downshift se we send an empty event\n   * because we want to keep the event handling interface\n   */\n  const setStateAndInvokeHandler = (\n    handlerNames: (keyof DropdownProps)[],\n    event: React.SyntheticEvent<HTMLElement>,\n    newState: DropdownStateForInvoke,\n  ) => {\n    const proposedValue = _.isNil(newState.value) ? value : newState.value;\n    // `proposedValue` should be normalized for single/multiple variations, `null` condition is\n    // required as first item can be undefined\n    const newValue = multiple ? proposedValue : proposedValue[0] || null;\n\n    if (newState.hasOwnProperty('activeSelectedIndex')) {\n      setActiveSelectedIndex(newState.activeSelectedIndex);\n    }\n    if (newState.hasOwnProperty('highlightedIndex')) {\n      setHighlightedIndex(newState.highlightedIndex);\n    }\n    if (newState.hasOwnProperty('itemIsFromKeyboard')) {\n      setItemIsFromKeyboard(newState.itemIsFromKeyboard);\n    }\n    if (newState.hasOwnProperty('open')) {\n      setOpen(newState.open);\n    }\n    if (newState.hasOwnProperty('searchQuery')) {\n      setSearchQuery(newState.searchQuery);\n    }\n    if (newState.hasOwnProperty('value')) {\n      setValue(newState.value);\n    }\n\n    handlerNames.forEach(handlerName => {\n      _.invoke(props, handlerName, event, { ...props, ...newState, value: newValue });\n    });\n  };\n\n  const tryFocusTriggerButton = () => {\n    if (!search && buttonRef.current) {\n      buttonRef.current.focus();\n    }\n  };\n\n  const tryFocusSearchInput = () => {\n    if (search && inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n\n  /**\n   * If there is no value we use the placeholder value\n   * otherwise, for single selection we convert the value with itemToString\n   * and for multiple selection we return empty string, the values are rendered by renderSelectedItems\n   */\n  const getSelectedItemAsString = (value: ShorthandValue<DropdownItemProps>): string => {\n    if (!value) {\n      return search ? '' : placeholder;\n    }\n\n    if (multiple) {\n      return '';\n    }\n\n    return itemToString(value);\n  };\n\n  const getHighlightedIndexOnArrowKeyOpen = (\n    changes: StateChangeOptions<ShorthandValue<DropdownItemProps>>,\n  ): number => {\n    const isArrowUp = changes.type === Downshift.stateChangeTypes.keyDownArrowUp;\n    const isArrowDown = changes.type === Downshift.stateChangeTypes.keyDownArrowDown;\n    const itemsLength = filteredItems.length;\n\n    if (highlightedIndex) {\n      return highlightedIndex;\n    }\n\n    if (highlightFirstItemOnOpen) {\n      // otherwise, if highlightFirstItemOnOpen prop is provied, highlight first item.\n      return 0;\n    }\n\n    if (!multiple && !search && value.length > 0) {\n      // in single selection, if there is a selected item, highlight it.\n      const offset = isArrowUp ? -1 : isArrowDown ? 1 : 0;\n      const newHighlightedIndex = items.indexOf(value[0]) + offset;\n      if (newHighlightedIndex >= itemsLength) {\n        return 0;\n      }\n      if (newHighlightedIndex < 0) {\n        return itemsLength - 1;\n      }\n      return newHighlightedIndex;\n    }\n\n    if (isArrowDown) {\n      return 0;\n    }\n    if (isArrowUp) {\n      return itemsLength - 1;\n    }\n\n    return null;\n  };\n\n  /**\n   * Function that sets and cleans the selection message after it has been set,\n   * so it is not read anymore via virtual cursor.\n   */\n  const setA11ySelectionMessage = (a11ySelectionStatus: string): void => {\n    setA11ySelectionStatus(a11ySelectionStatus);\n    clearA11ySelectionMessage();\n  };\n\n  React.useEffect(() => {\n    return () => {\n      clearStartingString.cancel();\n      clearA11ySelectionMessage.cancel();\n    };\n  }, [clearA11ySelectionMessage, clearStartingString]);\n\n  const element = (\n    <ElementType\n      className={classes.root}\n      onBlur={handleOnBlur}\n      onChange={handleChange}\n      {...unhandledProps}\n      {...(process.env.NODE_ENV === 'test' && { 'data-test-focused': focused })}\n    >\n      <Downshift\n        isOpen={open}\n        inputValue={search ? searchQuery : null}\n        stateReducer={downshiftStateReducer}\n        itemToString={itemToString}\n        // downshift does not work with arrays as selectedItem.\n        selectedItem={multiple || !value.length ? null : value[0]}\n        scrollIntoView={(node: HTMLElement, menu: HTMLElement) => {\n          if (node) {\n            const { children } = menu;\n            let nodeToScroll = node;\n            /**\n             * If it's loading downshift doesn't take the last node with loadingMessage\n             * in consideration to scrolld so we need to check if the current is the\n             * antepenultimate and is so scroll the loading into view, same for headerMessage\n             */\n            if (loading && children[children.length - 2] === node) {\n              nodeToScroll = children[children.length - 1] as HTMLElement;\n            } else if (headerMessage && children[1] === node) {\n              nodeToScroll = children[0] as HTMLElement;\n            }\n\n            // Replicating same config that Downshift uses\n            const actions = computeScrollIntoView(nodeToScroll, {\n              scrollMode: 'if-needed',\n              block: 'nearest',\n              inline: 'nearest',\n            });\n            actions.forEach(({ el, top, left }) => {\n              el.scrollTop = top;\n              el.scrollLeft = left;\n            });\n          }\n        }}\n        getA11yStatusMessage={getA11yStatusMessage}\n        highlightedIndex={highlightedIndex}\n        onStateChange={handleStateChange}\n        labelId={ariaLabelledby}\n        environment={context.target?.defaultView}\n        inputId={searchInput && searchInput['id'] ? searchInput['id'] : undefined}\n      >\n        {({\n          getInputProps,\n          getItemProps,\n          getMenuProps,\n          getRootProps,\n          getToggleButtonProps,\n          toggleMenu,\n          highlightedIndex,\n          selectItemAtIndex,\n        }) => {\n          const { innerRef, ...accessibilityRootPropsRest } = getRootProps(\n            { refKey: 'innerRef' },\n            { suppressRefError: true },\n          );\n          const showClearIndicator = clearable && value.length > 0;\n\n          return (\n            <Ref innerRef={innerRef}>\n              <div\n                ref={containerRef}\n                className={cx(dropdownSlotClassNames.container, classes.container)}\n                onClick={search && !open ? handleContainerClick : undefined}\n              >\n                <div ref={selectedItemsRef} className={cx(dropdownSlotClassNames.selectedItems, classes.selectedItems)}>\n                  {multiple && renderSelectedItems()}\n                  {search\n                    ? renderSearchInput(\n                        accessibilityRootPropsRest,\n                        highlightedIndex,\n                        getInputProps,\n                        selectItemAtIndex,\n                        toggleMenu,\n                        variables,\n                      )\n                    : renderTriggerButton(getToggleButtonProps)}\n                </div>\n                {showClearIndicator\n                  ? Box.create(clearIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.clearIndicator,\n                        styles: resolvedStyles.clearIndicator,\n                        accessibility: indicatorBehavior,\n                        ...(!search && { tabIndex: 0, role: 'button' }),\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: (e: React.SyntheticEvent<HTMLElement>) => {\n                          _.invoke(predefinedProps, 'onClick', e);\n                          handleClear(e);\n                        },\n                      }),\n                    })\n                  : Box.create(toggleIndicator, {\n                      defaultProps: () => ({\n                        className: dropdownSlotClassNames.toggleIndicator,\n                        styles: resolvedStyles.toggleIndicator,\n                        accessibility: indicatorBehavior,\n                      }),\n                      overrideProps: (predefinedProps: BoxProps) => ({\n                        onClick: e => {\n                          if (!disabled) {\n                            getToggleButtonProps({ disabled }).onClick(e);\n                          }\n\n                          _.invoke(predefinedProps, 'onClick', e);\n                        },\n                      }),\n                    })}\n                {renderItemsList(\n                  highlightedIndex,\n                  toggleMenu,\n                  selectItemAtIndex,\n                  getMenuProps,\n                  getItemProps,\n                  getInputProps,\n                )}\n              </div>\n            </Ref>\n          );\n        }}\n      </Downshift>\n      <Portal open={!!getA11ySelectionMessage}>\n        <div role=\"status\" aria-live=\"polite\" aria-relevant=\"additions text\" style={screenReaderContainerStyles}>\n          {a11ySelectionStatus}\n        </div>\n      </Portal>\n    </ElementType>\n  );\n  setEnd();\n\n  return element;\n};\n\nDropdown.displayName = 'Dropdown';\n\nDropdown.propTypes = {\n  ...commonPropTypes.createCommon({\n    accessibility: false,\n    children: false,\n    content: false,\n  }),\n  activeSelectedIndex: PropTypes.number,\n  align: PropTypes.oneOf(ALIGNMENTS),\n  checkable: PropTypes.bool,\n  checkableIndicator: customPropTypes.shorthandAllowingChildren,\n  clearable: PropTypes.bool,\n  clearIndicator: customPropTypes.shorthandAllowingChildren,\n  defaultActiveSelectedIndex: PropTypes.number,\n  defaultOpen: PropTypes.bool,\n  defaultHighlightedIndex: PropTypes.number,\n  defaultSearchQuery: PropTypes.string,\n  defaultValue: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n  disabled: PropTypes.bool,\n  error: PropTypes.bool,\n  fluid: PropTypes.bool,\n  getA11ySelectionMessage: PropTypes.object,\n  getA11yStatusMessage: PropTypes.func,\n  highlightFirstItemOnOpen: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  inline: PropTypes.bool,\n  inverted: PropTypes.bool,\n  items: customPropTypes.collectionShorthand,\n  itemToString: PropTypes.func,\n  itemToValue: PropTypes.func,\n  headerMessage: customPropTypes.itemShorthand,\n  list: customPropTypes.itemShorthand,\n  loading: PropTypes.bool,\n  loadingMessage: customPropTypes.itemShorthand,\n  moveFocusOnTab: PropTypes.bool,\n  multiple: PropTypes.bool,\n  noResultsMessage: customPropTypes.itemShorthand,\n  offset: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.arrayOf(PropTypes.number) as PropTypes.Requireable<[number, number]>,\n  ]),\n  onOpenChange: PropTypes.func,\n  onSearchQueryChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onActiveSelectedIndexChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  open: PropTypes.bool,\n  placeholder: PropTypes.string,\n  position: PropTypes.oneOf(POSITIONS),\n  renderItem: PropTypes.func,\n  renderSelectedItem: PropTypes.func,\n  search: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n  searchQuery: PropTypes.string,\n  searchInput: customPropTypes.itemShorthand,\n  toggleIndicator: customPropTypes.shorthandAllowingChildren,\n  triggerButton: customPropTypes.itemShorthand,\n  unstable_pinned: PropTypes.bool,\n  value: PropTypes.oneOfType([customPropTypes.itemShorthand, customPropTypes.collectionShorthand]),\n};\nDropdown.handledProps = Object.keys(Dropdown.propTypes) as any;\n\nDropdown.defaultProps = {\n  align: 'start',\n  clearIndicator: {},\n  itemToString: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  itemToValue: item => {\n    if (!item || React.isValidElement(item)) {\n      return '';\n    }\n\n    // targets DropdownItem shorthand objects\n    return (item as any).header || String(item);\n  },\n  list: {},\n  position: 'below',\n  toggleIndicator: {},\n  triggerButton: {},\n};\n\nDropdown.Item = DropdownItem;\nDropdown.SearchInput = DropdownSearchInput;\nDropdown.SelectedItem = DropdownSelectedItem;\n"]},"metadata":{},"sourceType":"module"}