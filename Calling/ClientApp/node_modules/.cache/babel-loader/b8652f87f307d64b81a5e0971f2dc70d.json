{"ast":null,"code":"// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { __read, __spread, __values } from \"tslib\";\nimport { log } from \"./log\";\nvar debugEnvVariable = typeof process !== \"undefined\" && process.env && process.env.DEBUG || undefined;\nvar enabledString;\nvar enabledNamespaces = [];\nvar skippedNamespaces = [];\nvar debuggers = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nfunction enable(namespaces) {\n  var e_1, _a, e_2, _b;\n\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  var wildcard = /\\*/g;\n  var namespaceList = namespaces.split(\",\").map(function (ns) {\n    return ns.trim().replace(wildcard, \".*?\");\n  });\n\n  try {\n    for (var namespaceList_1 = __values(namespaceList), namespaceList_1_1 = namespaceList_1.next(); !namespaceList_1_1.done; namespaceList_1_1 = namespaceList_1.next()) {\n      var ns = namespaceList_1_1.value;\n\n      if (ns.startsWith(\"-\")) {\n        skippedNamespaces.push(new RegExp(\"^\" + ns.substr(1) + \"$\"));\n      } else {\n        enabledNamespaces.push(new RegExp(\"^\" + ns + \"$\"));\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (namespaceList_1_1 && !namespaceList_1_1.done && (_a = namespaceList_1.return)) _a.call(namespaceList_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  try {\n    for (var debuggers_1 = __values(debuggers), debuggers_1_1 = debuggers_1.next(); !debuggers_1_1.done; debuggers_1_1 = debuggers_1.next()) {\n      var instance = debuggers_1_1.value;\n      instance.enabled = enabled(instance.namespace);\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (debuggers_1_1 && !debuggers_1_1.done && (_b = debuggers_1.return)) _b.call(debuggers_1);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n\nfunction enabled(namespace) {\n  var e_3, _a, e_4, _b;\n\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  try {\n    for (var skippedNamespaces_1 = __values(skippedNamespaces), skippedNamespaces_1_1 = skippedNamespaces_1.next(); !skippedNamespaces_1_1.done; skippedNamespaces_1_1 = skippedNamespaces_1.next()) {\n      var skipped = skippedNamespaces_1_1.value;\n\n      if (skipped.test(namespace)) {\n        return false;\n      }\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (skippedNamespaces_1_1 && !skippedNamespaces_1_1.done && (_a = skippedNamespaces_1.return)) _a.call(skippedNamespaces_1);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n\n  try {\n    for (var enabledNamespaces_1 = __values(enabledNamespaces), enabledNamespaces_1_1 = enabledNamespaces_1.next(); !enabledNamespaces_1_1.done; enabledNamespaces_1_1 = enabledNamespaces_1.next()) {\n      var enabled_1 = enabledNamespaces_1_1.value;\n\n      if (enabled_1.test(namespace)) {\n        return true;\n      }\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (enabledNamespaces_1_1 && !enabledNamespaces_1_1.done && (_b = enabledNamespaces_1.return)) _b.call(enabledNamespaces_1);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n\n  return false;\n}\n\nfunction disable() {\n  var result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace) {\n  function debug() {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!newDebugger.enabled) {\n      return;\n    }\n\n    if (args.length > 0) {\n      args[0] = namespace + \" \" + args[0];\n    }\n\n    newDebugger.log.apply(newDebugger, __spread(args));\n  }\n\n  var newDebugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy: destroy,\n    log: debugObj.log,\n    namespace: namespace,\n    extend: extend\n  });\n  debuggers.push(newDebugger);\n  return newDebugger;\n}\n\nfunction destroy() {\n  var index = debuggers.indexOf(this);\n\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n\n  return false;\n}\n\nfunction extend(namespace) {\n  var newDebugger = createDebugger(this.namespace + \":\" + namespace);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nvar debugObj = Object.assign(function (namespace) {\n  return createDebugger(namespace);\n}, {\n  enable: enable,\n  enabled: enabled,\n  disable: disable,\n  log: log\n});\nexport default debugObj;","map":{"version":3,"sources":["../../src/debug.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { __read, __spread, __values } from \"tslib\";\nimport { log } from \"./log\";\nvar debugEnvVariable = (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\nvar enabledString;\nvar enabledNamespaces = [];\nvar skippedNamespaces = [];\nvar debuggers = [];\nif (debugEnvVariable) {\n    enable(debugEnvVariable);\n}\nfunction enable(namespaces) {\n    var e_1, _a, e_2, _b;\n    enabledString = namespaces;\n    enabledNamespaces = [];\n    skippedNamespaces = [];\n    var wildcard = /\\*/g;\n    var namespaceList = namespaces.split(\",\").map(function (ns) { return ns.trim().replace(wildcard, \".*?\"); });\n    try {\n        for (var namespaceList_1 = __values(namespaceList), namespaceList_1_1 = namespaceList_1.next(); !namespaceList_1_1.done; namespaceList_1_1 = namespaceList_1.next()) {\n            var ns = namespaceList_1_1.value;\n            if (ns.startsWith(\"-\")) {\n                skippedNamespaces.push(new RegExp(\"^\" + ns.substr(1) + \"$\"));\n            }\n            else {\n                enabledNamespaces.push(new RegExp(\"^\" + ns + \"$\"));\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (namespaceList_1_1 && !namespaceList_1_1.done && (_a = namespaceList_1.return)) _a.call(namespaceList_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    try {\n        for (var debuggers_1 = __values(debuggers), debuggers_1_1 = debuggers_1.next(); !debuggers_1_1.done; debuggers_1_1 = debuggers_1.next()) {\n            var instance = debuggers_1_1.value;\n            instance.enabled = enabled(instance.namespace);\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (debuggers_1_1 && !debuggers_1_1.done && (_b = debuggers_1.return)) _b.call(debuggers_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n}\nfunction enabled(namespace) {\n    var e_3, _a, e_4, _b;\n    if (namespace.endsWith(\"*\")) {\n        return true;\n    }\n    try {\n        for (var skippedNamespaces_1 = __values(skippedNamespaces), skippedNamespaces_1_1 = skippedNamespaces_1.next(); !skippedNamespaces_1_1.done; skippedNamespaces_1_1 = skippedNamespaces_1.next()) {\n            var skipped = skippedNamespaces_1_1.value;\n            if (skipped.test(namespace)) {\n                return false;\n            }\n        }\n    }\n    catch (e_3_1) { e_3 = { error: e_3_1 }; }\n    finally {\n        try {\n            if (skippedNamespaces_1_1 && !skippedNamespaces_1_1.done && (_a = skippedNamespaces_1.return)) _a.call(skippedNamespaces_1);\n        }\n        finally { if (e_3) throw e_3.error; }\n    }\n    try {\n        for (var enabledNamespaces_1 = __values(enabledNamespaces), enabledNamespaces_1_1 = enabledNamespaces_1.next(); !enabledNamespaces_1_1.done; enabledNamespaces_1_1 = enabledNamespaces_1.next()) {\n            var enabled_1 = enabledNamespaces_1_1.value;\n            if (enabled_1.test(namespace)) {\n                return true;\n            }\n        }\n    }\n    catch (e_4_1) { e_4 = { error: e_4_1 }; }\n    finally {\n        try {\n            if (enabledNamespaces_1_1 && !enabledNamespaces_1_1.done && (_b = enabledNamespaces_1.return)) _b.call(enabledNamespaces_1);\n        }\n        finally { if (e_4) throw e_4.error; }\n    }\n    return false;\n}\nfunction disable() {\n    var result = enabledString || \"\";\n    enable(\"\");\n    return result;\n}\nfunction createDebugger(namespace) {\n    function debug() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!newDebugger.enabled) {\n            return;\n        }\n        if (args.length > 0) {\n            args[0] = namespace + \" \" + args[0];\n        }\n        newDebugger.log.apply(newDebugger, __spread(args));\n    }\n    var newDebugger = Object.assign(debug, {\n        enabled: enabled(namespace),\n        destroy: destroy,\n        log: debugObj.log,\n        namespace: namespace,\n        extend: extend\n    });\n    debuggers.push(newDebugger);\n    return newDebugger;\n}\nfunction destroy() {\n    var index = debuggers.indexOf(this);\n    if (index >= 0) {\n        debuggers.splice(index, 1);\n        return true;\n    }\n    return false;\n}\nfunction extend(namespace) {\n    var newDebugger = createDebugger(this.namespace + \":\" + namespace);\n    newDebugger.log = this.log;\n    return newDebugger;\n}\nvar debugObj = Object.assign(function (namespace) {\n    return createDebugger(namespace);\n}, {\n    enable: enable,\n    enabled: enabled,\n    disable: disable,\n    log: log\n});\nexport default debugObj;\n//# sourceMappingURL=debug.js.map"]},"metadata":{},"sourceType":"module"}