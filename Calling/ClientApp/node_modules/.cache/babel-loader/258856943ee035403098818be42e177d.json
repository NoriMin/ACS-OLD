{"ast":null,"code":"import*as React from'react';import{Stack,CommandButton}from'@fluentui/react';import{MicIcon,MicOffIcon,CallVideoIcon,CallVideoOffIcon,CallEndIcon,CallControlPresentNewIcon,CallControlCloseTrayIcon}from'@fluentui/react-icons-northstar';import{controlButtonStyle,endCallButtonStyle,endCallButtonTextStyle,mediaControlStyles,fullWidth,controlButtonDisabledStyle}from'./styles/MediaControls.styles';export default(function(props){var cameraActive=props.cameraPermission==='Denied'?false:props.cameraActive;var cameraDisabled=props.cameraPermission==='Denied';var cameraOnClick=props.cameraPermission!=='Denied'?props.onCameraChange:undefined;var micActive=props.microphonePermission==='Denied'?false:props.micActive;var micDisabled=props.microphonePermission==='Denied';var micOnClick=props.microphonePermission!=='Denied'?props.onMicChange:undefined;var screenShareDisabled=!!props.activeScreenShareStream;return/*#__PURE__*/React.createElement(Stack,{className:mediaControlStyles},/*#__PURE__*/React.createElement(CommandButton,{onKeyDownCapture:function onKeyDownCapture(e){if(e.keyCode===13&&props.localVideoRendererIsBusy){e.preventDefault();}},disabled:cameraDisabled,onClick:cameraOnClick,className:controlButtonStyle},/*#__PURE__*/React.createElement(\"div\",{className:fullWidth},cameraActive?/*#__PURE__*/React.createElement(CallVideoIcon,{size:\"medium\"}):/*#__PURE__*/React.createElement(CallVideoOffIcon,{size:\"medium\"}))),/*#__PURE__*/React.createElement(CommandButton,{onClick:micOnClick,disabled:micDisabled,className:controlButtonStyle},/*#__PURE__*/React.createElement(\"div\",{className:fullWidth},micActive?/*#__PURE__*/React.createElement(MicIcon,{size:\"medium\"}):/*#__PURE__*/React.createElement(MicOffIcon,{size:\"medium\"}))),props.isLocalScreenShareSupportedInBrowser()&&/*#__PURE__*/React.createElement(CommandButton,{disabled:screenShareDisabled,onClick:props.onScreenShareChange,className:screenShareDisabled?controlButtonDisabledStyle:controlButtonStyle},/*#__PURE__*/React.createElement(\"div\",{className:fullWidth},props.screenShareActive?/*#__PURE__*/React.createElement(CallControlCloseTrayIcon,{size:\"medium\"}):/*#__PURE__*/React.createElement(CallControlPresentNewIcon,{size:\"medium\"}))),/*#__PURE__*/React.createElement(CommandButton,{onClick:props.onEndCallClick,className:props.compressedMode?controlButtonStyle:endCallButtonStyle},/*#__PURE__*/React.createElement(\"div\",{className:fullWidth},/*#__PURE__*/React.createElement(CallEndIcon,{size:\"medium\"}),!props.compressedMode&&/*#__PURE__*/React.createElement(\"span\",{className:endCallButtonTextStyle},\"Leave\"))));});","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/components/MediaControls.tsx"],"names":["React","Stack","CommandButton","MicIcon","MicOffIcon","CallVideoIcon","CallVideoOffIcon","CallEndIcon","CallControlPresentNewIcon","CallControlCloseTrayIcon","controlButtonStyle","endCallButtonStyle","endCallButtonTextStyle","mediaControlStyles","fullWidth","controlButtonDisabledStyle","props","cameraActive","cameraPermission","cameraDisabled","cameraOnClick","onCameraChange","undefined","micActive","microphonePermission","micDisabled","micOnClick","onMicChange","screenShareDisabled","activeScreenShareStream","e","keyCode","localVideoRendererIsBusy","preventDefault","isLocalScreenShareSupportedInBrowser","onScreenShareChange","screenShareActive","onEndCallClick","compressedMode"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Stack, CommandButton } from '@fluentui/react';\r\nimport {\r\n  MicIcon,\r\n  MicOffIcon,\r\n  CallVideoIcon,\r\n  CallVideoOffIcon,\r\n  CallEndIcon,\r\n  CallControlPresentNewIcon,\r\n  CallControlCloseTrayIcon\r\n} from '@fluentui/react-icons-northstar';\r\nimport {\r\n  controlButtonStyle,\r\n  endCallButtonStyle,\r\n  endCallButtonTextStyle,\r\n  mediaControlStyles,\r\n  fullWidth,\r\n  controlButtonDisabledStyle\r\n} from './styles/MediaControls.styles';\r\nimport { ParticipantStream } from 'core/reducers';\r\n\r\nexport interface MediaControlsProps {\r\n  micActive: boolean;\r\n  screenShareActive: boolean;\r\n  activeScreenShareStream: ParticipantStream | undefined;\r\n  cameraActive: boolean;\r\n  cameraPermission: string;\r\n  microphonePermission: string;\r\n  localVideoRendererIsBusy: boolean;\r\n  compressedMode: boolean;\r\n  onMicChange(): void;\r\n  onCameraChange(): void;\r\n  onScreenShareChange(): void;\r\n  onEndCallClick(): void;\r\n  isLocalScreenShareSupportedInBrowser(): boolean;\r\n}\r\n\r\nexport default (props: MediaControlsProps): JSX.Element => {\r\n  const cameraActive = props.cameraPermission === 'Denied' ? false : props.cameraActive;\r\n  const cameraDisabled = props.cameraPermission === 'Denied';\r\n  const cameraOnClick = props.cameraPermission !== 'Denied' ? props.onCameraChange : undefined;\r\n  const micActive = props.microphonePermission === 'Denied' ? false : props.micActive;\r\n  const micDisabled = props.microphonePermission === 'Denied';\r\n  const micOnClick = props.microphonePermission !== 'Denied' ? props.onMicChange : undefined;\r\n  const screenShareDisabled = !!props.activeScreenShareStream;\r\n\r\n  return (\r\n    <Stack className={mediaControlStyles}>\r\n      <CommandButton\r\n        onKeyDownCapture={(e) => {\r\n          if (e.keyCode === 13 && props.localVideoRendererIsBusy) {\r\n            e.preventDefault();\r\n          }\r\n        }}\r\n        disabled={cameraDisabled}\r\n        onClick={cameraOnClick}\r\n        className={controlButtonStyle}\r\n      >\r\n        <div className={fullWidth}>\r\n          {cameraActive ? <CallVideoIcon size=\"medium\" /> : <CallVideoOffIcon size=\"medium\" />}\r\n        </div>\r\n      </CommandButton>\r\n      <CommandButton onClick={micOnClick} disabled={micDisabled} className={controlButtonStyle}>\r\n        <div className={fullWidth}>{micActive ? <MicIcon size=\"medium\" /> : <MicOffIcon size=\"medium\" />}</div>\r\n      </CommandButton>\r\n      {props.isLocalScreenShareSupportedInBrowser() && (\r\n        <CommandButton\r\n          disabled={screenShareDisabled}\r\n          onClick={props.onScreenShareChange}\r\n          className={screenShareDisabled ? controlButtonDisabledStyle : controlButtonStyle}\r\n        >\r\n          <div className={fullWidth}>\r\n            {props.screenShareActive ? (\r\n              <CallControlCloseTrayIcon size=\"medium\" />\r\n            ) : (\r\n              <CallControlPresentNewIcon size=\"medium\" />\r\n            )}\r\n          </div>\r\n        </CommandButton>\r\n      )}\r\n      <CommandButton\r\n        onClick={props.onEndCallClick}\r\n        className={props.compressedMode ? controlButtonStyle : endCallButtonStyle}\r\n      >\r\n        <div className={fullWidth}>\r\n          <CallEndIcon size=\"medium\" />\r\n          {!props.compressedMode && <span className={endCallButtonTextStyle}>Leave</span>}\r\n        </div>\r\n      </CommandButton>\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}