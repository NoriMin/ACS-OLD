{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\src\\\\components\\\\GroupCall.tsx\";\n// © Microsoft Corporation. All rights reserved.\nimport React, { useState, useEffect } from 'react';\nimport { Label, Stack } from '@fluentui/react';\nimport Header from '../containers/Header';\nimport MediaGallery from '../containers/MediaGallery';\nimport MediaFullScreen from './MediaFullScreen';\nimport CommandPanel, { CommandPanelTypes } from './CommandPanel';\nimport { Constants } from '../core/constants';\nimport { headerStyles, containerStyles, paneStyles, hiddenContainerClassName, activeContainerClassName, loadingStyle } from './styles/GroupCall.styles';\nexport default (props => {\n  const [selectedPane, setSelectedPane] = useState(CommandPanelTypes.None);\n  const activeScreenShare = props.screenShareStreams && props.screenShareStreams.length === 1;\n  const {\n    callAgent,\n    call,\n    groupId,\n    joinGroup\n  } = props;\n  useEffect(() => {\n    if (callAgent && !call) {\n      joinGroup();\n      document.title = `${groupId} group call sample`;\n    }\n  }, [callAgent, call, groupId, joinGroup]);\n  return /*#__PURE__*/React.createElement(Stack, {\n    horizontalAlign: \"center\",\n    verticalAlign: \"center\",\n    styles: containerStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Stack.Item, {\n    styles: headerStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Header, {\n    selectedPane: selectedPane,\n    setSelectedPane: setSelectedPane,\n    endCallHandler: props.endCallHandler,\n    screenWidth: props.screenWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Stack.Item, {\n    styles: containerStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }, !props.shareScreen ? props.callState === Constants.CONNECTED && /*#__PURE__*/React.createElement(Stack, {\n    horizontal: true,\n    styles: containerStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Stack.Item, {\n    grow: true,\n    styles: activeScreenShare ? activeContainerClassName : hiddenContainerClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, activeScreenShare && /*#__PURE__*/React.createElement(MediaFullScreen, {\n    activeScreenShareStream: props.screenShareStreams[0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 39\n    }\n  })), /*#__PURE__*/React.createElement(Stack.Item, {\n    grow: true,\n    styles: !activeScreenShare ? activeContainerClassName : hiddenContainerClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(MediaGallery, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  })), selectedPane !== CommandPanelTypes.None && /*#__PURE__*/React.createElement(Stack.Item, {\n    disableShrink: true,\n    styles: paneStyles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(CommandPanel, Object.assign({}, props, {\n    selectedPane: selectedPane,\n    setSelectedPane: setSelectedPane,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }\n  })))) : /*#__PURE__*/React.createElement(\"div\", {\n    className: loadingStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \"Your screen is being shared\"))));\n});","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/components/GroupCall.tsx"],"names":["React","useState","useEffect","Label","Stack","Header","MediaGallery","MediaFullScreen","CommandPanel","CommandPanelTypes","Constants","headerStyles","containerStyles","paneStyles","hiddenContainerClassName","activeContainerClassName","loadingStyle","props","selectedPane","setSelectedPane","None","activeScreenShare","screenShareStreams","length","callAgent","call","groupId","joinGroup","document","title","endCallHandler","screenWidth","shareScreen","callState","CONNECTED"],"mappings":"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","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Label, Stack } from '@fluentui/react';\r\nimport Header from '../containers/Header';\r\nimport MediaGallery from '../containers/MediaGallery';\r\nimport MediaFullScreen from './MediaFullScreen';\r\nimport CommandPanel, { CommandPanelTypes } from './CommandPanel';\r\nimport { Constants } from '../core/constants';\r\nimport {\r\n  headerStyles,\r\n  containerStyles,\r\n  paneStyles,\r\n  hiddenContainerClassName,\r\n  activeContainerClassName,\r\n  loadingStyle\r\n} from './styles/GroupCall.styles';\r\nimport {\r\n  Call,\r\n  LocalVideoStream,\r\n  AudioDeviceInfo,\r\n  VideoDeviceInfo,\r\n  RemoteParticipant,\r\n  CallAgent\r\n} from '@azure/communication-calling';\r\nimport { ParticipantStream } from 'core/reducers/index.js';\r\n\r\nexport interface GroupCallProps {\r\n  userId: string;\r\n  groupId: string;\r\n  call: Call;\r\n  callAgent: CallAgent;\r\n  mic: boolean;\r\n  remoteParticipants: RemoteParticipant[];\r\n  streams: ParticipantStream[];\r\n  callState: string;\r\n  localVideo: boolean;\r\n  localVideoStream: LocalVideoStream;\r\n  screenShareStreams: ParticipantStream[];\r\n  audioDeviceInfo: AudioDeviceInfo;\r\n  videoDeviceInfo: VideoDeviceInfo;\r\n  audioDeviceList: AudioDeviceInfo[];\r\n  videoDeviceList: VideoDeviceInfo[];\r\n  screenWidth: number;\r\n  shareScreen: boolean;\r\n  setAudioDeviceInfo(deviceInfo: AudioDeviceInfo): void;\r\n  setVideoDeviceInfo(deviceInfo: VideoDeviceInfo): void;\r\n  setLocalVideoStream(stream: LocalVideoStream | undefined): void;\r\n  mute(): void;\r\n  isGroup(): void;\r\n  joinGroup(): void;\r\n  endCallHandler(): void;\r\n}\r\n\r\nexport default (props: GroupCallProps): JSX.Element => {\r\n  const [selectedPane, setSelectedPane] = useState(CommandPanelTypes.None);\r\n  const activeScreenShare = props.screenShareStreams && props.screenShareStreams.length === 1;\r\n\r\n  const { callAgent, call, groupId, joinGroup } = props;\r\n\r\n  useEffect(() => {\r\n    if (callAgent && !call) {\r\n      joinGroup();\r\n      document.title = `${groupId} group call sample`;\r\n    }\r\n  }, [callAgent, call, groupId, joinGroup]);\r\n\r\n  return (\r\n    <Stack horizontalAlign=\"center\" verticalAlign=\"center\" styles={containerStyles}>\r\n      <Stack.Item styles={headerStyles}>\r\n        <Header\r\n          selectedPane={selectedPane}\r\n          setSelectedPane={setSelectedPane}\r\n          endCallHandler={props.endCallHandler}\r\n          screenWidth={props.screenWidth}\r\n        />\r\n      </Stack.Item>\r\n      <Stack.Item styles={containerStyles}>\r\n        {!props.shareScreen ? (\r\n          props.callState === Constants.CONNECTED && (\r\n            <Stack horizontal styles={containerStyles}>\r\n              <Stack.Item grow styles={activeScreenShare ? activeContainerClassName : hiddenContainerClassName}>\r\n                {activeScreenShare && <MediaFullScreen activeScreenShareStream={props.screenShareStreams[0]} />}\r\n              </Stack.Item>\r\n              <Stack.Item grow styles={!activeScreenShare ? activeContainerClassName : hiddenContainerClassName}>\r\n                <MediaGallery />\r\n              </Stack.Item>\r\n              {selectedPane !== CommandPanelTypes.None && (\r\n                <Stack.Item disableShrink styles={paneStyles}>\r\n                  <CommandPanel {...props} selectedPane={selectedPane} setSelectedPane={setSelectedPane} />\r\n                </Stack.Item>\r\n              )}\r\n            </Stack>\r\n          )\r\n        ) : (\r\n          <div className={loadingStyle}>\r\n            <Label>Your screen is being shared</Label>\r\n          </div>\r\n        )}\r\n      </Stack.Item>\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}