{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";// © Microsoft Corporation. All rights reserved.\nimport React,{useState,useEffect}from'react';import{Label,Stack}from'@fluentui/react';import Header from'../containers/Header';import MediaGallery from'../containers/MediaGallery';import MediaFullScreen from'./MediaFullScreen';import CommandPanel,{CommandPanelTypes}from'./CommandPanel';import{Constants}from'../core/constants';import{headerStyles,containerStyles,paneStyles,hiddenContainerClassName,activeContainerClassName,loadingStyle}from'./styles/GroupCall.styles';export default(function(props){var _useState=useState(CommandPanelTypes.None),_useState2=_slicedToArray(_useState,2),selectedPane=_useState2[0],setSelectedPane=_useState2[1];var activeScreenShare=props.screenShareStreams&&props.screenShareStreams.length===1;var callAgent=props.callAgent,call=props.call,groupId=props.groupId,joinGroup=props.joinGroup;useEffect(function(){if(callAgent&&!call){joinGroup();document.title=\"\".concat(groupId,\" group call sample\");}},[callAgent,call,groupId,joinGroup]);return/*#__PURE__*/React.createElement(Stack,{horizontalAlign:\"center\",verticalAlign:\"center\",styles:containerStyles},/*#__PURE__*/React.createElement(Stack.Item,{styles:headerStyles},/*#__PURE__*/React.createElement(Header,{selectedPane:selectedPane,setSelectedPane:setSelectedPane,endCallHandler:props.endCallHandler,screenWidth:props.screenWidth})),/*#__PURE__*/React.createElement(Stack.Item,{styles:containerStyles},!props.shareScreen?props.callState===Constants.CONNECTED&&/*#__PURE__*/React.createElement(Stack,{horizontal:true,styles:containerStyles},/*#__PURE__*/React.createElement(Stack.Item,{grow:true,styles:activeScreenShare?activeContainerClassName:hiddenContainerClassName},activeScreenShare&&/*#__PURE__*/React.createElement(MediaFullScreen,{activeScreenShareStream:props.screenShareStreams[0]})),/*#__PURE__*/React.createElement(Stack.Item,{grow:true,styles:!activeScreenShare?activeContainerClassName:hiddenContainerClassName},/*#__PURE__*/React.createElement(MediaGallery,null)),selectedPane!==CommandPanelTypes.None&&/*#__PURE__*/React.createElement(Stack.Item,{disableShrink:true,styles:paneStyles},/*#__PURE__*/React.createElement(CommandPanel,Object.assign({},props,{selectedPane:selectedPane,setSelectedPane:setSelectedPane})))):/*#__PURE__*/React.createElement(\"div\",{className:loadingStyle},/*#__PURE__*/React.createElement(Label,null,\"Your screen is being shared\"))));});","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/components/GroupCall.tsx"],"names":["React","useState","useEffect","Label","Stack","Header","MediaGallery","MediaFullScreen","CommandPanel","CommandPanelTypes","Constants","headerStyles","containerStyles","paneStyles","hiddenContainerClassName","activeContainerClassName","loadingStyle","props","None","selectedPane","setSelectedPane","activeScreenShare","screenShareStreams","length","callAgent","call","groupId","joinGroup","document","title","endCallHandler","screenWidth","shareScreen","callState","CONNECTED"],"mappings":"0OAAA;AACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,KAAT,CAAgBC,KAAhB,KAA6B,iBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,sBAAnB,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,YAAP,EAAuBC,iBAAvB,KAAgD,gBAAhD,CACA,OAASC,SAAT,KAA0B,mBAA1B,CACA,OACEC,YADF,CAEEC,eAFF,CAGEC,UAHF,CAIEC,wBAJF,CAKEC,wBALF,CAMEC,YANF,KAOO,2BAPP,CA6CA,eAAe,SAACC,KAAD,CAAwC,eACbhB,QAAQ,CAACQ,iBAAiB,CAACS,IAAnB,CADK,wCAC9CC,YAD8C,eAChCC,eADgC,eAErD,GAAMC,CAAAA,iBAAiB,CAAGJ,KAAK,CAACK,kBAAN,EAA4BL,KAAK,CAACK,kBAAN,CAAyBC,MAAzB,GAAoC,CAA1F,CAFqD,GAI7CC,CAAAA,SAJ6C,CAILP,KAJK,CAI7CO,SAJ6C,CAIlCC,IAJkC,CAILR,KAJK,CAIlCQ,IAJkC,CAI5BC,OAJ4B,CAILT,KAJK,CAI5BS,OAJ4B,CAInBC,SAJmB,CAILV,KAJK,CAInBU,SAJmB,CAMrDzB,SAAS,CAAC,UAAM,CACd,GAAIsB,SAAS,EAAI,CAACC,IAAlB,CAAwB,CACtBE,SAAS,GACTC,QAAQ,CAACC,KAAT,WAAoBH,OAApB,uBACD,CACF,CALQ,CAKN,CAACF,SAAD,CAAYC,IAAZ,CAAkBC,OAAlB,CAA2BC,SAA3B,CALM,CAAT,CAOA,mBACE,oBAAC,KAAD,EAAO,eAAe,CAAC,QAAvB,CAAgC,aAAa,CAAC,QAA9C,CAAuD,MAAM,CAAEf,eAA/D,eACE,oBAAC,KAAD,CAAO,IAAP,EAAY,MAAM,CAAED,YAApB,eACE,oBAAC,MAAD,EACE,YAAY,CAAEQ,YADhB,CAEE,eAAe,CAAEC,eAFnB,CAGE,cAAc,CAAEH,KAAK,CAACa,cAHxB,CAIE,WAAW,CAAEb,KAAK,CAACc,WAJrB,EADF,CADF,cASE,oBAAC,KAAD,CAAO,IAAP,EAAY,MAAM,CAAEnB,eAApB,EACG,CAACK,KAAK,CAACe,WAAP,CACCf,KAAK,CAACgB,SAAN,GAAoBvB,SAAS,CAACwB,SAA9B,eACE,oBAAC,KAAD,EAAO,UAAU,KAAjB,CAAkB,MAAM,CAAEtB,eAA1B,eACE,oBAAC,KAAD,CAAO,IAAP,EAAY,IAAI,KAAhB,CAAiB,MAAM,CAAES,iBAAiB,CAAGN,wBAAH,CAA8BD,wBAAxE,EACGO,iBAAiB,eAAI,oBAAC,eAAD,EAAiB,uBAAuB,CAAEJ,KAAK,CAACK,kBAAN,CAAyB,CAAzB,CAA1C,EADxB,CADF,cAIE,oBAAC,KAAD,CAAO,IAAP,EAAY,IAAI,KAAhB,CAAiB,MAAM,CAAE,CAACD,iBAAD,CAAqBN,wBAArB,CAAgDD,wBAAzE,eACE,oBAAC,YAAD,MADF,CAJF,CAOGK,YAAY,GAAKV,iBAAiB,CAACS,IAAnC,eACC,oBAAC,KAAD,CAAO,IAAP,EAAY,aAAa,KAAzB,CAA0B,MAAM,CAAEL,UAAlC,eACE,oBAAC,YAAD,kBAAkBI,KAAlB,EAAyB,YAAY,CAAEE,YAAvC,CAAqD,eAAe,CAAEC,eAAtE,GADF,CARJ,CAFH,cAiBC,2BAAK,SAAS,CAAEJ,YAAhB,eACE,oBAAC,KAAD,oCADF,CAlBJ,CATF,CADF,CAmCD,CAhDD","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Label, Stack } from '@fluentui/react';\r\nimport Header from '../containers/Header';\r\nimport MediaGallery from '../containers/MediaGallery';\r\nimport MediaFullScreen from './MediaFullScreen';\r\nimport CommandPanel, { CommandPanelTypes } from './CommandPanel';\r\nimport { Constants } from '../core/constants';\r\nimport {\r\n  headerStyles,\r\n  containerStyles,\r\n  paneStyles,\r\n  hiddenContainerClassName,\r\n  activeContainerClassName,\r\n  loadingStyle\r\n} from './styles/GroupCall.styles';\r\nimport {\r\n  Call,\r\n  LocalVideoStream,\r\n  AudioDeviceInfo,\r\n  VideoDeviceInfo,\r\n  RemoteParticipant,\r\n  CallAgent\r\n} from '@azure/communication-calling';\r\nimport { ParticipantStream } from 'core/reducers/index.js';\r\n\r\nexport interface GroupCallProps {\r\n  userId: string;\r\n  groupId: string;\r\n  call: Call;\r\n  callAgent: CallAgent;\r\n  mic: boolean;\r\n  remoteParticipants: RemoteParticipant[];\r\n  streams: ParticipantStream[];\r\n  callState: string;\r\n  localVideo: boolean;\r\n  localVideoStream: LocalVideoStream;\r\n  screenShareStreams: ParticipantStream[];\r\n  audioDeviceInfo: AudioDeviceInfo;\r\n  videoDeviceInfo: VideoDeviceInfo;\r\n  audioDeviceList: AudioDeviceInfo[];\r\n  videoDeviceList: VideoDeviceInfo[];\r\n  screenWidth: number;\r\n  shareScreen: boolean;\r\n  setAudioDeviceInfo(deviceInfo: AudioDeviceInfo): void;\r\n  setVideoDeviceInfo(deviceInfo: VideoDeviceInfo): void;\r\n  setLocalVideoStream(stream: LocalVideoStream | undefined): void;\r\n  mute(): void;\r\n  isGroup(): void;\r\n  joinGroup(): void;\r\n  endCallHandler(): void;\r\n}\r\n\r\nexport default (props: GroupCallProps): JSX.Element => {\r\n  const [selectedPane, setSelectedPane] = useState(CommandPanelTypes.None);\r\n  const activeScreenShare = props.screenShareStreams && props.screenShareStreams.length === 1;\r\n\r\n  const { callAgent, call, groupId, joinGroup } = props;\r\n\r\n  useEffect(() => {\r\n    if (callAgent && !call) {\r\n      joinGroup();\r\n      document.title = `${groupId} group call sample`;\r\n    }\r\n  }, [callAgent, call, groupId, joinGroup]);\r\n\r\n  return (\r\n    <Stack horizontalAlign=\"center\" verticalAlign=\"center\" styles={containerStyles}>\r\n      <Stack.Item styles={headerStyles}>\r\n        <Header\r\n          selectedPane={selectedPane}\r\n          setSelectedPane={setSelectedPane}\r\n          endCallHandler={props.endCallHandler}\r\n          screenWidth={props.screenWidth}\r\n        />\r\n      </Stack.Item>\r\n      <Stack.Item styles={containerStyles}>\r\n        {!props.shareScreen ? (\r\n          props.callState === Constants.CONNECTED && (\r\n            <Stack horizontal styles={containerStyles}>\r\n              <Stack.Item grow styles={activeScreenShare ? activeContainerClassName : hiddenContainerClassName}>\r\n                {activeScreenShare && <MediaFullScreen activeScreenShareStream={props.screenShareStreams[0]} />}\r\n              </Stack.Item>\r\n              <Stack.Item grow styles={!activeScreenShare ? activeContainerClassName : hiddenContainerClassName}>\r\n                <MediaGallery />\r\n              </Stack.Item>\r\n              {selectedPane !== CommandPanelTypes.None && (\r\n                <Stack.Item disableShrink styles={paneStyles}>\r\n                  <CommandPanel {...props} selectedPane={selectedPane} setSelectedPane={setSelectedPane} />\r\n                </Stack.Item>\r\n              )}\r\n            </Stack>\r\n          )\r\n        ) : (\r\n          <div className={loadingStyle}>\r\n            <Label>Your screen is being shared</Label>\r\n          </div>\r\n        )}\r\n      </Stack.Item>\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}