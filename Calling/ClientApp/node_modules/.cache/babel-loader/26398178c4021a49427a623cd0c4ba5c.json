{"ast":null,"code":"// © Microsoft Corporation. All rights reserved.\nimport React,{useEffect}from'react';import{Separator,Pivot,PivotItem,Stack}from'@fluentui/react';import{LocalVideoStream}from'@azure/communication-calling';import MediaControls from'./MediaControls';import{CommandPanelTypes}from'./CommandPanel';import{UserFriendsIcon,SettingsIcon}from'@fluentui/react-icons-northstar';import{headerContainer,pivotItemStyles,separatorContainerStyle,separatorStyles,pivotItemStyle,headerCenteredContainer}from'./styles/Header.styles';export default(function(props){var _props$screenShareStr;var togglePeople=function togglePeople(selectedPane,setSelectedPane){return selectedPane!==CommandPanelTypes.People?setSelectedPane(CommandPanelTypes.People):setSelectedPane(CommandPanelTypes.None);};var toggleOptions=function toggleOptions(selectedPane,setSelectedPane){return selectedPane!==CommandPanelTypes.Settings?setSelectedPane(CommandPanelTypes.Settings):setSelectedPane(CommandPanelTypes.None);};var handleLocalVideoOnOff=function handleLocalVideoOnOff(){if(props.localVideoStream){props.call.stopVideo(props.localVideoStream);props.setLocalVideoStream(undefined);}else{if(props.videoDeviceInfo){var localVideoStream=new LocalVideoStream(props.videoDeviceInfo);props.setLocalVideoStream(localVideoStream);props.call.startVideo(localVideoStream);}}};var handleMuteOnOff=function handleMuteOnOff(){props.setMic(!props.mic);};var handleScreenSharingOnOff=function handleScreenSharingOnOff(){props.setScreenShare(!props.shareScreen);};useEffect(function(){if(props.call&&props.call.localVideoStreams.length===0&&props.localVideoStream){props.call.startVideo(props.localVideoStream);}},[props.call,props.localVideoStream]);return/*#__PURE__*/React.createElement(Stack,{id:\"header\",className:props.screenWidth>360?headerContainer:headerCenteredContainer},/*#__PURE__*/React.createElement(Pivot,{onKeyDownCapture:function onKeyDownCapture(e){if(e.target.id===CommandPanelTypes.People&&e.keyCode===39)e.preventDefault();},getTabId:function getTabId(itemKey){return itemKey;},onLinkClick:function onLinkClick(item){if(!item)return;if(item.props.itemKey===CommandPanelTypes.Settings)toggleOptions(props.selectedPane,props.setSelectedPane);if(item.props.itemKey===CommandPanelTypes.People)togglePeople(props.selectedPane,props.setSelectedPane);},styles:pivotItemStyles,initialSelectedKey:CommandPanelTypes.None,selectedKey:props.selectedPane},/*#__PURE__*/React.createElement(PivotItem,{itemKey:CommandPanelTypes.Settings,onRenderItemLink:function onRenderItemLink(){return/*#__PURE__*/React.createElement(SettingsIcon,{outline:props.selectedPane===CommandPanelTypes.Settings?false:true,size:\"medium\",className:pivotItemStyle});}}),/*#__PURE__*/React.createElement(PivotItem,{itemKey:CommandPanelTypes.People,onRenderItemLink:function onRenderItemLink(){return/*#__PURE__*/React.createElement(UserFriendsIcon,{outline:props.selectedPane===CommandPanelTypes.People?false:true,size:\"medium\",className:pivotItemStyle});}}),/*#__PURE__*/React.createElement(PivotItem,{itemKey:CommandPanelTypes.None})),props.screenWidth>360&&/*#__PURE__*/React.createElement(\"div\",{className:separatorContainerStyle},/*#__PURE__*/React.createElement(Separator,{styles:separatorStyles,vertical:true})),/*#__PURE__*/React.createElement(MediaControls,{micActive:props.mic,onMicChange:handleMuteOnOff,cameraActive:props.localVideoStream!==undefined,onCameraChange:handleLocalVideoOnOff,screenShareActive:props.shareScreen,activeScreenShareStream:(_props$screenShareStr=props.screenShareStreams[0])!==null&&_props$screenShareStr!==void 0?_props$screenShareStr:undefined,onScreenShareChange:handleScreenSharingOnOff,onEndCallClick:function onEndCallClick(){if(props.localVideo)handleLocalVideoOnOff();props.endCall();},cameraPermission:props.cameraPermission,microphonePermission:props.microphonePermission,localVideoRendererIsBusy:props.localVideoRendererIsBusy,compressedMode:props.screenWidth<=360,isLocalScreenShareSupportedInBrowser:props.isLocalScreenShareSupportedInBrowser}));});","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/components/Header.tsx"],"names":["React","useEffect","Separator","Pivot","PivotItem","Stack","LocalVideoStream","MediaControls","CommandPanelTypes","UserFriendsIcon","SettingsIcon","headerContainer","pivotItemStyles","separatorContainerStyle","separatorStyles","pivotItemStyle","headerCenteredContainer","props","togglePeople","selectedPane","setSelectedPane","People","None","toggleOptions","Settings","handleLocalVideoOnOff","localVideoStream","call","stopVideo","setLocalVideoStream","undefined","videoDeviceInfo","startVideo","handleMuteOnOff","setMic","mic","handleScreenSharingOnOff","setScreenShare","shareScreen","localVideoStreams","length","screenWidth","e","target","id","keyCode","preventDefault","itemKey","item","screenShareStreams","localVideo","endCall","cameraPermission","microphonePermission","localVideoRendererIsBusy","isLocalScreenShareSupportedInBrowser"],"mappings":"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","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\nimport React, { useEffect } from 'react';\r\nimport { Separator, Pivot, PivotItem, Stack } from '@fluentui/react';\r\nimport { Call, LocalVideoStream, VideoDeviceInfo } from '@azure/communication-calling';\r\nimport MediaControls from './MediaControls';\r\nimport { CommandPanelTypes } from './CommandPanel';\r\nimport { UserFriendsIcon, SettingsIcon } from '@fluentui/react-icons-northstar';\r\nimport {\r\n  headerContainer,\r\n  pivotItemStyles,\r\n  separatorContainerStyle,\r\n  separatorStyles,\r\n  pivotItemStyle,\r\n  headerCenteredContainer\r\n} from './styles/Header.styles';\r\nimport { ParticipantStream } from 'core/reducers';\r\n\r\nexport interface HeaderProps {\r\n  selectedPane: CommandPanelTypes;\r\n  setSelectedPane: any;\r\n  endCallHandler(): void;\r\n  actionable: boolean;\r\n  localVideo: boolean;\r\n  mic: boolean;\r\n  shareScreen: boolean;\r\n  call: Call;\r\n  endCall(): void;\r\n  screenShareStreams: ParticipantStream[];\r\n  activeScreenShareStream: ParticipantStream | undefined;\r\n  localVideoRendererIsBusy: boolean;\r\n  cameraPermission: string;\r\n  microphonePermission: string;\r\n  screenWidth: number;\r\n  setMic(mic: boolean): void;\r\n  setLocalVideoStream(localVideoStream: LocalVideoStream | undefined): void;\r\n  setScreenShare(screenShare: boolean): void;\r\n  isLocalScreenShareSupportedInBrowser(): boolean;\r\n  localVideoStream: LocalVideoStream | undefined;\r\n  videoDeviceInfo: VideoDeviceInfo | undefined;\r\n}\r\n\r\nexport default (props: HeaderProps): JSX.Element => {\r\n  const togglePeople = (selectedPane: string, setSelectedPane: (pane: string) => void) => {\r\n    return selectedPane !== CommandPanelTypes.People\r\n      ? setSelectedPane(CommandPanelTypes.People)\r\n      : setSelectedPane(CommandPanelTypes.None);\r\n  };\r\n\r\n  const toggleOptions = (selectedPane: string, setSelectedPane: (pane: string) => void) => {\r\n    return selectedPane !== CommandPanelTypes.Settings\r\n      ? setSelectedPane(CommandPanelTypes.Settings)\r\n      : setSelectedPane(CommandPanelTypes.None);\r\n  };\r\n\r\n  const handleLocalVideoOnOff = () => {\r\n    if (props.localVideoStream) {\r\n      props.call.stopVideo(props.localVideoStream);\r\n      props.setLocalVideoStream(undefined);\r\n    } else {\r\n      if (props.videoDeviceInfo) {\r\n        var localVideoStream = new LocalVideoStream(props.videoDeviceInfo);\r\n        props.setLocalVideoStream(localVideoStream);\r\n        props.call.startVideo(localVideoStream);\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleMuteOnOff = () => {\r\n    props.setMic(!props.mic);\r\n  };\r\n\r\n  const handleScreenSharingOnOff = () => {\r\n    props.setScreenShare(!props.shareScreen);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.call && props.call.localVideoStreams.length === 0 && props.localVideoStream) {\r\n      props.call.startVideo(props.localVideoStream);\r\n    }\r\n  }, [props.call, props.localVideoStream]);\r\n\r\n  return (\r\n    <Stack id=\"header\" className={props.screenWidth > 360 ? headerContainer : headerCenteredContainer}>\r\n      <Pivot\r\n        onKeyDownCapture={(e) => {\r\n          if ((e.target as HTMLElement).id === CommandPanelTypes.People && e.keyCode === 39) e.preventDefault();\r\n        }}\r\n        getTabId={(itemKey: string) => itemKey}\r\n        onLinkClick={(item) => {\r\n          if (!item) return;\r\n          if (item.props.itemKey === CommandPanelTypes.Settings)\r\n            toggleOptions(props.selectedPane, props.setSelectedPane);\r\n          if (item.props.itemKey === CommandPanelTypes.People) togglePeople(props.selectedPane, props.setSelectedPane);\r\n        }}\r\n        styles={pivotItemStyles}\r\n        initialSelectedKey={CommandPanelTypes.None}\r\n        selectedKey={props.selectedPane}\r\n      >\r\n        <PivotItem\r\n          itemKey={CommandPanelTypes.Settings}\r\n          onRenderItemLink={() => (\r\n            <SettingsIcon\r\n              outline={props.selectedPane === CommandPanelTypes.Settings ? false : true}\r\n              size=\"medium\"\r\n              className={pivotItemStyle}\r\n            />\r\n          )}\r\n        />\r\n        <PivotItem\r\n          itemKey={CommandPanelTypes.People}\r\n          onRenderItemLink={() => (\r\n            <UserFriendsIcon\r\n              outline={props.selectedPane === CommandPanelTypes.People ? false : true}\r\n              size=\"medium\"\r\n              className={pivotItemStyle}\r\n            />\r\n          )}\r\n        />\r\n        <PivotItem itemKey={CommandPanelTypes.None} />\r\n      </Pivot>\r\n      {props.screenWidth > 360 && (\r\n        <div className={separatorContainerStyle}>\r\n          <Separator styles={separatorStyles} vertical={true} />\r\n        </div>\r\n      )}\r\n      <MediaControls\r\n        micActive={props.mic}\r\n        onMicChange={handleMuteOnOff}\r\n        cameraActive={props.localVideoStream !== undefined}\r\n        onCameraChange={handleLocalVideoOnOff}\r\n        screenShareActive={props.shareScreen}\r\n        activeScreenShareStream={props.screenShareStreams[0] ?? undefined}\r\n        onScreenShareChange={handleScreenSharingOnOff}\r\n        onEndCallClick={() => {\r\n          if (props.localVideo) handleLocalVideoOnOff();\r\n          props.endCall();\r\n        }}\r\n        cameraPermission={props.cameraPermission}\r\n        microphonePermission={props.microphonePermission}\r\n        localVideoRendererIsBusy={props.localVideoRendererIsBusy}\r\n        compressedMode={props.screenWidth <= 360}\r\n        isLocalScreenShareSupportedInBrowser={props.isLocalScreenShareSupportedInBrowser}\r\n      />\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}