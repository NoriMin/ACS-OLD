{"ast":null,"code":"import _invoke from \"lodash/invoke\";\nimport { datepickerBehavior } from '@fluentui/accessibility';\nimport { DateRangeType, DayOfWeek, FirstWeekOfYear, formatMonthDayYear } from '@fluentui/date-time-utilities';\nimport { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { CalendarIcon } from '@fluentui/react-icons-northstar';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, createShorthand, createShorthandFactory } from '../../utils';\nimport { Button } from '../Button/Button';\nimport { Input } from '../Input/Input';\nimport { Popup } from '../Popup/Popup';\nimport { DatepickerCalendar } from './DatepickerCalendar';\nimport { DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarHeader } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarHeaderAction } from './DatepickerCalendarHeaderAction';\nimport { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell'; // TODO: extract to date-time-utilities\n\nexport var DEFAULT_LOCALIZED_STRINGS = {\n  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n}; // TODO: extract to date-time-utilities\n\nexport var datepickerClassName = 'ui-datepicker';\n/**\n * A Datepicker is used to display dates.\n * This component is currently UNSTABLE!\n */\n\nexport var Datepicker = /*#__PURE__*/function () {\n  var Datepicker = function Datepicker(props) {\n    var _ref, _ref2;\n\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(Datepicker.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var datepickerRef = React.useRef();\n\n    var _React$useState = React.useState(false),\n        open = _React$useState[0],\n        setOpen = _React$useState[1];\n\n    var _React$useState2 = React.useState(),\n        selectedDate = _React$useState2[0],\n        setSelectedDate = _React$useState2[1];\n\n    var valueFormatter = function valueFormatter(date) {\n      return date ? formatMonthDayYear(date, DEFAULT_LOCALIZED_STRINGS) : '';\n    };\n\n    var firstDayOfWeek = props.firstDayOfWeek,\n        firstWeekOfYear = props.firstWeekOfYear,\n        dateRangeType = props.dateRangeType,\n        calendar = props.calendar,\n        popup = props.popup,\n        className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables;\n    var calendarOptions = {\n      selectedDate: (_ref = selectedDate != null ? selectedDate : props.today) != null ? _ref : new Date(),\n      navigatedDate: (_ref2 = selectedDate != null ? selectedDate : props.today) != null ? _ref2 : new Date(),\n      firstDayOfWeek: firstDayOfWeek,\n      firstWeekOfYear: firstWeekOfYear,\n      dateRangeType: dateRangeType\n    };\n\n    var showCalendarGrid = function showCalendarGrid() {\n      setOpen(true);\n    };\n\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(Datepicker.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: Datepicker.displayName,\n      actionHandlers: {},\n      rtl: context.rtl\n    });\n\n    var _useStyles = useStyles(Datepicker.displayName, {\n      className: datepickerClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n\n    var overrideDatepickerCalendarProps = function overrideDatepickerCalendarProps(predefinedProps) {\n      return Object.assign({}, calendarOptions, {\n        onDateChange: function onDateChange(e, itemProps) {\n          setSelectedDate(itemProps.value.originalDate);\n          setOpen(false);\n\n          _invoke(predefinedProps, 'onDateChange', e, itemProps);\n        }\n      });\n    };\n\n    var calendarElement = createShorthand(DatepickerCalendar, calendar, {\n      defaultProps: function defaultProps() {\n        return getA11yProps('calendar', {});\n      },\n      overrideProps: overrideDatepickerCalendarProps\n    });\n    var element = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: datepickerRef\n    }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), /*#__PURE__*/React.createElement(Input, {\n      readOnly: true,\n      onClick: showCalendarGrid,\n      value: valueFormatter(selectedDate)\n    }), createShorthand(Popup, popup, {\n      defaultProps: function defaultProps() {\n        return {\n          open: open,\n          content: calendarElement,\n          trapFocus: true,\n          trigger: /*#__PURE__*/React.createElement(Button, {\n            icon: /*#__PURE__*/React.createElement(CalendarIcon, null),\n            title: \"Open calendar\",\n            iconOnly: true\n          })\n        };\n      },\n      overrideProps: function overrideProps(predefinedProps) {\n        return {\n          onOpenChange: function onOpenChange(e, _ref3) {\n            var open = _ref3.open;\n            setOpen(open);\n\n            _invoke(predefinedProps, 'onOpenChange', e, {\n              open: open\n            });\n          }\n        };\n      }\n    }))));\n    setEnd();\n    return element;\n  };\n\n  Datepicker.displayName = 'Datepicker';\n  Datepicker.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    calendar: customPropTypes.itemShorthand,\n    popup: customPropTypes.itemShorthand,\n    minDate: PropTypes.instanceOf(Date),\n    maxDate: PropTypes.instanceOf(Date),\n    restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n    firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {\n      return DayOfWeek[name];\n    })),\n    firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(function (name) {\n      return FirstWeekOfYear[name];\n    })),\n    dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(function (name) {\n      return DateRangeType[name];\n    })),\n    daysToSelectInDayView: PropTypes.number,\n    today: PropTypes.instanceOf(Date),\n    showWeekNumbers: PropTypes.bool,\n    workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {\n      return DayOfWeek[name];\n    }))),\n    localizedStrings: PropTypes.object,\n    format: PropTypes.func,\n    parse: PropTypes.func,\n    disabled: PropTypes.bool,\n    isRequired: PropTypes.bool,\n    onDateChange: PropTypes.func,\n    goToToday: PropTypes.string,\n    placeholder: PropTypes.string\n  });\n  Datepicker.defaultProps = {\n    accessibility: datepickerBehavior,\n    calendar: {},\n    popup: {},\n    firstDayOfWeek: DayOfWeek.Monday,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateRangeType: DateRangeType.Day\n  };\n  Datepicker.handledProps = Object.keys(Datepicker.propTypes);\n  Datepicker.create = createShorthandFactory({\n    Component: Datepicker\n  });\n  Datepicker.Calendar = DatepickerCalendar;\n  Datepicker.CalendarHeader = DatepickerCalendarHeader;\n  Datepicker.CalendarHeaderAction = DatepickerCalendarHeaderAction;\n  Datepicker.CalendarHeaderCell = DatepickerCalendarHeaderCell;\n  Datepicker.CalendarCell = DatepickerCalendarCell;\n  return Datepicker;\n}();","map":{"version":3,"sources":["components/Datepicker/Datepicker.tsx"],"names":["DEFAULT_LOCALIZED_STRINGS","months","shortMonths","days","shortDays","datepickerClassName","Datepicker","context","useFluentContext","setStart","setEnd","useTelemetry","datepickerRef","React","open","setOpen","selectedDate","setSelectedDate","valueFormatter","date","formatMonthDayYear","firstDayOfWeek","firstWeekOfYear","dateRangeType","calendar","popup","className","design","styles","variables","props","calendarOptions","navigatedDate","showCalendarGrid","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","rtl","classes","useStyles","mapPropsToInlineStyles","overrideDatepickerCalendarProps","onDateChange","itemProps","calendarElement","createShorthand","defaultProps","overrideProps","element","root","content","trapFocus","trigger","onOpenChange","commonPropTypes","customPropTypes","minDate","PropTypes","maxDate","restrictedDates","DayOfWeek","FirstWeekOfYear","DateRangeType","daysToSelectInDayView","today","showWeekNumbers","workWeekDays","localizedStrings","format","parse","disabled","isRequired","goToToday","placeholder","string","accessibility","Day","Object","createShorthandFactory","Component"],"mappings":"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","sourcesContent":["import { Accessibility, datepickerBehavior, DatepickerBehaviorProps } from '@fluentui/accessibility';\nimport {\n  DateRangeType,\n  DayOfWeek,\n  FirstWeekOfYear,\n  formatMonthDayYear,\n  IDateGridStrings,\n  IDay,\n  IDayGridOptions,\n  IRestrictedDatesOptions,\n} from '@fluentui/date-time-utilities';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport { CalendarIcon } from '@fluentui/react-icons-northstar';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { commonPropTypes, createShorthand, createShorthandFactory, UIComponentProps } from '../../utils';\nimport { Button } from '../Button/Button';\nimport { Input } from '../Input/Input';\nimport { Popup, PopupProps } from '../Popup/Popup';\nimport { DatepickerCalendar, DatepickerCalendarProps } from './DatepickerCalendar';\nimport { DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarHeader } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarHeaderAction } from './DatepickerCalendarHeaderAction';\nimport { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';\n\n// TODO: extract to date-time-utilities\nexport const DEFAULT_LOCALIZED_STRINGS: IDateGridStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n};\n\n// TODO: extract to date-time-utilities\nexport interface IDateFormatting {\n  /**\n   * Format the date according to specified function.\n   * Intended use case is localization.\n   */\n  format?: (date: Date) => string;\n\n  /**\n   * Parse date from string representation into Date type.\n   */\n  parse?: (date: string) => Date;\n}\n\n// TODO: extract to date-time-utilities\nexport interface IDatepickerOptions extends IRestrictedDatesOptions {\n  /**\n   * The first day of the week for your locale.\n   */\n  firstDayOfWeek?: DayOfWeek;\n\n  /**\n   * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\n   * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\n   */\n  firstWeekOfYear?: FirstWeekOfYear;\n\n  /**\n   * The date range type indicating how  many days should be selected as the user\n   * selects days\n   */\n  dateRangeType?: DateRangeType;\n\n  /**\n   * The number of days to select while dateRangeType === DateRangeType.Day. Used in order to have multi-day\n   * views.\n   */\n  daysToSelectInDayView?: number;\n\n  /**\n   * Value of today. If null, current time in client machine will be used.\n   */\n  today?: Date;\n\n  /**\n   * Whether the calendar should show the week number (weeks 1 to 53) before each week row\n   */\n  showWeekNumbers?: boolean;\n\n  /**\n   * The days that are selectable when `dateRangeType` is WorkWeek.\n   * If `dateRangeType` is not WorkWeek this property does nothing.\n   */\n  workWeekDays?: DayOfWeek[];\n}\n\nexport interface DatepickerProps extends IDatepickerOptions, IDateFormatting, UIComponentProps {\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<DatepickerBehaviorProps>;\n\n  /** Shorthand for the datepicker calendar. */\n  calendar?: ShorthandValue<DatepickerCalendarProps>;\n\n  /** Shorthand for the datepicker popup. */\n  popup?: ShorthandValue<PopupProps>;\n\n  /** Datepicker shows it is currently unable to be interacted with. */\n  disabled?: boolean;\n\n  /** Datepicker shows it is currently unable to be interacted with. */\n  isRequired?: boolean;\n\n  /**\n   * Called on change of the date.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onDateChange?: ComponentEventHandler<DatepickerProps & { value: IDay }>;\n\n  /** String to render for button to direct the user to today's date. */\n  goToToday?: string;\n\n  /** Text placeholder for the input field. */\n  placeholder?: string;\n\n  /** Localized labels */\n  localizedStrings?: IDateGridStrings;\n}\n\nexport type DatepickerStylesProps = never;\n\nexport const datepickerClassName = 'ui-datepicker';\n\n/**\n * A Datepicker is used to display dates.\n * This component is currently UNSTABLE!\n */\nexport const Datepicker: ComponentWithAs<'div', DatepickerProps> &\n  FluentComponentStaticProps<DatepickerProps> & {\n    Calendar: typeof DatepickerCalendar;\n    CalendarHeader: typeof DatepickerCalendarHeader;\n    CalendarHeaderAction: typeof DatepickerCalendarHeaderAction;\n    CalendarHeaderCell: typeof DatepickerCalendarHeaderCell;\n    CalendarCell: typeof DatepickerCalendarCell;\n  } = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(Datepicker.displayName, context.telemetry);\n  setStart();\n  const datepickerRef = React.useRef<HTMLElement>();\n  const [open, setOpen] = React.useState<boolean>(false);\n  const [selectedDate, setSelectedDate] = React.useState<Date | undefined>();\n  const valueFormatter = date => (date ? formatMonthDayYear(date, DEFAULT_LOCALIZED_STRINGS) : '');\n  const {\n    firstDayOfWeek,\n    firstWeekOfYear,\n    dateRangeType,\n    calendar,\n    popup,\n    className,\n    design,\n    styles,\n    variables,\n  } = props;\n  const calendarOptions: IDayGridOptions = {\n    selectedDate: selectedDate ?? props.today ?? new Date(),\n    navigatedDate: selectedDate ?? props.today ?? new Date(),\n    firstDayOfWeek,\n    firstWeekOfYear,\n    dateRangeType,\n  };\n\n  const showCalendarGrid = () => {\n    setOpen(true);\n  };\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(Datepicker.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: Datepicker.displayName,\n    actionHandlers: {},\n    rtl: context.rtl,\n  });\n\n  const { classes } = useStyles<DatepickerStylesProps>(Datepicker.displayName, {\n    className: datepickerClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  const overrideDatepickerCalendarProps = (predefinedProps: DatepickerCalendarProps): DatepickerCalendarProps => ({\n    ...calendarOptions,\n    onDateChange: (e, itemProps) => {\n      setSelectedDate(itemProps.value.originalDate);\n      setOpen(false);\n      _.invoke(predefinedProps, 'onDateChange', e, itemProps);\n    },\n  });\n\n  const calendarElement = createShorthand(DatepickerCalendar, calendar, {\n    defaultProps: () => getA11yProps('calendar', {}),\n    overrideProps: overrideDatepickerCalendarProps,\n  });\n\n  const element = (\n    <Ref innerRef={datepickerRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            ...unhandledProps,\n          })}\n        >\n          <Input readOnly onClick={showCalendarGrid} value={valueFormatter(selectedDate)} />\n          {createShorthand(Popup, popup, {\n            defaultProps: () => ({\n              open,\n              content: calendarElement,\n              trapFocus: true,\n              trigger: <Button icon={<CalendarIcon />} title=\"Open calendar\" iconOnly />,\n            }),\n            overrideProps: (predefinedProps: PopupProps): PopupProps => ({\n              onOpenChange: (e, { open }) => {\n                setOpen(open);\n                _.invoke(predefinedProps, 'onOpenChange', e, { open });\n              },\n            }),\n          })}\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nDatepicker.displayName = 'Datepicker';\n\nDatepicker.propTypes = {\n  ...commonPropTypes.createCommon(),\n  calendar: customPropTypes.itemShorthand,\n  popup: customPropTypes.itemShorthand,\n\n  minDate: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n\n  firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name])),\n  firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(name => FirstWeekOfYear[name])),\n  dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(name => DateRangeType[name])),\n  daysToSelectInDayView: PropTypes.number,\n  today: PropTypes.instanceOf(Date),\n  showWeekNumbers: PropTypes.bool,\n  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name]))),\n\n  localizedStrings: PropTypes.object as PropTypes.Validator<IDateGridStrings>,\n\n  format: PropTypes.func,\n  parse: PropTypes.func,\n\n  disabled: PropTypes.bool,\n  isRequired: PropTypes.bool,\n  onDateChange: PropTypes.func,\n  goToToday: PropTypes.string,\n  placeholder: PropTypes.string,\n};\n\nDatepicker.defaultProps = {\n  accessibility: datepickerBehavior,\n  calendar: {},\n  popup: {},\n  firstDayOfWeek: DayOfWeek.Monday,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateRangeType: DateRangeType.Day,\n};\n\nDatepicker.handledProps = Object.keys(Datepicker.propTypes) as any;\n\nDatepicker.create = createShorthandFactory({ Component: Datepicker });\n\nDatepicker.Calendar = DatepickerCalendar;\nDatepicker.CalendarHeader = DatepickerCalendarHeader;\nDatepicker.CalendarHeaderAction = DatepickerCalendarHeaderAction;\nDatepicker.CalendarHeaderCell = DatepickerCalendarHeaderCell;\nDatepicker.CalendarCell = DatepickerCalendarCell;\n"]},"metadata":{},"sourceType":"module"}