{"ast":null,"code":"// © Microsoft Corporation. All rights reserved.\nimport { isCommunicationUser, isCallingApplication, isPhoneNumber } from '@azure/communication-common';\nexport const utils = {\n  getAppServiceUrl: () => {\n    return window.location.origin;\n  },\n  getTokenForUser: async userId => {\n    const response = await fetch('/userToken?userId='.concat(encodeURIComponent(userId)));\n\n    if (response.ok) {\n      return response.json();\n    }\n\n    throw new Error('Invalid token response');\n  },\n\n  isSelectedAudioDeviceInList(selected, list) {\n    return list.filter(item => item.name === selected.name).length > 0;\n  },\n\n  isSelectedVideoDeviceInList(selected, list) {\n    return list.filter(item => item.name === selected.name).length > 0;\n  },\n\n  isMobileSession() {\n    return window.navigator.userAgent.match(/(iPad|iPhone|iPod|Android|webOS|BlackBerry|Windows Phone)/g) ? true : false;\n  },\n\n  isSmallScreen() {\n    return window.innerWidth < 700 || window.innerHeight < 400;\n  },\n\n  getId: identifier => {\n    if (isCommunicationUser(identifier)) {\n      return identifier.communicationUserId;\n    } else if (isCallingApplication(identifier)) {\n      return identifier.callingApplicationId;\n    } else if (isPhoneNumber(identifier)) {\n      return identifier.phoneNumber;\n    } else {\n      return identifier.id;\n    }\n  },\n  getStreamId: (userId, stream) => {\n    var id = stream['id'];\n    return `${userId}-${id}-${stream.type}`;\n  },\n\n  /*\r\n   * TODO:\r\n   *  Remove this method once the SDK improves error handling for unsupported browser.\r\n   */\n  isOnIphoneAndNotSafari() {\n    const userAgent = navigator.userAgent; // Chrome uses 'CriOS' in user agent string and Firefox uses 'FxiOS' in user agent string.\n\n    if (userAgent.includes('iPhone') && (userAgent.includes('FxiOS') || userAgent.includes('CriOS'))) {\n      return true;\n    }\n\n    return false;\n  },\n\n  getBuildTime: () => {\n    const dateTimeStamp = \"2020-9-26 22:14:46\";\n    return dateTimeStamp;\n  }\n};","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/Utils/Utils.ts"],"names":["isCommunicationUser","isCallingApplication","isPhoneNumber","utils","getAppServiceUrl","window","location","origin","getTokenForUser","userId","response","fetch","concat","encodeURIComponent","ok","json","Error","isSelectedAudioDeviceInList","selected","list","filter","item","name","length","isSelectedVideoDeviceInList","isMobileSession","navigator","userAgent","match","isSmallScreen","innerWidth","innerHeight","getId","identifier","communicationUserId","callingApplicationId","phoneNumber","id","getStreamId","stream","type","isOnIphoneAndNotSafari","includes","getBuildTime","dateTimeStamp"],"mappings":"AAAA;AAEA,SAKEA,mBALF,EAMEC,oBANF,EAOEC,aAPF,QAQO,6BARP;AAWA,OAAO,MAAMC,KAAK,GAAG;AACnBC,EAAAA,gBAAgB,EAAE,MAAc;AAC9B,WAAOC,MAAM,CAACC,QAAP,CAAgBC,MAAvB;AACD,GAHkB;AAInBC,EAAAA,eAAe,EAAE,MAAOC,MAAP,IAAwC;AACvD,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qBAAqBC,MAArB,CAA4BC,kBAAkB,CAACJ,MAAD,CAA9C,CAAD,CAA5B;;AACA,QAAIC,QAAQ,CAACI,EAAb,EAAiB;AACf,aAAOJ,QAAQ,CAACK,IAAT,EAAP;AACD;;AACD,UAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AACD,GAVkB;;AAWnBC,EAAAA,2BAA2B,CAACC,QAAD,EAA4BC,IAA5B,EAA8D;AACvF,WAAOA,IAAI,CAACC,MAAL,CAAaC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcJ,QAAQ,CAACI,IAA7C,EAAmDC,MAAnD,GAA4D,CAAnE;AACD,GAbkB;;AAcnBC,EAAAA,2BAA2B,CAACN,QAAD,EAA4BC,IAA5B,EAA8D;AACvF,WAAOA,IAAI,CAACC,MAAL,CAAaC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcJ,QAAQ,CAACI,IAA7C,EAAmDC,MAAnD,GAA4D,CAAnE;AACD,GAhBkB;;AAiBnBE,EAAAA,eAAe,GAAG;AAChB,WAAOpB,MAAM,CAACqB,SAAP,CAAiBC,SAAjB,CAA2BC,KAA3B,CAAiC,4DAAjC,IACH,IADG,GAEH,KAFJ;AAGD,GArBkB;;AAsBnBC,EAAAA,aAAa,GAAG;AACd,WAAOxB,MAAM,CAACyB,UAAP,GAAoB,GAApB,IAA2BzB,MAAM,CAAC0B,WAAP,GAAqB,GAAvD;AACD,GAxBkB;;AAyBnBC,EAAAA,KAAK,EAAGC,UAAD,IAAkG;AACvG,QAAIjC,mBAAmB,CAACiC,UAAD,CAAvB,EAAqC;AACnC,aAAOA,UAAU,CAACC,mBAAlB;AACD,KAFD,MAEO,IAAIjC,oBAAoB,CAACgC,UAAD,CAAxB,EAAsC;AAC3C,aAAOA,UAAU,CAACE,oBAAlB;AACD,KAFM,MAEA,IAAIjC,aAAa,CAAC+B,UAAD,CAAjB,EAA+B;AACpC,aAAOA,UAAU,CAACG,WAAlB;AACD,KAFM,MAEA;AACL,aAAOH,UAAU,CAACI,EAAlB;AACD;AACF,GAnCkB;AAoCnBC,EAAAA,WAAW,EAAE,CAAC7B,MAAD,EAAiB8B,MAAjB,KAAuD;AAClE,QAAIF,EAAE,GAAIE,MAAD,CAAgB,IAAhB,CAAT;AACA,WAAQ,GAAE9B,MAAO,IAAG4B,EAAG,IAAGE,MAAM,CAACC,IAAK,EAAtC;AACD,GAvCkB;;AAwCnB;;;;AAIAC,EAAAA,sBAAsB,GAAY;AAChC,UAAMd,SAAS,GAAGD,SAAS,CAACC,SAA5B,CADgC,CAEhC;;AACA,QAAIA,SAAS,CAACe,QAAV,CAAmB,QAAnB,MAAiCf,SAAS,CAACe,QAAV,CAAmB,OAAnB,KAA+Bf,SAAS,CAACe,QAAV,CAAmB,OAAnB,CAAhE,CAAJ,EAAkG;AAChG,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GAnDkB;;AAoDnBC,EAAAA,YAAY,EAAE,MAAM;AAClB,UAAMC,aAAa,uBAAnB;AACA,WAAOA,aAAP;AACD;AAvDkB,CAAd","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\nimport { AudioDeviceInfo, VideoDeviceInfo, RemoteVideoStream } from '@azure/communication-calling';\r\nimport {\r\n  CommunicationUser,\r\n  UnknownIdentifier,\r\n  CallingApplication,\r\n  PhoneNumber,\r\n  isCommunicationUser,\r\n  isCallingApplication,\r\n  isPhoneNumber\r\n} from '@azure/communication-common';\r\nimport preval from 'preval.macro';\r\n\r\nexport const utils = {\r\n  getAppServiceUrl: (): string => {\r\n    return window.location.origin;\r\n  },\r\n  getTokenForUser: async (userId: string): Promise<any> => {\r\n    const response = await fetch('/userToken?userId='.concat(encodeURIComponent(userId)));\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error('Invalid token response');\r\n  },\r\n  isSelectedAudioDeviceInList(selected: AudioDeviceInfo, list: AudioDeviceInfo[]): boolean {\r\n    return list.filter((item) => item.name === selected.name).length > 0;\r\n  },\r\n  isSelectedVideoDeviceInList(selected: VideoDeviceInfo, list: VideoDeviceInfo[]): boolean {\r\n    return list.filter((item) => item.name === selected.name).length > 0;\r\n  },\r\n  isMobileSession() {\r\n    return window.navigator.userAgent.match(/(iPad|iPhone|iPod|Android|webOS|BlackBerry|Windows Phone)/g)\r\n      ? true\r\n      : false;\r\n  },\r\n  isSmallScreen() {\r\n    return window.innerWidth < 700 || window.innerHeight < 400;\r\n  },\r\n  getId: (identifier: CommunicationUser | CallingApplication | UnknownIdentifier | PhoneNumber): string => {\r\n    if (isCommunicationUser(identifier)) {\r\n      return identifier.communicationUserId;\r\n    } else if (isCallingApplication(identifier)) {\r\n      return identifier.callingApplicationId;\r\n    } else if (isPhoneNumber(identifier)) {\r\n      return identifier.phoneNumber;\r\n    } else {\r\n      return identifier.id;\r\n    }\r\n  },\r\n  getStreamId: (userId: string, stream: RemoteVideoStream): string => {\r\n    var id = (stream as any)['id'];\r\n    return `${userId}-${id}-${stream.type}`;\r\n  },\r\n  /*\r\n   * TODO:\r\n   *  Remove this method once the SDK improves error handling for unsupported browser.\r\n   */\r\n  isOnIphoneAndNotSafari(): boolean {\r\n    const userAgent = navigator.userAgent;\r\n    // Chrome uses 'CriOS' in user agent string and Firefox uses 'FxiOS' in user agent string.\r\n    if (userAgent.includes('iPhone') && (userAgent.includes('FxiOS') || userAgent.includes('CriOS'))) {\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  getBuildTime: () => {\r\n    const dateTimeStamp = preval`module.exports = new Date().toLocaleString();`;\r\n    return dateTimeStamp;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}