{"ast":null,"code":"import _map from \"lodash/map\";\nimport _times from \"lodash/times\";\nimport _invoke from \"lodash/invoke\";\nimport { datepickerCalendarBehavior } from '@fluentui/accessibility';\nimport { addMonths, DateRangeType, DayOfWeek, DAYS_IN_WEEK, FirstWeekOfYear, formatMonthDayYear, formatMonthYear, getDayGrid } from '@fluentui/date-time-utilities';\nimport { getElementType, useAccessibility, useFluentContext, useStyles, useTelemetry, useUnhandledProps } from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { commonPropTypes, createShorthand } from '../../utils';\nimport { Grid } from '../Grid/Grid';\nimport { DatepickerCalendarHeader } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell'; // TODO: extract to date-time-utilities\n\nexport var DEFAULT_CALENDAR_LOCALIZED_STRINGS = {\n  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n}; // TODO: extract to date-time-utilities\n\nexport var datepickerCalendarClassName = 'ui-datepicker__calendar';\n/**\n * A DatepickerCalendar is used to display dates in sematically grouped way.\n */\n\nexport var DatepickerCalendar = /*#__PURE__*/function () {\n  var DatepickerCalendar = function DatepickerCalendar(props) {\n    var context = useFluentContext();\n\n    var _useTelemetry = useTelemetry(DatepickerCalendar.displayName, context.telemetry),\n        setStart = _useTelemetry.setStart,\n        setEnd = _useTelemetry.setEnd;\n\n    setStart();\n    var datepickerCalendarRef = React.useRef();\n    var className = props.className,\n        design = props.design,\n        styles = props.styles,\n        variables = props.variables,\n        calendarHeaderCell = props.calendarHeaderCell,\n        calendarCell = props.calendarCell,\n        header = props.header,\n        selectedDate = props.selectedDate,\n        navigatedDate = props.navigatedDate,\n        firstDayOfWeek = props.firstDayOfWeek,\n        firstWeekOfYear = props.firstWeekOfYear,\n        dateRangeType = props.dateRangeType,\n        weeksToShow = props.weeksToShow,\n        localizedStrings = props.localizedStrings,\n        today = props.today,\n        onDateChange = props.onDateChange;\n    var ElementType = getElementType(props);\n    var unhandledProps = useUnhandledProps(DatepickerCalendar.handledProps, props);\n    var getA11yProps = useAccessibility(props.accessibility, {\n      debugName: DatepickerCalendar.displayName,\n      actionHandlers: {},\n      rtl: context.rtl\n    });\n    var normalizedSelectedDate = selectedDate || today || new Date();\n\n    var _React$useState = React.useState(navigatedDate || today || new Date()),\n        gridNavigatedDate = _React$useState[0],\n        setGridNavigatedDate = _React$useState[1];\n\n    var _useStyles = useStyles(DatepickerCalendar.displayName, {\n      className: datepickerCalendarClassName,\n      mapPropsToInlineStyles: function mapPropsToInlineStyles() {\n        return {\n          className: className,\n          design: design,\n          styles: styles,\n          variables: variables\n        };\n      },\n      rtl: context.rtl\n    }),\n        classes = _useStyles.classes;\n    /** Get days grid and slice it in case it contains additional weeks at the beginning and end. */\n\n\n    var getSlicedGrid = function getSlicedGrid() {\n      var gridOptions = {\n        selectedDate: normalizedSelectedDate,\n        navigatedDate: gridNavigatedDate,\n        firstDayOfWeek: firstDayOfWeek,\n        firstWeekOfYear: firstWeekOfYear,\n        dateRangeType: dateRangeType\n      };\n      var grid = getDayGrid(gridOptions);\n\n      if (!weeksToShow) {\n        // Slicing because grid contains extra 1 week in the front and in the back.\n        return grid.slice(1, grid.length - 1);\n      }\n\n      return grid;\n    };\n\n    var grid = getSlicedGrid();\n\n    var changeMonth = function changeMonth(nextMonth) {\n      var updatedGridNavigatedDate = addMonths(gridNavigatedDate, nextMonth ? 1 : -1);\n      setGridNavigatedDate(updatedGridNavigatedDate);\n    };\n\n    var element = /*#__PURE__*/React.createElement(Ref, {\n      innerRef: datepickerCalendarRef\n    }, getA11yProps.unstable_wrapWithFocusZone( /*#__PURE__*/React.createElement(ElementType, getA11yProps('root', Object.assign({\n      className: classes.root\n    }, unhandledProps)), createShorthand(DatepickerCalendarHeader, header, {\n      defaultProps: function defaultProps() {\n        return {\n          label: formatMonthYear(gridNavigatedDate, localizedStrings)\n        };\n      },\n      overrideProps: function overrideProps(predefinedProps) {\n        return {\n          onPreviousClick: function onPreviousClick(e, data) {\n            changeMonth(false);\n\n            _invoke(predefinedProps, 'onPreviousClick', e, data);\n          },\n          onNextClick: function onNextClick(e, data) {\n            changeMonth(true);\n\n            _invoke(predefinedProps, 'onNextClick', e, data);\n          }\n        };\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      rows: grid.length + 1,\n      columns: DAYS_IN_WEEK\n    }, _times(DAYS_IN_WEEK, function (dayNumber) {\n      return createShorthand(DatepickerCalendarHeaderCell, calendarHeaderCell, {\n        defaultProps: function defaultProps() {\n          return getA11yProps('calendarHeaderCell', {\n            content: localizedStrings.shortDays[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n            key: dayNumber\n          });\n        }\n      });\n    }), _map(grid, function (week) {\n      return _map(week, function (day) {\n        return createShorthand(DatepickerCalendarCell, calendarCell, {\n          defaultProps: function defaultProps() {\n            return getA11yProps('calendarCell', {\n              content: day.date,\n              key: day.key,\n              'aria-label': formatMonthDayYear(day.originalDate, localizedStrings),\n              primary: day.isSelected,\n              disabled: !day.isInMonth\n            });\n          },\n          overrideProps: function overrideProps(predefinedProps) {\n            return {\n              onClick: function onClick(e) {\n                onDateChange(e, Object.assign({}, predefinedProps, {\n                  value: day\n                }));\n\n                _invoke(predefinedProps, 'onClick', e, Object.assign({}, predefinedProps, {\n                  value: day\n                }));\n              }\n            };\n          }\n        });\n      });\n    })))));\n    setEnd();\n    return element;\n  };\n\n  DatepickerCalendar.displayName = 'DatepickerCalendar';\n  DatepickerCalendar.propTypes = Object.assign({}, commonPropTypes.createCommon(), {\n    calendarCell: customPropTypes.itemShorthand,\n    calendarHeaderCell: customPropTypes.itemShorthand,\n    header: customPropTypes.itemShorthand,\n    onDateChange: PropTypes.func,\n    localizedStrings: PropTypes.object,\n    selectedDate: PropTypes.instanceOf(Date),\n    navigatedDate: PropTypes.instanceOf(Date),\n    minDate: PropTypes.instanceOf(Date),\n    maxDate: PropTypes.instanceOf(Date),\n    restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n    firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {\n      return DayOfWeek[name];\n    })),\n    firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(function (name) {\n      return FirstWeekOfYear[name];\n    })),\n    dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(function (name) {\n      return DateRangeType[name];\n    })),\n    daysToSelectInDayView: PropTypes.number,\n    today: PropTypes.instanceOf(Date),\n    showWeekNumbers: PropTypes.bool,\n    workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(function (name) {\n      return DayOfWeek[name];\n    }))),\n    format: PropTypes.func,\n    parse: PropTypes.func\n  });\n  DatepickerCalendar.defaultProps = {\n    accessibility: datepickerCalendarBehavior,\n    firstDayOfWeek: DayOfWeek.Monday,\n    firstWeekOfYear: FirstWeekOfYear.FirstDay,\n    dateRangeType: DateRangeType.Day,\n    header: {},\n    calendarCell: {},\n    calendarHeaderCell: {},\n    localizedStrings: DEFAULT_CALENDAR_LOCALIZED_STRINGS\n  };\n  DatepickerCalendar.handledProps = Object.keys(DatepickerCalendar.propTypes);\n  return DatepickerCalendar;\n}();","map":{"version":3,"sources":["components/Datepicker/DatepickerCalendar.tsx"],"names":["DEFAULT_CALENDAR_LOCALIZED_STRINGS","months","shortMonths","days","shortDays","datepickerCalendarClassName","DatepickerCalendar","context","useFluentContext","setStart","setEnd","useTelemetry","datepickerCalendarRef","React","className","design","styles","variables","calendarHeaderCell","calendarCell","header","selectedDate","navigatedDate","firstDayOfWeek","firstWeekOfYear","dateRangeType","weeksToShow","localizedStrings","today","onDateChange","props","ElementType","getElementType","unhandledProps","useUnhandledProps","getA11yProps","useAccessibility","debugName","actionHandlers","rtl","normalizedSelectedDate","gridNavigatedDate","setGridNavigatedDate","classes","useStyles","mapPropsToInlineStyles","getSlicedGrid","gridOptions","grid","getDayGrid","changeMonth","updatedGridNavigatedDate","addMonths","nextMonth","element","root","createShorthand","defaultProps","label","formatMonthYear","overrideProps","onPreviousClick","onNextClick","DAYS_IN_WEEK","content","dayNumber","key","day","formatMonthDayYear","primary","disabled","isInMonth","onClick","value","commonPropTypes","customPropTypes","PropTypes","minDate","maxDate","restrictedDates","DayOfWeek","FirstWeekOfYear","DateRangeType","daysToSelectInDayView","showWeekNumbers","workWeekDays","format","parse","func","accessibility","Object"],"mappings":"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","sourcesContent":["import { Accessibility, datepickerCalendarBehavior, DatepickerCalendarBehaviorProps } from '@fluentui/accessibility';\nimport {\n  addMonths,\n  DateRangeType,\n  DayOfWeek,\n  DAYS_IN_WEEK,\n  FirstWeekOfYear,\n  formatMonthDayYear,\n  formatMonthYear,\n  getDayGrid,\n  IDateGridStrings,\n  IDay,\n  IRestrictedDatesOptions,\n} from '@fluentui/date-time-utilities';\nimport {\n  ComponentWithAs,\n  getElementType,\n  useAccessibility,\n  useFluentContext,\n  useStyles,\n  useTelemetry,\n  useUnhandledProps,\n} from '@fluentui/react-bindings';\nimport { Ref } from '@fluentui/react-component-ref';\nimport * as customPropTypes from '@fluentui/react-proptypes';\nimport * as _ from 'lodash';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { ComponentEventHandler, FluentComponentStaticProps, ShorthandValue } from '../../types';\nimport { commonPropTypes, createShorthand, UIComponentProps } from '../../utils';\nimport { Grid } from '../Grid/Grid';\nimport { DatepickerCalendarHeader, DatepickerCalendarHeaderProps } from './DatepickerCalendarHeader';\nimport { DatepickerCalendarCellProps, DatepickerCalendarCell } from './DatepickerCalendarCell';\nimport { DatepickerCalendarHeaderCellProps, DatepickerCalendarHeaderCell } from './DatepickerCalendarHeaderCell';\n\n// TODO: extract to date-time-utilities\nexport const DEFAULT_CALENDAR_LOCALIZED_STRINGS: IDateGridStrings = {\n  months: [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n  ],\n  shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  shortDays: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n};\n\n// TODO: extract to date-time-utilities\nexport interface IDateCalendarFormatting {\n  /**\n   * Format the date according to specified function.\n   * Intended use case is localization.\n   */\n  format?: (date: Date) => string;\n\n  /**\n   * Parse date from string representation into Date type.\n   */\n  parse?: (date: string) => Date;\n}\n\n// TODO: extract to date-time-utilities\nexport interface IDatepickerCalendarOptions extends IRestrictedDatesOptions {\n  /**\n   * The first day of the week for your locale.\n   */\n  firstDayOfWeek?: DayOfWeek;\n\n  /**\n   * Defines when the first week of the year should start, FirstWeekOfYear.FirstDay,\n   * FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values\n   */\n  firstWeekOfYear?: FirstWeekOfYear;\n\n  /**\n   * The date range type indicating how  many days should be selected as the user\n   * selects days\n   */\n  dateRangeType?: DateRangeType;\n\n  /**\n   * The number of days to select while dateRangeType === DateRangeType.Day. Used in order to have multi-day\n   * views.\n   */\n  daysToSelectInDayView?: number;\n\n  /**\n   * Value of today. If null, current time in client machine will be used.\n   */\n  today?: Date;\n\n  /**\n   * Whether the calendar should show the week number (weeks 1 to 53) before each week row\n   */\n  showWeekNumbers?: boolean;\n\n  /**\n   * The days that are selectable when `dateRangeType` is WorkWeek.\n   * If `dateRangeType` is not WorkWeek this property does nothing.\n   */\n  workWeekDays?: DayOfWeek[];\n}\n\nexport interface DatepickerCalendarProps extends IDatepickerCalendarOptions, IDateCalendarFormatting, UIComponentProps {\n  /** Calendar can have header. */\n  header?: ShorthandValue<DatepickerCalendarHeaderProps>;\n\n  /** A render function to customize how cells are rendered in the Calendar. */\n  calendarCell?: ShorthandValue<DatepickerCalendarCellProps>;\n\n  /** A render function to customize how header cells are rendered in the Calendar. */\n  calendarHeaderCell?: ShorthandValue<DatepickerCalendarHeaderCellProps>;\n\n  /**\n   * The currently selected date\n   */\n  selectedDate?: Date;\n  /**\n   * The currently navigated date\n   */\n  navigatedDate?: Date;\n\n  /** Accessibility behavior if overridden by the user. */\n  accessibility?: Accessibility<DatepickerCalendarBehaviorProps>;\n\n  /**\n   * Called on change of the date.\n   *\n   * @param event - React's original SyntheticEvent.\n   * @param data - All props and proposed value.\n   */\n  onDateChange?: ComponentEventHandler<DatepickerCalendarProps & { value: IDay }>;\n\n  /** Localized labels */\n  localizedStrings?: IDateGridStrings;\n}\n\nexport type DatepickerCalendarStylesProps = never;\n\nexport const datepickerCalendarClassName = 'ui-datepicker__calendar';\n\n/**\n * A DatepickerCalendar is used to display dates in sematically grouped way.\n */\nexport const DatepickerCalendar: ComponentWithAs<'div', DatepickerCalendarProps> &\n  FluentComponentStaticProps<DatepickerCalendarProps> = props => {\n  const context = useFluentContext();\n  const { setStart, setEnd } = useTelemetry(DatepickerCalendar.displayName, context.telemetry);\n  setStart();\n  const datepickerCalendarRef = React.useRef<HTMLElement>();\n\n  const {\n    className,\n    design,\n    styles,\n    variables,\n    calendarHeaderCell,\n    calendarCell,\n    header,\n    selectedDate,\n    navigatedDate,\n    firstDayOfWeek,\n    firstWeekOfYear,\n    dateRangeType,\n    weeksToShow,\n    localizedStrings,\n    today,\n    onDateChange,\n  } = props;\n\n  const ElementType = getElementType(props);\n  const unhandledProps = useUnhandledProps(DatepickerCalendar.handledProps, props);\n  const getA11yProps = useAccessibility(props.accessibility, {\n    debugName: DatepickerCalendar.displayName,\n    actionHandlers: {},\n    rtl: context.rtl,\n  });\n  const normalizedSelectedDate = selectedDate || today || new Date();\n\n  const [gridNavigatedDate, setGridNavigatedDate] = React.useState<Date>(navigatedDate || today || new Date());\n\n  const { classes } = useStyles<DatepickerCalendarStylesProps>(DatepickerCalendar.displayName, {\n    className: datepickerCalendarClassName,\n    mapPropsToInlineStyles: () => ({\n      className,\n      design,\n      styles,\n      variables,\n    }),\n    rtl: context.rtl,\n  });\n\n  /** Get days grid and slice it in case it contains additional weeks at the beginning and end. */\n  const getSlicedGrid = () => {\n    const gridOptions = {\n      selectedDate: normalizedSelectedDate,\n      navigatedDate: gridNavigatedDate,\n      firstDayOfWeek,\n      firstWeekOfYear,\n      dateRangeType,\n    };\n    const grid = getDayGrid(gridOptions);\n    if (!weeksToShow) {\n      // Slicing because grid contains extra 1 week in the front and in the back.\n      return grid.slice(1, grid.length - 1);\n    }\n    return grid;\n  };\n\n  const grid = getSlicedGrid();\n\n  const changeMonth = (nextMonth: boolean) => {\n    const updatedGridNavigatedDate = addMonths(gridNavigatedDate, nextMonth ? 1 : -1);\n    setGridNavigatedDate(updatedGridNavigatedDate);\n  };\n\n  const element = (\n    <Ref innerRef={datepickerCalendarRef}>\n      {getA11yProps.unstable_wrapWithFocusZone(\n        <ElementType\n          {...getA11yProps('root', {\n            className: classes.root,\n            ...unhandledProps,\n          })}\n        >\n          {createShorthand(DatepickerCalendarHeader, header, {\n            defaultProps: () => ({\n              label: formatMonthYear(gridNavigatedDate, localizedStrings),\n            }),\n            overrideProps: (predefinedProps: DatepickerCalendarHeaderProps): DatepickerCalendarHeaderProps => ({\n              onPreviousClick: (e, data) => {\n                changeMonth(false);\n                _.invoke(predefinedProps, 'onPreviousClick', e, data);\n              },\n              onNextClick: (e, data) => {\n                changeMonth(true);\n                _.invoke(predefinedProps, 'onNextClick', e, data);\n              },\n            }),\n          })}\n          <Grid rows={grid.length + 1} columns={DAYS_IN_WEEK}>\n            {_.times(DAYS_IN_WEEK, dayNumber =>\n              createShorthand(DatepickerCalendarHeaderCell, calendarHeaderCell, {\n                defaultProps: () =>\n                  getA11yProps('calendarHeaderCell', {\n                    content: localizedStrings.shortDays[(dayNumber + firstDayOfWeek) % DAYS_IN_WEEK],\n                    key: dayNumber,\n                  }),\n              }),\n            )}\n            {_.map(grid, week =>\n              _.map(week, (day: IDay) =>\n                createShorthand(DatepickerCalendarCell, calendarCell, {\n                  defaultProps: () =>\n                    getA11yProps('calendarCell', {\n                      content: day.date,\n                      key: day.key,\n                      'aria-label': formatMonthDayYear(day.originalDate, localizedStrings),\n                      primary: day.isSelected,\n                      disabled: !day.isInMonth,\n                    }),\n                  overrideProps: (predefinedProps: DatepickerCalendarCellProps): DatepickerCalendarCellProps => ({\n                    onClick: e => {\n                      onDateChange(e, { ...predefinedProps, value: day });\n                      _.invoke(predefinedProps, 'onClick', e, { ...predefinedProps, value: day });\n                    },\n                  }),\n                }),\n              ),\n            )}\n          </Grid>\n        </ElementType>,\n      )}\n    </Ref>\n  );\n  setEnd();\n  return element;\n};\n\nDatepickerCalendar.displayName = 'DatepickerCalendar';\n\nDatepickerCalendar.propTypes = {\n  ...commonPropTypes.createCommon(),\n  calendarCell: customPropTypes.itemShorthand,\n  calendarHeaderCell: customPropTypes.itemShorthand,\n  header: customPropTypes.itemShorthand,\n  onDateChange: PropTypes.func,\n  localizedStrings: PropTypes.object as PropTypes.Validator<IDateGridStrings>,\n  selectedDate: PropTypes.instanceOf(Date),\n  navigatedDate: PropTypes.instanceOf(Date),\n\n  minDate: PropTypes.instanceOf(Date),\n  maxDate: PropTypes.instanceOf(Date),\n  restrictedDates: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n\n  firstDayOfWeek: PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name])),\n  firstWeekOfYear: PropTypes.oneOf(Object.keys(FirstWeekOfYear).map(name => FirstWeekOfYear[name])),\n  dateRangeType: PropTypes.oneOf(Object.keys(DateRangeType).map(name => DateRangeType[name])),\n  daysToSelectInDayView: PropTypes.number,\n  today: PropTypes.instanceOf(Date),\n  showWeekNumbers: PropTypes.bool,\n  workWeekDays: PropTypes.arrayOf(PropTypes.oneOf(Object.keys(DayOfWeek).map(name => DayOfWeek[name]))),\n\n  format: PropTypes.func,\n  parse: PropTypes.func,\n};\n\nDatepickerCalendar.defaultProps = {\n  accessibility: datepickerCalendarBehavior,\n  firstDayOfWeek: DayOfWeek.Monday,\n  firstWeekOfYear: FirstWeekOfYear.FirstDay,\n  dateRangeType: DateRangeType.Day,\n  header: {},\n  calendarCell: {},\n  calendarHeaderCell: {},\n  localizedStrings: DEFAULT_CALENDAR_LOCALIZED_STRINGS,\n};\n\nDatepickerCalendar.handledProps = Object.keys(DatepickerCalendar.propTypes) as any;\n"]},"metadata":{},"sourceType":"module"}