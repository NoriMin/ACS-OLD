{"ast":null,"code":"import*as React from'react';import{Persona,PersonaSize,Stack,IconButton,PersonaPresence,FontIcon,OverflowSet}from'@fluentui/react';import{itemStyles,participantStackStyle,participantStackTokens,overFlowButtonStyles,iconStyle}from'./styles/ParticipantStack.styles';import{utils}from'../Utils/Utils';var onRenderItem=function onRenderItem(item){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Persona,{text:item.name,styles:itemStyles,size:PersonaSize.size32,presence:item.state==='Connected'?PersonaPresence.online:PersonaPresence.offline}),item.isScreenSharing&&/*#__PURE__*/React.createElement(FontIcon,{className:iconStyle,iconName:\"ScreenCast\"}));};var onRenderOverflowButton=function onRenderOverflowButton(overflowItems){return/*#__PURE__*/React.createElement(IconButton,{role:\"menuitem\",title:\"More options\",styles:overFlowButtonStyles,menuIconProps:{iconName:'More'},menuProps:{items:overflowItems}});};var getParticipants=function getParticipants(participants,removeParticipant){return participants.map(function(item,i){return/*#__PURE__*/React.createElement(OverflowSet,{key:i,items:[item],role:\"menubar\",vertical:false,onRenderOverflowButton:onRenderOverflowButton,onRenderItem:onRenderItem});});};export default(function(props){var activeScreenShareStream=props.screenShareStreams&&props.screenShareStreams.length===1;var screenShareStream=props.screenShareStreams[0];var participants=props.remoteParticipants.map(function(participant){var _participant$displayN;var isScreenSharing=activeScreenShareStream?screenShareStream.user===participant:false;return{key:utils.getId(participant.identifier),name:(_participant$displayN=participant.displayName)!==null&&_participant$displayN!==void 0?_participant$displayN:utils.getId(participant.identifier),participant:participant,state:participant.state,isScreenSharing:isScreenSharing};});participants.push({key:\"\".concat(props.userId,\" (You)\"),name:\"\".concat(props.userId,\" (You)\"),participant:undefined,state:'Connected',isScreenSharing:activeScreenShareStream?utils.getId(screenShareStream.user.identifier)===props.userId:false});return/*#__PURE__*/React.createElement(Stack,{className:participantStackStyle,tokens:participantStackTokens},getParticipants(participants,props.removeParticipant));});","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/components/ParticipantStack.tsx"],"names":["React","Persona","PersonaSize","Stack","IconButton","PersonaPresence","FontIcon","OverflowSet","itemStyles","participantStackStyle","participantStackTokens","overFlowButtonStyles","iconStyle","utils","onRenderItem","item","name","size32","state","online","offline","isScreenSharing","onRenderOverflowButton","overflowItems","iconName","items","getParticipants","participants","removeParticipant","map","i","props","activeScreenShareStream","screenShareStreams","length","screenShareStream","remoteParticipants","participant","user","key","getId","identifier","displayName","push","userId","undefined"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { Persona, PersonaSize, Stack, IconButton, PersonaPresence, FontIcon, OverflowSet } from '@fluentui/react';\r\nimport {\r\n  itemStyles,\r\n  participantStackStyle,\r\n  participantStackTokens,\r\n  overFlowButtonStyles,\r\n  iconStyle\r\n} from './styles/ParticipantStack.styles';\r\nimport { RemoteParticipant, Call } from '@azure/communication-calling';\r\nimport { CallingApplication, CommunicationUser } from '@azure/communication-common';\r\nimport { ParticipantStream } from 'core/reducers';\r\nimport { utils } from '../Utils/Utils';\r\n\r\nexport interface ParticipantStackProps {\r\n  userId: string;\r\n  call: Call;\r\n  callState: string;\r\n  screenShareStreams: ParticipantStream[];\r\n  remoteParticipants: RemoteParticipant[];\r\n  removeParticipant(user: CommunicationUser | CallingApplication | undefined): void;\r\n}\r\nexport interface CallParticipant {\r\n  key: string;\r\n  name: string;\r\n  participant: RemoteParticipant | undefined;\r\n  state: string;\r\n  isScreenSharing: boolean;\r\n}\r\n\r\nconst onRenderItem = (item: any) => (\r\n  <>\r\n    <Persona\r\n      text={item.name}\r\n      styles={itemStyles}\r\n      size={PersonaSize.size32}\r\n      presence={item.state === 'Connected' ? PersonaPresence.online : PersonaPresence.offline}\r\n    />\r\n    {item.isScreenSharing && <FontIcon className={iconStyle} iconName=\"ScreenCast\" />}\r\n  </>\r\n);\r\nconst onRenderOverflowButton = (overflowItems: any) => (\r\n  <IconButton\r\n    role=\"menuitem\"\r\n    title=\"More options\"\r\n    styles={overFlowButtonStyles}\r\n    menuIconProps={{ iconName: 'More' }}\r\n    menuProps={{ items: overflowItems }}\r\n  />\r\n);\r\nconst getParticipants = (\r\n  participants: CallParticipant[],\r\n  removeParticipant: (user: CommunicationUser | CallingApplication | undefined) => void\r\n) =>\r\n  participants.map((item, i) => (\r\n    <OverflowSet\r\n      key={i}\r\n      items={[item]}\r\n      role=\"menubar\"\r\n      vertical={false}\r\n      onRenderOverflowButton={onRenderOverflowButton}\r\n      onRenderItem={onRenderItem}\r\n    />\r\n  ));\r\nexport default (props: ParticipantStackProps): JSX.Element => {\r\n  const activeScreenShareStream = props.screenShareStreams && props.screenShareStreams.length === 1;\r\n  const screenShareStream = props.screenShareStreams[0];\r\n  const participants: CallParticipant[] = props.remoteParticipants.map((participant) => {\r\n    const isScreenSharing = activeScreenShareStream ? screenShareStream.user === participant : false;\r\n    return {\r\n      key: utils.getId(participant.identifier),\r\n      name: participant.displayName ?? utils.getId(participant.identifier),\r\n      participant: participant,\r\n      state: participant.state,\r\n      isScreenSharing: isScreenSharing\r\n    };\r\n  });\r\n  participants.push({\r\n    key: `${props.userId} (You)`,\r\n    name: `${props.userId} (You)`,\r\n    participant: undefined,\r\n    state: 'Connected',\r\n    isScreenSharing: activeScreenShareStream ? utils.getId(screenShareStream.user.identifier) === props.userId : false\r\n  });\r\n  return (\r\n    <Stack className={participantStackStyle} tokens={participantStackTokens}>\r\n      {getParticipants(participants, props.removeParticipant)}\r\n    </Stack>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}