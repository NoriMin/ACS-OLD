{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";// © Microsoft Corporation. All rights reserved.\nimport{isCommunicationUser,isCallingApplication,isPhoneNumber}from'@azure/communication-common';export var utils={getAppServiceUrl:function getAppServiceUrl(){return window.location.origin;},getTokenForUser:function(){var _getTokenForUser=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(userId){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetch('/userToken?userId='.concat(encodeURIComponent(userId)));case 2:response=_context.sent;if(!response.ok){_context.next=5;break;}return _context.abrupt(\"return\",response.json());case 5:throw new Error('Invalid token response');case 6:case\"end\":return _context.stop();}}},_callee);}));function getTokenForUser(_x){return _getTokenForUser.apply(this,arguments);}return getTokenForUser;}(),isSelectedAudioDeviceInList:function isSelectedAudioDeviceInList(selected,list){return list.filter(function(item){return item.name===selected.name;}).length>0;},isSelectedVideoDeviceInList:function isSelectedVideoDeviceInList(selected,list){return list.filter(function(item){return item.name===selected.name;}).length>0;},isMobileSession:function isMobileSession(){return window.navigator.userAgent.match(/(iPad|iPhone|iPod|Android|webOS|BlackBerry|Windows Phone)/g)?true:false;},isSmallScreen:function isSmallScreen(){return window.innerWidth<700||window.innerHeight<400;},getId:function getId(identifier){if(isCommunicationUser(identifier)){return identifier.communicationUserId;}else if(isCallingApplication(identifier)){return identifier.callingApplicationId;}else if(isPhoneNumber(identifier)){return identifier.phoneNumber;}else{return identifier.id;}},getStreamId:function getStreamId(userId,stream){var id=stream['id'];return\"\".concat(userId,\"-\").concat(id,\"-\").concat(stream.type);},/*\r\n   * TODO:\r\n   *  Remove this method once the SDK improves error handling for unsupported browser.\r\n   */isOnIphoneAndNotSafari:function isOnIphoneAndNotSafari(){var userAgent=navigator.userAgent;// Chrome uses 'CriOS' in user agent string and Firefox uses 'FxiOS' in user agent string.\nif(userAgent.includes('iPhone')&&(userAgent.includes('FxiOS')||userAgent.includes('CriOS'))){return true;}return false;},getBuildTime:function getBuildTime(){var dateTimeStamp=\"2020-9-26 22:25:09\";return dateTimeStamp;}};","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/Utils/Utils.ts"],"names":["isCommunicationUser","isCallingApplication","isPhoneNumber","utils","getAppServiceUrl","window","location","origin","getTokenForUser","userId","fetch","concat","encodeURIComponent","response","ok","json","Error","isSelectedAudioDeviceInList","selected","list","filter","item","name","length","isSelectedVideoDeviceInList","isMobileSession","navigator","userAgent","match","isSmallScreen","innerWidth","innerHeight","getId","identifier","communicationUserId","callingApplicationId","phoneNumber","id","getStreamId","stream","type","isOnIphoneAndNotSafari","includes","getBuildTime","dateTimeStamp"],"mappings":"idAAA;AAEA,OAKEA,mBALF,CAMEC,oBANF,CAOEC,aAPF,KAQO,6BARP,CAWA,MAAO,IAAMC,CAAAA,KAAK,CAAG,CACnBC,gBAAgB,CAAE,2BAAc,CAC9B,MAAOC,CAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAvB,CACD,CAHkB,CAInBC,eAAe,yFAAE,iBAAOC,MAAP,qJACQC,CAAAA,KAAK,CAAC,qBAAqBC,MAArB,CAA4BC,kBAAkB,CAACH,MAAD,CAA9C,CAAD,CADb,QACTI,QADS,mBAEXA,QAAQ,CAACC,EAFE,yDAGND,QAAQ,CAACE,IAAT,EAHM,cAKT,IAAIC,CAAAA,KAAJ,CAAU,wBAAV,CALS,uDAAF,yGAJI,CAWnBC,2BAXmB,sCAWSC,QAXT,CAWoCC,IAXpC,CAWsE,CACvF,MAAOA,CAAAA,IAAI,CAACC,MAAL,CAAY,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,IAAL,GAAcJ,QAAQ,CAACI,IAAjC,EAAZ,EAAmDC,MAAnD,CAA4D,CAAnE,CACD,CAbkB,CAcnBC,2BAdmB,sCAcSN,QAdT,CAcoCC,IAdpC,CAcsE,CACvF,MAAOA,CAAAA,IAAI,CAACC,MAAL,CAAY,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,IAAL,GAAcJ,QAAQ,CAACI,IAAjC,EAAZ,EAAmDC,MAAnD,CAA4D,CAAnE,CACD,CAhBkB,CAiBnBE,eAjBmB,2BAiBD,CAChB,MAAOpB,CAAAA,MAAM,CAACqB,SAAP,CAAiBC,SAAjB,CAA2BC,KAA3B,CAAiC,4DAAjC,EACH,IADG,CAEH,KAFJ,CAGD,CArBkB,CAsBnBC,aAtBmB,yBAsBH,CACd,MAAOxB,CAAAA,MAAM,CAACyB,UAAP,CAAoB,GAApB,EAA2BzB,MAAM,CAAC0B,WAAP,CAAqB,GAAvD,CACD,CAxBkB,CAyBnBC,KAAK,CAAE,eAACC,UAAD,CAAkG,CACvG,GAAIjC,mBAAmB,CAACiC,UAAD,CAAvB,CAAqC,CACnC,MAAOA,CAAAA,UAAU,CAACC,mBAAlB,CACD,CAFD,IAEO,IAAIjC,oBAAoB,CAACgC,UAAD,CAAxB,CAAsC,CAC3C,MAAOA,CAAAA,UAAU,CAACE,oBAAlB,CACD,CAFM,IAEA,IAAIjC,aAAa,CAAC+B,UAAD,CAAjB,CAA+B,CACpC,MAAOA,CAAAA,UAAU,CAACG,WAAlB,CACD,CAFM,IAEA,CACL,MAAOH,CAAAA,UAAU,CAACI,EAAlB,CACD,CACF,CAnCkB,CAoCnBC,WAAW,CAAE,qBAAC7B,MAAD,CAAiB8B,MAAjB,CAAuD,CAClE,GAAIF,CAAAA,EAAE,CAAIE,MAAD,CAAgB,IAAhB,CAAT,CACA,gBAAU9B,MAAV,aAAoB4B,EAApB,aAA0BE,MAAM,CAACC,IAAjC,EACD,CAvCkB,CAwCnB;;;KAIAC,sBA5CmB,kCA4Ce,CAChC,GAAMd,CAAAA,SAAS,CAAGD,SAAS,CAACC,SAA5B,CACA;AACA,GAAIA,SAAS,CAACe,QAAV,CAAmB,QAAnB,IAAiCf,SAAS,CAACe,QAAV,CAAmB,OAAnB,GAA+Bf,SAAS,CAACe,QAAV,CAAmB,OAAnB,CAAhE,CAAJ,CAAkG,CAChG,MAAO,KAAP,CACD,CACD,MAAO,MAAP,CACD,CAnDkB,CAoDnBC,YAAY,CAAE,uBAAM,CAClB,GAAMC,CAAAA,aAAa,qBAAnB,CACA,MAAOA,CAAAA,aAAP,CACD,CAvDkB,CAAd","sourcesContent":["// © Microsoft Corporation. All rights reserved.\r\nimport { AudioDeviceInfo, VideoDeviceInfo, RemoteVideoStream } from '@azure/communication-calling';\r\nimport {\r\n  CommunicationUser,\r\n  UnknownIdentifier,\r\n  CallingApplication,\r\n  PhoneNumber,\r\n  isCommunicationUser,\r\n  isCallingApplication,\r\n  isPhoneNumber\r\n} from '@azure/communication-common';\r\nimport preval from 'preval.macro';\r\n\r\nexport const utils = {\r\n  getAppServiceUrl: (): string => {\r\n    return window.location.origin;\r\n  },\r\n  getTokenForUser: async (userId: string): Promise<any> => {\r\n    const response = await fetch('/userToken?userId='.concat(encodeURIComponent(userId)));\r\n    if (response.ok) {\r\n      return response.json();\r\n    }\r\n    throw new Error('Invalid token response');\r\n  },\r\n  isSelectedAudioDeviceInList(selected: AudioDeviceInfo, list: AudioDeviceInfo[]): boolean {\r\n    return list.filter((item) => item.name === selected.name).length > 0;\r\n  },\r\n  isSelectedVideoDeviceInList(selected: VideoDeviceInfo, list: VideoDeviceInfo[]): boolean {\r\n    return list.filter((item) => item.name === selected.name).length > 0;\r\n  },\r\n  isMobileSession() {\r\n    return window.navigator.userAgent.match(/(iPad|iPhone|iPod|Android|webOS|BlackBerry|Windows Phone)/g)\r\n      ? true\r\n      : false;\r\n  },\r\n  isSmallScreen() {\r\n    return window.innerWidth < 700 || window.innerHeight < 400;\r\n  },\r\n  getId: (identifier: CommunicationUser | CallingApplication | UnknownIdentifier | PhoneNumber): string => {\r\n    if (isCommunicationUser(identifier)) {\r\n      return identifier.communicationUserId;\r\n    } else if (isCallingApplication(identifier)) {\r\n      return identifier.callingApplicationId;\r\n    } else if (isPhoneNumber(identifier)) {\r\n      return identifier.phoneNumber;\r\n    } else {\r\n      return identifier.id;\r\n    }\r\n  },\r\n  getStreamId: (userId: string, stream: RemoteVideoStream): string => {\r\n    var id = (stream as any)['id'];\r\n    return `${userId}-${id}-${stream.type}`;\r\n  },\r\n  /*\r\n   * TODO:\r\n   *  Remove this method once the SDK improves error handling for unsupported browser.\r\n   */\r\n  isOnIphoneAndNotSafari(): boolean {\r\n    const userAgent = navigator.userAgent;\r\n    // Chrome uses 'CriOS' in user agent string and Firefox uses 'FxiOS' in user agent string.\r\n    if (userAgent.includes('iPhone') && (userAgent.includes('FxiOS') || userAgent.includes('CriOS'))) {\r\n      return true;\r\n    }\r\n    return false;\r\n  },\r\n  getBuildTime: () => {\r\n    const dateTimeStamp = preval`module.exports = new Date().toLocaleString();`;\r\n    return dateTimeStamp;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}