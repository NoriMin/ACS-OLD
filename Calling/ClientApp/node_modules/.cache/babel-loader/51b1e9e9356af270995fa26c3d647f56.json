{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Tests an Identifier to determine whether it implements CommunicationUser.\n *\n * @param identifier The assumed CommunicationUser to be tested.\n */\nexport var isCommunicationUser = function isCommunicationUser(identifier) {\n  return typeof identifier.communicationUserId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements PhoneNumber.\n *\n * @param identifier The assumed PhoneNumber to be tested.\n */\n\nexport var isPhoneNumber = function isPhoneNumber(identifier) {\n  return typeof identifier.phoneNumber === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements CallingApplication.\n *\n * @param identifier The assumed CallingApplication to be tested.\n */\n\nexport var isCallingApplication = function isCallingApplication(identifier) {\n  return typeof identifier.callingApplicationId === \"string\";\n};\n/**\n * Tests an Identifier to determine whether it implements UnknownIdentifier.\n *\n * @param identifier The assumed UnknownIdentifier to be tested.\n */\n\nexport var isUnknownIdentifier = function isUnknownIdentifier(identifier) {\n  return typeof identifier.id === \"string\";\n};\n/**\n * Returns the IdentifierKind for a given Identifier. Returns undefined if the kind couldn't be inferred.\n *\n * @param identifier The identifier whose kind is to be inferred.\n */\n\nexport var getIdentifierKind = function getIdentifierKind(identifier) {\n  if (isCommunicationUser(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"CommunicationUser\"\n    });\n  }\n\n  if (isPhoneNumber(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"PhoneNumber\"\n    });\n  }\n\n  if (isCallingApplication(identifier)) {\n    return Object.assign(Object.assign({}, identifier), {\n      kind: \"CallingApplication\"\n    });\n  }\n\n  return Object.assign(Object.assign({}, identifier), {\n    kind: \"Unknown\"\n  });\n};","map":{"version":3,"sources":["../../src/identifierModels.ts"],"names":[],"mappings":"AAAA;AACA;;AA+CA;;;;;AAKA,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,UAAD,EAA4D;AAC7F,SAAO,OAAQ,UAAkB,CAAC,mBAA3B,KAAmD,QAA1D;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAM,aAAa,GAAG,SAAhB,aAAgB,CAAC,UAAD,EAAsD;AACjF,SAAO,OAAQ,UAAkB,CAAC,WAA3B,KAA2C,QAAlD;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAM,oBAAoB,GAAG,SAAvB,oBAAuB,CAAC,UAAD,EAA6D;AAC/F,SAAO,OAAQ,UAAkB,CAAC,oBAA3B,KAAoD,QAA3D;AACD,CAFM;AAIP;;;;;;AAKA,OAAO,IAAM,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,UAAD,EAA4D;AAC7F,SAAO,OAAQ,UAAkB,CAAC,EAA3B,KAAkC,QAAzC;AACD,CAFM;AAqDP;;;;;;AAKA,OAAO,IAAM,iBAAiB,GAAG,SAApB,iBAAoB,CAAC,UAAD,EAA2C;AAC1E,MAAI,mBAAmB,CAAC,UAAD,CAAvB,EAAqC;AACnC,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,UAAZ,CAAA,EAAsB;AAAE,MAAA,IAAI,EAAE;AAAR,KAAtB,CAAA;AACD;;AACD,MAAI,aAAa,CAAC,UAAD,CAAjB,EAA+B;AAC7B,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,UAAZ,CAAA,EAAsB;AAAE,MAAA,IAAI,EAAE;AAAR,KAAtB,CAAA;AACD;;AACD,MAAI,oBAAoB,CAAC,UAAD,CAAxB,EAAsC;AACpC,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,UAAZ,CAAA,EAAsB;AAAE,MAAA,IAAI,EAAE;AAAR,KAAtB,CAAA;AACD;;AACD,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,UAAZ,CAAA,EAAsB;AAAE,IAAA,IAAI,EAAE;AAAR,GAAtB,CAAA;AACD,CAXM","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Identifies a communication user.\n */\nexport type Identifier = CommunicationUser | PhoneNumber | CallingApplication | UnknownIdentifier;\n\n/**\n * An Azure Communication user.\n */\nexport interface CommunicationUser {\n  /**\n   * Id of the CommunicationUser as returned from the Communication Service.\n   */\n  communicationUserId: string;\n}\n\n/**\n * A phone number.\n */\nexport interface PhoneNumber {\n  /**\n   * The phone number in E.164 format.\n   */\n  phoneNumber: string;\n}\n\n/**\n * A calling application, i.e. a non-human participant in communication.\n */\nexport interface CallingApplication {\n  /**\n   * Id of the CallingApplication.\n   */\n  callingApplicationId: string;\n}\n\n/**\n * An unknown identifier that doesn't fit any of the other identifier types.\n */\nexport interface UnknownIdentifier {\n  /**\n   * Id of the UnknownIdentifier.\n   */\n  id: string;\n}\n\n/**\n * Tests an Identifier to determine whether it implements CommunicationUser.\n *\n * @param identifier The assumed CommunicationUser to be tested.\n */\nexport const isCommunicationUser = (identifier: Identifier): identifier is CommunicationUser => {\n  return typeof (identifier as any).communicationUserId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements PhoneNumber.\n *\n * @param identifier The assumed PhoneNumber to be tested.\n */\nexport const isPhoneNumber = (identifier: Identifier): identifier is PhoneNumber => {\n  return typeof (identifier as any).phoneNumber === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements CallingApplication.\n *\n * @param identifier The assumed CallingApplication to be tested.\n */\nexport const isCallingApplication = (identifier: Identifier): identifier is CallingApplication => {\n  return typeof (identifier as any).callingApplicationId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements UnknownIdentifier.\n *\n * @param identifier The assumed UnknownIdentifier to be tested.\n */\nexport const isUnknownIdentifier = (identifier: Identifier): identifier is UnknownIdentifier => {\n  return typeof (identifier as any).id === \"string\";\n};\n\n/**\n * The IdentifierKind is a discriminated union that adds a property `kind` to an Identifier.\n */\nexport type IdentifierKind =\n  | CommunicationUserKind\n  | PhoneNumberKind\n  | CallingApplicationKind\n  | UnknownIdentifierKind;\n\n/**\n * IdentifierKind for a CommunicationUser identifier.\n */\nexport interface CommunicationUserKind extends CommunicationUser {\n  /**\n   * The identifier kind.\n   */\n  kind: \"CommunicationUser\";\n}\n\n/**\n * IdentifierKind for a PhoneNumber identifier.\n */\nexport interface PhoneNumberKind extends PhoneNumber {\n  /**\n   * The identifier kind.\n   */\n  kind: \"PhoneNumber\";\n}\n\n/**\n * IdentifierKind for a CallingApplication identifier.\n */\nexport interface CallingApplicationKind extends CallingApplication {\n  /**\n   * The identifier kind.\n   */\n  kind: \"CallingApplication\";\n}\n\n/**\n * IdentifierKind for UnkownIdentifer.\n */\nexport interface UnknownIdentifierKind extends UnknownIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"Unknown\";\n}\n\n/**\n * Returns the IdentifierKind for a given Identifier. Returns undefined if the kind couldn't be inferred.\n *\n * @param identifier The identifier whose kind is to be inferred.\n */\nexport const getIdentifierKind = (identifier: Identifier): IdentifierKind => {\n  if (isCommunicationUser(identifier)) {\n    return { ...identifier, kind: \"CommunicationUser\" };\n  }\n  if (isPhoneNumber(identifier)) {\n    return { ...identifier, kind: \"PhoneNumber\" };\n  }\n  if (isCallingApplication(identifier)) {\n    return { ...identifier, kind: \"CallingApplication\" };\n  }\n  return { ...identifier, kind: \"Unknown\" };\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}