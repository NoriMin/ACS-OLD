{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\t-tamina\\\\source\\\\repos\\\\Communication\\\\samples\\\\Group Calling Hero Sample\\\\Web\\\\Calling\\\\ClientApp\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import{LocalVideoStream}from'@azure/communication-calling';import{SET_LOCAL_VIDEO_STREAM,ADD_SCREENSHARE_STREAM,RESET_STREAMS,REMOVE_SCREENSHARE_STREAM}from'../actions/streams';import{SET_VIDEO_DEVICE_INFO}from'../actions/devices';var initialState={localVideoRendererIsBusy:false,localVideoStream:undefined,streams:[],screenShareStreams:[]};export var streamsReducer=function streamsReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case SET_VIDEO_DEVICE_INFO:if(state.localVideoStream&&action.videoDeviceInfo){return _objectSpread(_objectSpread({},state),{},{localVideoStream:new LocalVideoStream(action.videoDeviceInfo)});}return state;case SET_LOCAL_VIDEO_STREAM:return _objectSpread(_objectSpread({},state),{},{localVideoStream:action.localVideoStream});case ADD_SCREENSHARE_STREAM:var newScreenShareStream={stream:action.stream,user:action.user};return _objectSpread(_objectSpread({},state),{},{screenShareStreams:[].concat(_toConsumableArray(state.screenShareStreams),[newScreenShareStream])});case REMOVE_SCREENSHARE_STREAM:var screenShareStreams=state.screenShareStreams.filter(function(stream){return stream.stream!==action.stream&&stream.user!==action.user;});return _objectSpread(_objectSpread({},state),{},{screenShareStreams:screenShareStreams});case RESET_STREAMS:return initialState;default:return state;}};","map":{"version":3,"sources":["C:/Users/t-tamina/source/repos/Communication/samples/Group Calling Hero Sample/Web/Calling/ClientApp/src/core/reducers/streams.ts"],"names":["LocalVideoStream","SET_LOCAL_VIDEO_STREAM","ADD_SCREENSHARE_STREAM","RESET_STREAMS","REMOVE_SCREENSHARE_STREAM","SET_VIDEO_DEVICE_INFO","initialState","localVideoRendererIsBusy","localVideoStream","undefined","streams","screenShareStreams","streamsReducer","state","action","type","videoDeviceInfo","newScreenShareStream","stream","user","filter"],"mappings":"2dACA,OAASA,gBAAT,KAAiC,8BAAjC,CAEA,OACEC,sBADF,CAEEC,sBAFF,CAGEC,aAHF,CAKEC,yBALF,KAMO,oBANP,CAOA,OAAsBC,qBAAtB,KAAmD,oBAAnD,CASA,GAAMC,CAAAA,YAA0B,CAAG,CACjCC,wBAAwB,CAAE,KADO,CAEjCC,gBAAgB,CAAEC,SAFe,CAGjCC,OAAO,CAAE,EAHwB,CAIjCC,kBAAkB,CAAE,EAJa,CAAnC,CAOA,MAAO,IAAMC,CAAAA,cAAgE,CAAG,QAAnEA,CAAAA,cAAmE,EAG7D,IAFjBC,CAAAA,KAEiB,2DAFTP,YAES,IADjBQ,CAAAA,MACiB,2CACjB,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKV,CAAAA,qBAAL,CACE,GAAIQ,KAAK,CAACL,gBAAN,EAA0BM,MAAM,CAACE,eAArC,CAAsD,CACpD,sCAAYH,KAAZ,MAAmBL,gBAAgB,CAAE,GAAIR,CAAAA,gBAAJ,CAAqBc,MAAM,CAACE,eAA5B,CAArC,GACD,CACD,MAAOH,CAAAA,KAAP,CACF,IAAKZ,CAAAA,sBAAL,CACE,sCAAYY,KAAZ,MAAmBL,gBAAgB,CAAEM,MAAM,CAACN,gBAA5C,GACF,IAAKN,CAAAA,sBAAL,CACE,GAAMe,CAAAA,oBAAuC,CAAG,CAAEC,MAAM,CAAEJ,MAAM,CAACI,MAAjB,CAAyBC,IAAI,CAAEL,MAAM,CAACK,IAAtC,CAAhD,CACA,sCAAYN,KAAZ,MAAmBF,kBAAkB,8BAAME,KAAK,CAACF,kBAAZ,GAAgCM,oBAAhC,EAArC,GACF,IAAKb,CAAAA,yBAAL,CACE,GAAMO,CAAAA,kBAAkB,CAAGE,KAAK,CAACF,kBAAN,CAAyBS,MAAzB,CACzB,SAACF,MAAD,QAAYA,CAAAA,MAAM,CAACA,MAAP,GAAkBJ,MAAM,CAACI,MAAzB,EAAmCA,MAAM,CAACC,IAAP,GAAgBL,MAAM,CAACK,IAAtE,EADyB,CAA3B,CAGA,sCAAYN,KAAZ,MAAmBF,kBAAkB,CAAlBA,kBAAnB,GACF,IAAKR,CAAAA,aAAL,CACE,MAAOG,CAAAA,YAAP,CACF,QACE,MAAOO,CAAAA,KAAP,CAnBJ,CAqBD,CAzBM","sourcesContent":["import { Reducer } from 'redux';\r\nimport { LocalVideoStream } from '@azure/communication-calling';\r\nimport { ParticipantStream } from './index';\r\nimport {\r\n  SET_LOCAL_VIDEO_STREAM,\r\n  ADD_SCREENSHARE_STREAM,\r\n  RESET_STREAMS,\r\n  StreamTypes,\r\n  REMOVE_SCREENSHARE_STREAM\r\n} from '../actions/streams';\r\nimport { DeviceTypes, SET_VIDEO_DEVICE_INFO } from '../actions/devices';\r\n\r\nexport interface StreamsState {\r\n  streams: ParticipantStream[];\r\n  screenShareStreams: ParticipantStream[];\r\n  localVideoRendererIsBusy: boolean;\r\n  localVideoStream?: LocalVideoStream;\r\n}\r\n\r\nconst initialState: StreamsState = {\r\n  localVideoRendererIsBusy: false,\r\n  localVideoStream: undefined,\r\n  streams: [],\r\n  screenShareStreams: []\r\n};\r\n\r\nexport const streamsReducer: Reducer<StreamsState, StreamTypes | DeviceTypes> = (\r\n  state = initialState,\r\n  action: StreamTypes | DeviceTypes\r\n): StreamsState => {\r\n  switch (action.type) {\r\n    case SET_VIDEO_DEVICE_INFO:\r\n      if (state.localVideoStream && action.videoDeviceInfo) {\r\n        return { ...state, localVideoStream: new LocalVideoStream(action.videoDeviceInfo) };\r\n      }\r\n      return state;\r\n    case SET_LOCAL_VIDEO_STREAM:\r\n      return { ...state, localVideoStream: action.localVideoStream };\r\n    case ADD_SCREENSHARE_STREAM:\r\n      const newScreenShareStream: ParticipantStream = { stream: action.stream, user: action.user };\r\n      return { ...state, screenShareStreams: [...state.screenShareStreams, newScreenShareStream] };\r\n    case REMOVE_SCREENSHARE_STREAM:\r\n      const screenShareStreams = state.screenShareStreams.filter(\r\n        (stream) => stream.stream !== action.stream && stream.user !== action.user\r\n      );\r\n      return { ...state, screenShareStreams };\r\n    case RESET_STREAMS:\r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}