import { AbortSignalLike } from '@azure/core-http';
import { AccessToken } from '@azure/core-http';
import { KeyCredential } from '@azure/core-auth';
import { RequestPolicyFactory } from '@azure/core-http';

/**
 * The CommunicationUserCredential implementation with support for proactive token refresh.
 */
export declare class AzureCommunicationUserCredential implements CommunicationUserCredential {
    private readonly userCredential;
    private disposed;
    /**
     * Creates an instance of CommunicationUserCredential with a static token and no proactive refreshing.
     * @param token A user access token issued by Communication Services.
     */
    constructor(token: string);
    /**
     * Creates an instance of CommunicationUserCredential with a lambda to get a token and options
     * to configure proactive refreshing.
     * @param refreshOptions Options to configure refresh and opt-in to proactive refreshing.
     */
    constructor(refreshOptions: RefreshOptions);
    /**
     * Gets an `AccessToken` for the user. Throws if already disposed.
     * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.
     */
    getToken(abortSignal?: AbortSignalLike): Promise<AccessToken>;
    /**
     * Disposes the CommunicationUserCredential and cancels any internal auto-refresh operation.
     */
    dispose(): void;
    private throwIfDisposed;
}

/**
 * A calling application, i.e. a non-human participant in communication.
 */
export declare interface CallingApplication {
    /**
     * Id of the CallingApplication.
     */
    callingApplicationId: string;
}

/**
 * IdentifierKind for a CallingApplication identifier.
 */
export declare interface CallingApplicationKind extends CallingApplication {
    /**
     * The identifier kind.
     */
    kind: "CallingApplication";
}

/**
 * An Azure Communication user.
 */
export declare interface CommunicationUser {
    /**
     * Id of the CommunicationUser as returned from the Communication Service.
     */
    communicationUserId: string;
}

/**
 * The Azure Communication Services User token credential.
 */
export declare interface CommunicationUserCredential {
    /**
     * Gets an `AccessToken` for the user. Throws if already disposed.
     * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.
     */
    getToken(abortSignal?: AbortSignalLike): Promise<AccessToken>;
    /**
     * Disposes the CommunicationUserCredential and cancels any internal auto-refresh operation.
     */
    dispose(): void;
}

/**
 * IdentifierKind for a CommunicationUser identifier.
 */
export declare interface CommunicationUserKind extends CommunicationUser {
    /**
     * The identifier kind.
     */
    kind: "CommunicationUser";
}

/**
 * Creates an HTTP pipeline policy to authenticate a request
 * using an `KeyCredential`
 *
 * @param {KeyCredential} credential The key credential
 */
export declare const createCommunicationAccessKeyCredentialPolicy: (credential: KeyCredential) => RequestPolicyFactory;

/**
 * Returns the IdentifierKind for a given Identifier. Returns undefined if the kind couldn't be inferred.
 *
 * @param identifier The identifier whose kind is to be inferred.
 */
export declare const getIdentifierKind: (identifier: Identifier) => IdentifierKind;

/**
 * Identifies a communication user.
 */
export declare type Identifier = CommunicationUser | PhoneNumber | CallingApplication | UnknownIdentifier;

/**
 * The IdentifierKind is a discriminated union that adds a property `kind` to an Identifier.
 */
export declare type IdentifierKind = CommunicationUserKind | PhoneNumberKind | CallingApplicationKind | UnknownIdentifierKind;

/**
 * Tests an Identifier to determine whether it implements CallingApplication.
 *
 * @param identifier The assumed CallingApplication to be tested.
 */
export declare const isCallingApplication: (identifier: Identifier) => identifier is CallingApplication;

/**
 * Tests an Identifier to determine whether it implements CommunicationUser.
 *
 * @param identifier The assumed CommunicationUser to be tested.
 */
export declare const isCommunicationUser: (identifier: Identifier) => identifier is CommunicationUser;

/**
 * Checks whether a value is a KeyCredential.
 *
 * @param {*} credential The credential being checked.
 */
export declare const isKeyCredential: (credential: any) => credential is KeyCredential;

/**
 * Tests an Identifier to determine whether it implements PhoneNumber.
 *
 * @param identifier The assumed PhoneNumber to be tested.
 */
export declare const isPhoneNumber: (identifier: Identifier) => identifier is PhoneNumber;

/**
 * Tests an Identifier to determine whether it implements UnknownIdentifier.
 *
 * @param identifier The assumed UnknownIdentifier to be tested.
 */
export declare const isUnknownIdentifier: (identifier: Identifier) => identifier is UnknownIdentifier;

/**
 * Parses arguments passed to a communication client.
 *
 * @param {string} connectionStringOrUrl
 * @param {*} [credentialOrOptions]
 */
export declare const parseClientArguments: (connectionStringOrUrl: string, credentialOrOptions?: any) => UrlWithCredential;

/**
 * A phone number.
 */
export declare interface PhoneNumber {
    /**
     * The phone number in E.164 format.
     */
    phoneNumber: string;
}

/**
 * IdentifierKind for a PhoneNumber identifier.
 */
export declare interface PhoneNumberKind extends PhoneNumber {
    /**
     * The identifier kind.
     */
    kind: "PhoneNumber";
}

/**
 * Options for auto-refreshing a Communication user credential.
 */
export declare interface RefreshOptions {
    /**
     * Function that returns a user token acquired from the Communication configuration SDK.
     */
    tokenRefresher: (abortSignal?: AbortSignalLike) => Promise<string>;
    /**
     * Optional user token to initialize.
     */
    initialToken?: string;
    /**
     * Indicates whether the user token should be proactively renewed prior to expiry or only renew on demand.
     * By default false.
     */
    refreshProactively?: boolean;
}

/**
 * An unknown identifier that doesn't fit any of the other identifier types.
 */
export declare interface UnknownIdentifier {
    /**
     * Id of the UnknownIdentifier.
     */
    id: string;
}

/**
 * IdentifierKind for UnkownIdentifer.
 */
export declare interface UnknownIdentifierKind extends UnknownIdentifier {
    /**
     * The identifier kind.
     */
    kind: "Unknown";
}

/**
 * The URL and credential from parsing the arguments of a communication client.
 */
export declare type UrlWithCredential = {
    url: string;
    credential: KeyCredential;
};

export { }
