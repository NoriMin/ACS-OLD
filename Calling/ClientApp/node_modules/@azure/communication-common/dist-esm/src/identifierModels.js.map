{"version":3,"file":"identifierModels.js","sourceRoot":"","sources":["../../src/identifierModels.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AA+ClC;;;;GAIG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,UAAsB,EAAmC,EAAE;IAC7F,OAAO,OAAQ,UAAkB,CAAC,mBAAmB,KAAK,QAAQ,CAAC;AACrE,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,UAAsB,EAA6B,EAAE;IACjF,OAAO,OAAQ,UAAkB,CAAC,WAAW,KAAK,QAAQ,CAAC;AAC7D,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,UAAsB,EAAoC,EAAE;IAC/F,OAAO,OAAQ,UAAkB,CAAC,oBAAoB,KAAK,QAAQ,CAAC;AACtE,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,UAAsB,EAAmC,EAAE;IAC7F,OAAO,OAAQ,UAAkB,CAAC,EAAE,KAAK,QAAQ,CAAC;AACpD,CAAC,CAAC;AAmDF;;;;GAIG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,UAAsB,EAAkB,EAAE;IAC1E,IAAI,mBAAmB,CAAC,UAAU,CAAC,EAAE;QACnC,uCAAY,UAAU,KAAE,IAAI,EAAE,mBAAmB,IAAG;KACrD;IACD,IAAI,aAAa,CAAC,UAAU,CAAC,EAAE;QAC7B,uCAAY,UAAU,KAAE,IAAI,EAAE,aAAa,IAAG;KAC/C;IACD,IAAI,oBAAoB,CAAC,UAAU,CAAC,EAAE;QACpC,uCAAY,UAAU,KAAE,IAAI,EAAE,oBAAoB,IAAG;KACtD;IACD,uCAAY,UAAU,KAAE,IAAI,EAAE,SAAS,IAAG;AAC5C,CAAC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Identifies a communication user.\n */\nexport type Identifier = CommunicationUser | PhoneNumber | CallingApplication | UnknownIdentifier;\n\n/**\n * An Azure Communication user.\n */\nexport interface CommunicationUser {\n  /**\n   * Id of the CommunicationUser as returned from the Communication Service.\n   */\n  communicationUserId: string;\n}\n\n/**\n * A phone number.\n */\nexport interface PhoneNumber {\n  /**\n   * The phone number in E.164 format.\n   */\n  phoneNumber: string;\n}\n\n/**\n * A calling application, i.e. a non-human participant in communication.\n */\nexport interface CallingApplication {\n  /**\n   * Id of the CallingApplication.\n   */\n  callingApplicationId: string;\n}\n\n/**\n * An unknown identifier that doesn't fit any of the other identifier types.\n */\nexport interface UnknownIdentifier {\n  /**\n   * Id of the UnknownIdentifier.\n   */\n  id: string;\n}\n\n/**\n * Tests an Identifier to determine whether it implements CommunicationUser.\n *\n * @param identifier The assumed CommunicationUser to be tested.\n */\nexport const isCommunicationUser = (identifier: Identifier): identifier is CommunicationUser => {\n  return typeof (identifier as any).communicationUserId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements PhoneNumber.\n *\n * @param identifier The assumed PhoneNumber to be tested.\n */\nexport const isPhoneNumber = (identifier: Identifier): identifier is PhoneNumber => {\n  return typeof (identifier as any).phoneNumber === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements CallingApplication.\n *\n * @param identifier The assumed CallingApplication to be tested.\n */\nexport const isCallingApplication = (identifier: Identifier): identifier is CallingApplication => {\n  return typeof (identifier as any).callingApplicationId === \"string\";\n};\n\n/**\n * Tests an Identifier to determine whether it implements UnknownIdentifier.\n *\n * @param identifier The assumed UnknownIdentifier to be tested.\n */\nexport const isUnknownIdentifier = (identifier: Identifier): identifier is UnknownIdentifier => {\n  return typeof (identifier as any).id === \"string\";\n};\n\n/**\n * The IdentifierKind is a discriminated union that adds a property `kind` to an Identifier.\n */\nexport type IdentifierKind =\n  | CommunicationUserKind\n  | PhoneNumberKind\n  | CallingApplicationKind\n  | UnknownIdentifierKind;\n\n/**\n * IdentifierKind for a CommunicationUser identifier.\n */\nexport interface CommunicationUserKind extends CommunicationUser {\n  /**\n   * The identifier kind.\n   */\n  kind: \"CommunicationUser\";\n}\n\n/**\n * IdentifierKind for a PhoneNumber identifier.\n */\nexport interface PhoneNumberKind extends PhoneNumber {\n  /**\n   * The identifier kind.\n   */\n  kind: \"PhoneNumber\";\n}\n\n/**\n * IdentifierKind for a CallingApplication identifier.\n */\nexport interface CallingApplicationKind extends CallingApplication {\n  /**\n   * The identifier kind.\n   */\n  kind: \"CallingApplication\";\n}\n\n/**\n * IdentifierKind for UnkownIdentifer.\n */\nexport interface UnknownIdentifierKind extends UnknownIdentifier {\n  /**\n   * The identifier kind.\n   */\n  kind: \"Unknown\";\n}\n\n/**\n * Returns the IdentifierKind for a given Identifier. Returns undefined if the kind couldn't be inferred.\n *\n * @param identifier The identifier whose kind is to be inferred.\n */\nexport const getIdentifierKind = (identifier: Identifier): IdentifierKind => {\n  if (isCommunicationUser(identifier)) {\n    return { ...identifier, kind: \"CommunicationUser\" };\n  }\n  if (isPhoneNumber(identifier)) {\n    return { ...identifier, kind: \"PhoneNumber\" };\n  }\n  if (isCallingApplication(identifier)) {\n    return { ...identifier, kind: \"CallingApplication\" };\n  }\n  return { ...identifier, kind: \"Unknown\" };\n};\n"]}