// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __awaiter } from "tslib";
import { parseToken } from "./tokenParser";
import { StaticTokenCredential } from "./staticTokenCredential";
import { AutoRefreshUserCredential } from "./autoRefreshUserCredential";
/**
 * The CommunicationUserCredential implementation with support for proactive token refresh.
 */
export class AzureCommunicationUserCredential {
    constructor(tokenOrRefreshOptions) {
        this.disposed = false;
        if (typeof tokenOrRefreshOptions === "string") {
            this.userCredential = new StaticTokenCredential(parseToken(tokenOrRefreshOptions));
        }
        else {
            this.userCredential = new AutoRefreshUserCredential(tokenOrRefreshOptions);
        }
    }
    /**
     * Gets an `AccessToken` for the user. Throws if already disposed.
     * @param abortSignal An implementation of `AbortSignalLike` to cancel the operation.
     */
    getToken(abortSignal) {
        return __awaiter(this, void 0, void 0, function* () {
            this.throwIfDisposed();
            const token = yield this.userCredential.getToken(abortSignal);
            this.throwIfDisposed();
            return token;
        });
    }
    /**
     * Disposes the CommunicationUserCredential and cancels any internal auto-refresh operation.
     */
    dispose() {
        this.disposed = true;
        this.userCredential.dispose();
    }
    throwIfDisposed() {
        if (this.disposed) {
            throw new Error("User credential is disposed");
        }
    }
}
//# sourceMappingURL=communicationUserCredential.js.map