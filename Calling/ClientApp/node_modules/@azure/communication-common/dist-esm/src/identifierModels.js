// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
/**
 * Tests an Identifier to determine whether it implements CommunicationUser.
 *
 * @param identifier The assumed CommunicationUser to be tested.
 */
export const isCommunicationUser = (identifier) => {
    return typeof identifier.communicationUserId === "string";
};
/**
 * Tests an Identifier to determine whether it implements PhoneNumber.
 *
 * @param identifier The assumed PhoneNumber to be tested.
 */
export const isPhoneNumber = (identifier) => {
    return typeof identifier.phoneNumber === "string";
};
/**
 * Tests an Identifier to determine whether it implements CallingApplication.
 *
 * @param identifier The assumed CallingApplication to be tested.
 */
export const isCallingApplication = (identifier) => {
    return typeof identifier.callingApplicationId === "string";
};
/**
 * Tests an Identifier to determine whether it implements UnknownIdentifier.
 *
 * @param identifier The assumed UnknownIdentifier to be tested.
 */
export const isUnknownIdentifier = (identifier) => {
    return typeof identifier.id === "string";
};
/**
 * Returns the IdentifierKind for a given Identifier. Returns undefined if the kind couldn't be inferred.
 *
 * @param identifier The identifier whose kind is to be inferred.
 */
export const getIdentifierKind = (identifier) => {
    if (isCommunicationUser(identifier)) {
        return Object.assign(Object.assign({}, identifier), { kind: "CommunicationUser" });
    }
    if (isPhoneNumber(identifier)) {
        return Object.assign(Object.assign({}, identifier), { kind: "PhoneNumber" });
    }
    if (isCallingApplication(identifier)) {
        return Object.assign(Object.assign({}, identifier), { kind: "CallingApplication" });
    }
    return Object.assign(Object.assign({}, identifier), { kind: "Unknown" });
};
//# sourceMappingURL=identifierModels.js.map