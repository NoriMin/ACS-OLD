{"version":3,"sources":["mergeThemes.ts"],"names":["emptyTheme","siteVariables","fontSizes","componentVariables","componentStyles","fontFaces","staticStyles","animations","mergeComponentStyles__PROD","initial","sources","reduce","partStylesPrepared","stylesByPart","partStyle","partName","originalTarget","originalSource","Object","keys","length","styleParam","mergeComponentStyles__DEV","isDebugEnabled","_debug","undefined","styles","debugId","_debugId","targetDebug","targetStyles","sourceDebug","sourceStyles","merged","concat","mergeComponentStyles","process","env","NODE_ENV","mergeComponentVariables__PROD","filteredSources","filter","Boolean","acc","next","mergeComponentVariables","accumulatedVariables","fn","computedComponentVariables","mergeComponentVariables__DEV","computedDebug","resolved","input","_invertedKeys","mergeSiteVariables__PROD","deepmerge","mergeSiteVariables__DEV","accumulatedSiteVariables","nextSiteVariables","key","mergeSiteVariables","mergeThemeVariables__PROD","displayNames","displayName","mergeThemeVariables__DEV","source","mergeThemeVariables","mergeThemeStyles","themeComponentStyles","mergeFontFaces","toCompactArray","mergeStaticStyles","mergeAnimations","assign","mergeStyles","args","mergeThemes","themes","nextDebugId"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\n\nimport { callable } from './callable';\nimport {\n  ComponentSlotStyle,\n  ComponentSlotStylesInput,\n  ComponentSlotStylesPrepared,\n  ComponentVariablesInput,\n  ComponentVariablesPrepared,\n  FontFace,\n  SiteVariablesInput,\n  SiteVariablesPrepared,\n  StaticStyle,\n  ThemeAnimation,\n  ThemeComponentStylesInput,\n  ThemeComponentStylesPrepared,\n  ThemeComponentVariablesInput,\n  ThemeComponentVariablesPrepared,\n  ThemeInput,\n  ThemePrepared,\n} from './types';\n\nimport { isEnabled as isDebugEnabled } from './debugEnabled';\nimport { deepmerge } from './deepmerge';\nimport { objectKeyToValues } from './objectKeysToValues';\nimport { toCompactArray } from './toCompactArray';\nimport { withDebugId } from './withDebugId';\n\nexport const emptyTheme: ThemePrepared = {\n  siteVariables: {\n    fontSizes: {},\n  },\n  componentVariables: {},\n  componentStyles: {},\n  fontFaces: [],\n  staticStyles: [],\n  animations: {},\n};\n\n// ----------------------------------------\n// Component level merge functions\n// ----------------------------------------\n\n/**\n * Merges a single component's styles (keyed by component part) with another component's styles.\n */\nexport const mergeComponentStyles__PROD = (\n  ...sources: (ComponentSlotStylesInput | null | undefined)[]\n): ComponentSlotStylesPrepared => {\n  const initial: ComponentSlotStylesPrepared = {};\n\n  return sources.reduce<ComponentSlotStylesPrepared>((partStylesPrepared, stylesByPart) => {\n    _.forEach(stylesByPart, (partStyle, partName) => {\n      // Break references to avoid an infinite loop.\n      // We are replacing functions with a new ones that calls the originals.\n      const originalTarget = partStylesPrepared[partName];\n      const originalSource = partStyle;\n\n      // if there is no source, merging is a no-op, skip it\n      if (\n        typeof originalSource === 'undefined' ||\n        originalSource === null ||\n        (typeof originalSource === 'object' && Object.keys(originalSource).length === 0)\n      ) {\n        return;\n      }\n\n      // no target means source doesn't need to merge onto anything\n      // just ensure source is callable (prepared format)\n      if (typeof originalTarget === 'undefined') {\n        partStylesPrepared[partName] = typeof originalSource === 'function' ? originalSource : callable(originalSource);\n        return;\n      }\n\n      // We have both target and source, replace with merge fn\n      partStylesPrepared[partName] = styleParam => {\n        // originalTarget is always prepared, fn is guaranteed\n        return _.merge(originalTarget(styleParam), callable(originalSource)(styleParam));\n      };\n    });\n\n    return partStylesPrepared;\n  }, initial);\n};\n\nexport const mergeComponentStyles__DEV = (\n  ...sources: (ComponentSlotStylesInput | null | undefined)[]\n): ComponentSlotStylesPrepared => {\n  if (!isDebugEnabled) {\n    return mergeComponentStyles__PROD(...sources);\n  }\n  const initial: ComponentSlotStylesPrepared = {};\n\n  return sources.reduce<ComponentSlotStylesPrepared>((partStylesPrepared, stylesByPart) => {\n    _.forEach(stylesByPart, (partStyle, partName) => {\n      // Break references to avoid an infinite loop.\n      // We are replacing functions with a new ones that calls the originals.\n      const originalTarget = partStylesPrepared[partName];\n      const originalSource = partStyle;\n\n      // if there is no source, merging is a no-op, skip it\n      if (\n        typeof originalSource === 'undefined' ||\n        originalSource === null ||\n        (typeof originalSource === 'object' && Object.keys(originalSource).length === 0)\n      ) {\n        return;\n      }\n\n      // no target means source doesn't need to merge onto anything\n      // just ensure source is callable (prepared format) and has _debug\n      if (typeof originalTarget === 'undefined') {\n        partStylesPrepared[partName] = styleParam => {\n          // originalTarget is always prepared, fn is guaranteed, _debug always exists\n          const { _debug = undefined, ...styles } = callable(originalSource)(styleParam) || {};\n\n          // new object required to prevent circular JSON structure error in <Debug />\n          return {\n            ...styles,\n            _debug: _debug || [{ styles: { ...styles }, debugId: stylesByPart._debugId }],\n          };\n        };\n\n        return;\n      }\n\n      // We have both target and source, replace with merge fn\n      partStylesPrepared[partName] = styleParam => {\n        // originalTarget is always prepared, fn is guaranteed, _debug always exists\n        const { _debug: targetDebug, ...targetStyles } = originalTarget(styleParam);\n        const { _debug: sourceDebug = undefined, ...sourceStyles } = callable(originalSource)(styleParam) || {};\n\n        const merged = _.merge(targetStyles, sourceStyles);\n        merged._debug = targetDebug.concat(sourceDebug || { styles: sourceStyles, debugId: stylesByPart._debugId });\n        return merged;\n      };\n    });\n\n    return partStylesPrepared;\n  }, initial);\n};\n\nexport const mergeComponentStyles: (\n  ...sources: (ComponentSlotStylesInput | null | undefined)[]\n) => ComponentSlotStylesPrepared =\n  process.env.NODE_ENV === 'production' ? mergeComponentStyles__PROD : mergeComponentStyles__DEV;\n\n/**\n * Merges a single component's variables with another component's variables.\n */\nexport const mergeComponentVariables__PROD = (...sources: ComponentVariablesInput[]): ComponentVariablesPrepared => {\n  const initial = () => ({});\n\n  // filtering is required as some arguments can be undefined\n  const filteredSources = sources.filter(Boolean);\n\n  // a short circle to avoid calls of deepmerge()\n  if (filteredSources.length === 1) {\n    return typeof filteredSources[0] === 'function' ? filteredSources[0] : callable(filteredSources[0]);\n  }\n\n  return filteredSources.reduce<ComponentVariablesPrepared>((acc, next) => {\n    return function mergeComponentVariables(...args) {\n      const accumulatedVariables = acc(...args);\n      const fn = typeof next === 'function' ? next : callable(next);\n      const computedComponentVariables = fn(...args);\n\n      return deepmerge(accumulatedVariables, computedComponentVariables);\n    };\n  }, initial);\n};\n\nexport const mergeComponentVariables__DEV = (...sources: ComponentVariablesInput[]): ComponentVariablesPrepared => {\n  if (!isDebugEnabled) {\n    return mergeComponentVariables__PROD(...sources);\n  }\n  const initial = () => ({});\n\n  return sources.reduce<ComponentVariablesPrepared>((acc, next) => {\n    return siteVariables => {\n      const { _debug = [], ...accumulatedVariables } = acc(siteVariables);\n      const { _debug: computedDebug = undefined, _debugId = undefined, ...computedComponentVariables } =\n        callable(next)(siteVariables) || {};\n\n      const merged = deepmerge(accumulatedVariables, computedComponentVariables);\n\n      merged._debug = _debug.concat(\n        computedDebug || {\n          resolved: computedComponentVariables,\n          debugId: _debugId,\n          input: siteVariables\n            ? siteVariables._invertedKeys && callable(next)(siteVariables._invertedKeys)\n            : callable(next)(),\n        },\n      );\n      return merged;\n    };\n  }, initial);\n};\n\nexport const mergeComponentVariables =\n  process.env.NODE_ENV === 'production' ? mergeComponentVariables__PROD : mergeComponentVariables__DEV;\n\n// ----------------------------------------\n// Theme level merge functions\n// ----------------------------------------\n\n/**\n * Site variables can safely be merged at each Provider in the tree.\n * They are flat objects and do not depend on render-time values, such as props.\n */\nexport const mergeSiteVariables__PROD = (\n  ...sources: (SiteVariablesInput | null | undefined)[]\n): SiteVariablesPrepared => {\n  const initial: SiteVariablesPrepared = {\n    fontSizes: {},\n  };\n  return deepmerge(initial, ...sources);\n};\n\nexport const mergeSiteVariables__DEV = (\n  ...sources: (SiteVariablesInput | null | undefined)[]\n): SiteVariablesPrepared => {\n  if (!isDebugEnabled) {\n    return mergeSiteVariables__PROD(...sources);\n  }\n\n  const initial: SiteVariablesPrepared = {\n    fontSizes: {},\n  };\n\n  return sources.reduce<SiteVariablesPrepared>((acc, next) => {\n    const { _debug = [], ...accumulatedSiteVariables } = acc;\n    const { _debug: computedDebug = undefined, _invertedKeys = undefined, _debugId = undefined, ...nextSiteVariables } =\n      next || {};\n\n    const merged = deepmerge({ ...accumulatedSiteVariables, _invertedKeys: undefined }, nextSiteVariables);\n    merged._debug = _debug.concat(computedDebug || { resolved: nextSiteVariables, debugId: _debugId });\n    merged._invertedKeys = _invertedKeys || objectKeyToValues(merged, key => `siteVariables.${key}`);\n    return merged;\n  }, initial);\n};\n\nexport const mergeSiteVariables =\n  process.env.NODE_ENV === 'production' ? mergeSiteVariables__PROD : mergeSiteVariables__DEV;\n\n/**\n * Component variables can be objects, functions, or an array of these.\n * The functions must be called with the final result of siteVariables, otherwise\n *   the component variable objects would have no ability to apply siteVariables.\n * Therefore, componentVariables must be resolved by the component at render time.\n * We instead pass down call stack of component variable functions to be resolved later.\n */\n\nexport const mergeThemeVariables__PROD = (\n  ...sources: (ThemeComponentVariablesInput | null | undefined)[]\n): ThemeComponentVariablesPrepared => {\n  const displayNames = _.union(..._.map(sources, _.keys));\n  return displayNames.reduce((componentVariables, displayName) => {\n    componentVariables[displayName] = mergeComponentVariables(..._.map(sources, displayName));\n    return componentVariables;\n  }, {});\n};\n\nexport const mergeThemeVariables__DEV = (\n  ...sources: (ThemeComponentVariablesInput | null | undefined)[]\n): ThemeComponentVariablesPrepared => {\n  if (!isDebugEnabled) {\n    return mergeThemeVariables__PROD(...sources);\n  }\n\n  const displayNames = _.union(..._.map(sources, _.keys));\n  return displayNames.reduce((componentVariables, displayName) => {\n    componentVariables[displayName] = mergeComponentVariables(\n      ..._.map(sources, source => source && withDebugId(source[displayName], source._debugId)),\n    );\n    return componentVariables;\n  }, {});\n};\n\nexport const mergeThemeVariables =\n  process.env.NODE_ENV === 'production' ? mergeThemeVariables__PROD : mergeThemeVariables__DEV;\n\n/**\n * See mergeThemeVariables() description.\n * Component styles adhere to the same pattern as component variables, except\n *   that they return style objects.\n */\nexport const mergeThemeStyles = (\n  ...sources: (ThemeComponentStylesInput | null | undefined)[]\n): ThemeComponentStylesPrepared => {\n  const initial: ThemeComponentStylesPrepared = {};\n\n  return sources.reduce<ThemeComponentStylesPrepared>((themeComponentStyles, next) => {\n    _.forEach(next, (stylesByPart, displayName) => {\n      themeComponentStyles[displayName] = mergeComponentStyles(\n        themeComponentStyles[displayName],\n        withDebugId(stylesByPart, (next as ThemeComponentStylesPrepared & { _debugId: string })._debugId),\n      );\n    });\n\n    return themeComponentStyles;\n  }, initial);\n};\n\nexport const mergeFontFaces = (...sources: FontFace[]) => {\n  return toCompactArray<FontFace>(...sources);\n};\n\nexport const mergeStaticStyles = (...sources: StaticStyle[]) => {\n  return toCompactArray<StaticStyle>(...sources);\n};\n\nexport const mergeAnimations = (...sources: { [key: string]: ThemeAnimation }[]): { [key: string]: ThemeAnimation } => {\n  return Object.assign({}, ...sources);\n};\n\nexport const mergeStyles = (...sources: ComponentSlotStyle[]) => {\n  return (...args) => {\n    return sources.reduce((acc, next) => {\n      return _.merge(acc, callable(next)(...args));\n    }, {});\n  };\n};\n\nexport const mergeThemes = (...themes: ThemeInput[]): ThemePrepared => {\n  return themes.reduce<ThemePrepared>(\n    (acc: ThemePrepared, next: ThemeInput) => {\n      if (!next) return acc;\n      const nextDebugId = next['_debugId'];\n\n      acc.siteVariables = mergeSiteVariables(acc.siteVariables, withDebugId(next.siteVariables, nextDebugId));\n\n      acc.componentVariables = mergeThemeVariables(\n        acc.componentVariables,\n        withDebugId(next.componentVariables, nextDebugId),\n      );\n\n      acc.componentStyles = mergeThemeStyles(acc.componentStyles, withDebugId(next.componentStyles, nextDebugId));\n\n      acc.fontFaces = mergeFontFaces(...acc.fontFaces, ...(next.fontFaces || []));\n\n      acc.staticStyles = mergeStaticStyles(...acc.staticStyles, ...(next.staticStyles || []));\n\n      acc.animations = mergeAnimations(acc.animations, next.animations);\n\n      return acc;\n    },\n    // .reduce() will modify \"emptyTheme\" object, so we should clone it before actual usage\n    { ...emptyTheme },\n  );\n};\n"],"file":"mergeThemes.js"}